iOS: Op type not registered 'DecodeWav'

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): I am trying to run graph model from Simple Audio Recognition example on iOS.
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS X 10.13
TensorFlow installed from (source or binary): Branch r1.4
TensorFlow version (use command below): 1.4
Python version: 2.7
Bazel version (if compiling from source): Build label: 0.9.0-homebrew
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: N/A

Describe the problem
I am trying to run graph model from Simple Audio Recognition example on iOS. When I am calling session->Create(tensorflow_graph) with the graph I get the error: "Could not create TensorFlow Graph: Not found: Op type not registered 'DecodeWav'...".
My initial thought is that because I am using TensorFlow-experimental (1.1.1) from pods, it's possible that this Op type is not registered. So I tried building it myself, which builds without errors with command: tensorflow/contrib/makefile/build_all_ios.sh. I then remove TensorFlow-experimental (1.1.1) from the project and link my own build of tensorflow, but I get the same error.
I also found the following PR - [iOS] Add optional Selective Registration of Ops #14421
I tried building from master with the above PR merged like so:
For iPhone 5:
tensorflow/contrib/makefile/build_all_ios.sh -a armv7 -g /Users/anton/Development/tensorflow/tensorflow/examples/ios/simple/data/tensorflow_inception_graph_speech.pb
For iPhone SE:
tensorflow/contrib/makefile/build_all_ios.sh -a arm64 -g /Users/anton/Development/tensorflow/tensorflow/examples/ios/simple/data/tensorflow_inception_graph_speech.pb
If I then go and check the file /tensorflow/tensorflow/core/framework/ops_to_register.h (auto-generated after above command) I can see that DecodeWav is listed among kernels and operations:
// This file was autogenerated by print_selective_registration_header.py
#ifndef OPS_TO_REGISTER
#define OPS_TO_REGISTER

    namespace {
      constexpr const char* skip(const char* x) {
        return (*x) ? (*x == ' ' ? skip(x + 1) : x) : x;
      }

      constexpr bool isequal(const char* x, const char* y) {
        return (*skip(x) && *skip(y))
                   ? (*skip(x) == *skip(y) && isequal(skip(x) + 1, skip(y) + 1))
                   : (!*skip(x) && !*skip(y));
      }

      template<int N>
      struct find_in {
        static constexpr bool f(const char* x, const char* const y[N]) {
          return isequal(x, y[0]) || find_in<N - 1>::f(x, y + 1);
        }
      };

      template<>
      struct find_in<0> {
        static constexpr bool f(const char* x, const char* const y[]) {
          return false;
        }
      };
    }  // end namespace
    constexpr const char* kNecessaryOpKernelClasses[] = {
"BinaryOp< CPUDevice, functor::add<float>>",
"AudioSpectrogramOp",
"ConstantOp",
"Conv2DOp<CPUDevice, float>",
"DecodeWavOp",
"IdentityOp",
"MatMulOp<CPUDevice, float, false >",
"MaxPoolingOp<CPUDevice, float>",
"MfccOp",
"NoOp",
"PlaceholderOp",
"ReluOp<CPUDevice, float>",
"ReshapeOp",
"SoftmaxOp<CPUDevice, float>",
"RecvOp",
"SendOp",
};
#define SHOULD_REGISTER_OP_KERNEL(clz) (find_in<sizeof(kNecessaryOpKernelClasses) / sizeof(*kNecessaryOpKernelClasses)>::f(clz, kNecessaryOpKernelClasses))

constexpr inline bool ShouldRegisterOp(const char op[]) {
  return false
     || isequal(op, "Add")
     || isequal(op, "AudioSpectrogram")
     || isequal(op, "Const")
     || isequal(op, "Conv2D")
     || isequal(op, "DecodeWav")
     || isequal(op, "Identity")
     || isequal(op, "MatMul")
     || isequal(op, "MaxPool")
     || isequal(op, "Mfcc")
     || isequal(op, "NoOp")
     || isequal(op, "Placeholder")
     || isequal(op, "Relu")
     || isequal(op, "Reshape")
     || isequal(op, "Softmax")
     || isequal(op, "_Recv")
     || isequal(op, "_Send")
  ;
}
#define SHOULD_REGISTER_OP(op) ShouldRegisterOp(op)

#define SHOULD_REGISTER_OP_GRADIENT false
#endif


But when I try to run the graph model I still get same error message. I have removed the pod version, and I am 100% sure I am running my own build version of tensorflow on iOS.
I can't tell if this is a bug or I am doing something wrong during the build process.
Has anyone tried running any graph that uses DecodeWav on iOS?
Thanks.
Source code / logs
Error: Could not create TensorFlow Graph: Not found: Op type not registered 'DecodeWav' in binary running on Antons-iPhone. Make sure the Op and Kernel are registered in the binary running in this process.