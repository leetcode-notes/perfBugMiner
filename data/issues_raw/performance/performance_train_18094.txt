`tf.keras.estimator._create_ordered_io` casts everything to floatx, which breaks non-floatx inputs

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Debian 3.16.36
TensorFlow installed from (source or binary): Installed via pip
TensorFlow version (use command below): ('v1.6.0-0-gd2e24b6039', '1.6.0')
Python version: 2.7.9
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: n/a
GPU model and memory: n/a
Exact command to reproduce: Requires significant code, let me know if necessary

Describe the problem
This is kind of a simple issue with using Keras models as Tensorflow Estimators. I unfortunately need to do this awkward conversion in order to use SageMaker, which is even more awkwardly behind by two versions of Tensorflow. Which is fun.
Basically, I have a Keras model that expects a tf.string input dtype, which is then passed through to a Lookup layer for some text embeddings. This works fine as a Keras model and works fine if I extract the input layers myself and connect them into an Estimator. However, if I go to create an estimator from the model using model_to_estimator I run into this code path: https://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/python/keras/_impl/keras/estimator.py#L80
This conversion then causes the model to break further down the line. I'm not sure why this float cast occurs, but this commit 4c86ece#diff-69effda952f96b36c8015cc1a3462d65 seems to imply that Keras models are meant to only take floatx input, which doesn't really seem right.
Would not doing this cast break anything? If so, is there a way to use a non-float32 input with Keras models that need to be converted to Estimators?
Thanks!
Source code / logs
Here's the exact traceback for the issue:
/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/h5py/__init__.py:34: FutureWarning: Conversion of the second argument 
of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.          
  from ._conv import register_converters as _register_converters                                                                           
WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmp6Wogzk                                                               
2018-03-29 14:12:41.586292: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow       
binary was not compiled to use: AVX2 FMA                                                                                                   
WARNING:tensorflow:Output "final_representation" missing from loss dictionary. We assume this was done on purpose, and we will not be      
expecting any data to be passed to "final_representation" during training.                                                                 
WARNING:tensorflow:Output "oov_code" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any    
data to be passed to "oov_code" during training.                                                                                           
Testing common_estimator_fns.py locally                                                                                                    
Making estimator                                                                                                                           
Model dir: /tmp/tmp6Wogzk                                                                                                                  
Training estimator                                                                                                                         
float64                                                                                                                                    
Tensor("random_shuffle_queue_DequeueMany:1", shape=(32, 1), dtype=string, device=/device:CPU:0)                                            
Traceback (most recent call last):                                                                                                         
  File "common_estimator_fns.py", line 423, in <module>                                                                                    
    hooks=[tf_debug.LocalCLIDebugHook()])                                                                                                  
  File "/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py", line 352, in train 
    loss = self._train_model(input_fn, hooks, saving_listeners)                                                                            
  File "/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py", line 812, in       
_train_model                                                                                                                               
    features, labels, model_fn_lib.ModeKeys.TRAIN, self.config)                                                                            
  File "/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py", line 793, in       
_call_model_fn                                                                                                                             
    model_fn_results = self._model_fn(features=features, **kwargs)                                                                         
  File "common_estimator_fns.py", line 381, in model_fn                                                                                    
    return keras_model_fn(features, labels, mode)                                                                                          
  File "/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/estimator.py", line 160,  
in model_fn                                                                                                                                
    labels)                                                                                                                                
  File "/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/estimator.py", line 109,  
in _clone_and_build_model                                                                                                                  
    model = models.clone_model(keras_model, input_tensors=input_tensors)                                                                   
  File "/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/models.py", line 1557, in 
clone_model                                                                                                                                
    return _clone_functional_model(model, input_tensors=input_tensors)                                                                     
  File "/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/models.py", line 1451, in 
_clone_functional_model                                                                                                                    
    output_tensors = topology._to_list(layer(computed_tensor, **kwargs))                                                                   
  File "/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py", line 
258, in __call__                                                                                                                           
    output = super(Layer, self).__call__(inputs, **kwargs)                                                                                 
  File "/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/layers/base.py", line 673, in __call__      
    self._assert_input_compatibility(inputs)                                                                                               
  File "/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/layers/base.py", line 1204, in              
_assert_input_compatibility                                                                                                                
    ', found dtype=' + str(x.dtype))                                                                                                       
ValueError: Input 0 of layer lookedup is incompatible with the layer: expected dtype=<dtype: 'string'>, found dtype=<dtype: 'float32'>     

I can provide code if absolutely necessary, but it'd take some work to get to a minimal reproduction.