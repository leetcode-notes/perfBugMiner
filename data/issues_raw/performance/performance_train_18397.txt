Java wrapper floods temp dir with copies of extracted native library

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 7 x64
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): 1.5.0
Python version: N/A
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: None

Describe the problem
I've been working on a Java application that uses TensorFlow. I launched it thousand times - unit tests, debugging sessions, etc. And at some point I discovered I had 8 GB of tensorflow_jni.dll copies in my Temp directory.
Apparently deleteOnExit() is not enough to cleanup the extracted native library (NativeLibrary.java:150). Not on Windows at least. It appears DLL is still loaded when the deletion is attempted. So the deletion fails and the DLL is left behind.
A better approach would be to use semi-static path for library extraction rather than fully random.
In such case the library could be deleted or re-used upon the next application run.
I would suggest to use a target folder name like this:
File tmp = new File(System.getProperty("java.io.tmpdir"));
File dir = new File(tmp, "tensorflow-" + TF_VERSION + '-' + System.getProperty("user.name").hashCode());

And then check if the folder and files exist already upon startup. And either delete them and extract again (better security) or just call System.loadLibrary() directly.
You could still keep using deleteOnExit(). When it works properly the only copy of the library will not be left laying on the disk after JVM shutdown.
A similar approach is used by other native libraries handling frameworks. For example, in JNA project.
See https://github.com/java-native-access/jna/blob/master/src/com/sun/jna/Native.java