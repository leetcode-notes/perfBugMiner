zeros_like doesn't fully respect the optimize argument

The definition of zeros_like is:
def zeros_like(tensor, dtype=None, name=None, optimize=True):
  with ops.name_scope(name, "zeros_like", [tensor]) as name:
    tensor = ops.convert_to_tensor(tensor, name="tensor")

    if tensor.shape.is_fully_defined():
      # We can produce a zeros tensor independent of the value of 'tensor',
      # since the shape is known statically.
      return zeros(tensor.shape, dtype=dtype or tensor.dtype, name=name)

    if dtype is not None and dtype != tensor.dtype:
      return zeros(
          shape_internal(tensor, optimize=optimize), dtype=dtype, name=name)
    else:
      return gen_array_ops._zeros_like(tensor, name=name)
We can see that if the shape of tensor is already known, the optimize parameter is ignored, which is inconsistent with the documented behavior.