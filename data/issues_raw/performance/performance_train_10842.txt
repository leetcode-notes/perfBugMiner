Feature request: add more options to Luong attention

Currently, the best results of the Luong attention paper (Minh-Thang Luong, Hieu Pham, Christopher D. Manning. "Effective Approaches to Attention-based Neural Machine Translation." EMNLP 2015.) cannot be reproduced with the implementation of tf.contrib.seq2seq.LuongAttention. Features that are missing:

Local attention: attend to a window of time steps, rather than to all of the time steps of the encoder output (global attention). The window size should be a hyperparameter that the user can tune.
Different scoring functions: currently, the scoring function is limited to a dot products between each encoder output and the decoder output. The paper shows better results with "general" scoring (all of the encoder outputs are multiplied by one learnable matrix) and also explores the option of using Bahdanau-like scoring (concatenate and multiply by a learnable matrix, then apply tanh and take a dot product with a learnable vector).
Predictive alignments: while the probability function can be replaced, it would be nice to add predictive alignment as a function, and make the implementation of both monotonic and predictive alignments behave well with local attention limited to a time window (changes shape of learnables).
Input-feeding approach: (please correct me in this one if I am mistaken) the current implementation is missing the final step that computes a prediction by concatenating the context vector with the decoder output, weights them and applies tanh (let this be s_t=tanh(W [c_t; h_t])). Passing s_t through a softmax layer gives the prediction distribution, but passing it as is to the next input improved performance in the paper.

On a sidenote: it also seems to be that there is no difference in the key and query vectors between the Bahdanau and Luong attention mechanisms, when there should be. Bahdanau attention has a computation pathway starting from the previous decoder output h_{t-1} -> a_t -> c_t -> h_t, while Luong attention starts from the current output h_t -> a_t -> c_t -> s_t.