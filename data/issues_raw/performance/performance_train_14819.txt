Keras Dropout support_masking gets reset to False

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS X 10.12.6
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): v1.4.0-rc1-11-g130a514 1.4.0
Python version: 3.6.1
Bazel version (if compiling from source): n/a
GCC/Compiler version (if compiling from source): n/a
CUDA/cuDNN version: n/a
GPU model and memory: n/a
Exact command to reproduce: see below

You can collect some of this information using our environment capture script:
https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh
You can obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
Describe the problem
Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.
The Keras Dropout layer constructor (tensorflow/python/keras/_impl/keras/layers/core.py) sets support_masking=True and then calls its super constructor, which sets it back to False. Other layers defined in that module appear to set support_masking=True after the super constructor call.
Source code / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.
from tensorflow.contrib.keras.api.keras.models import Sequential
from tensorflow.contrib.keras.api.keras.layers import Dropout, InputLayer, LSTM, Masking 

if __name__ == '__main__':

    test1 = True

    def model1():
        model = Sequential()
        model.add(InputLayer([8, 64]))
        model.add(Masking())
        model.add(Dropout(0.5))

    def model2():
        model = Sequential()
        model.add(InputLayer([8, 64]))
        model.add(Masking())
        model.add(LSTM(128, return_sequences=True))
        model.add(Dropout(0.5))

    if test1:
        model1()
    else:
        model2()

Traceback (most recent call last):
  File "expose_dropout_bug.py", line 16, in <module>
    model.add(Dropout(0.5))
  File "/.venv/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/models.py", line 501, in add
    output_tensor = layer(self.outputs[0])
  File "/.venv/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py", line 252, in __call__
    output = super(Layer, self).__call__(inputs, **kwargs)
  File "/.venv/lib/python3.6/site-packages/tensorflow/python/layers/base.py", line 594, in __call__
    output_mask = self.compute_mask(inputs, previous_mask)
  File "/.venv/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py", line 308, in compute_mask
    'but was passed an input_mask: ' + str(mask))
TypeError: Layer dropout_1 does not support masking, but was passed an input_mask: Tensor("masking/Any_1:0", shape=(?, 8), dtype=bool)