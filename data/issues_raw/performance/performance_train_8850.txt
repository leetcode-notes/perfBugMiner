Error in running text_classification_character_rnn.py

I am running the exact example given in the repo for text classification using rnn. I am getting the following error.
TypeError: Tensors in list passed to 'values' of 'ConcatV2' Op have types [int32, float32] that don't all match.
Example: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/learn/text_classification_character_rnn.py
Would you please let me know how can I fix it.
Detail error. 
TypeError                                 Traceback (most recent call last)
<ipython-input-5-90c7a682f760> in <module>()
     23 
     24 # Train and predict
---> 25 classifier.fit(x_train, y_train, steps=100)
     26 y_predicted = [
     27   p['class'] for p in classifier.predict(

/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.pyc in new_func(*args, **kwargs)
    278             _call_location(), decorator_utils.get_qualified_name(func),
    279             func.__module__, arg_name, date, instructions)
--> 280       return func(*args, **kwargs)
    281     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(
    282         func.__doc__, date, instructions)

/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)
    408     _verify_input_args(x, y, input_fn, None, batch_size)
    409     if x is not None:
--> 410       SKCompat(self).fit(x, y, batch_size, steps, max_steps, monitors)
    411       return self
    412 

/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in fit(self, x, y, batch_size, steps, max_steps, monitors)
   1351                         steps=steps,
   1352                         max_steps=max_steps,
-> 1353                         monitors=all_monitors)
   1354     return self
   1355 

/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.pyc in new_func(*args, **kwargs)
    278             _call_location(), decorator_utils.get_qualified_name(func),
    279             func.__module__, arg_name, date, instructions)
--> 280       return func(*args, **kwargs)
    281     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(
    282         func.__doc__, date, instructions)

/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)
    424       hooks.append(basic_session_run_hooks.StopAtStepHook(steps, max_steps))
    425 
--> 426     loss = self._train_model(input_fn=input_fn, hooks=hooks)
    427     logging.info('Loss for final step: %s.', loss)
    428     return self

/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _train_model(self, input_fn, hooks)
    932       features, labels = input_fn()
    933       self._check_inputs(features, labels)
--> 934       model_fn_ops = self._call_legacy_get_train_ops(features, labels)
    935       ops.add_to_collection(ops.GraphKeys.LOSSES, model_fn_ops.loss)
    936       all_hooks.extend([

/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _call_legacy_get_train_ops(self, features, labels)
   1001 
   1002   def _call_legacy_get_train_ops(self, features, labels):
-> 1003     train_ops = self._get_train_ops(features, labels)
   1004     if isinstance(train_ops, model_fn_lib.ModelFnOps):  # Default signature
   1005       return train_ops

/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _get_train_ops(self, features, labels)
   1160       `ModelFnOps` object.
   1161     """
-> 1162     return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)
   1163 
   1164   def _get_eval_ops(self, features, labels, metrics):

/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _call_model_fn(self, features, labels, mode)
   1131     if 'model_dir' in model_fn_args:
   1132       kwargs['model_dir'] = self.model_dir
-> 1133     model_fn_results = self._model_fn(features, labels, **kwargs)
   1134 
   1135     if isinstance(model_fn_results, model_fn_lib.ModelFnOps):

<ipython-input-4-813de742180a> in char_rnn_model(features, target)
      6 
      7     cell = tf.contrib.rnn.GRUCell(HIDDEN_SIZE)
----> 8     _, encoding = tf.contrib.rnn.static_rnn(cell, byte_list, dtype=tf.float32)
      9 
     10     logits = tf.contrib.layers.fully_connected(encoding, 15, activation_fn=None)

/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn.pyc in static_rnn(cell, inputs, initial_state, dtype, sequence_length, scope)
    195             state_size=cell.state_size)
    196       else:
--> 197         (output, state) = call_cell()
    198 
    199       outputs.append(output)

/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn.pyc in <lambda>()
    182       if time > 0: varscope.reuse_variables()
    183       # pylint: disable=cell-var-from-loop
--> 184       call_cell = lambda: cell(input_, state)
    185       # pylint: enable=cell-var-from-loop
    186       if sequence_length is not None:

/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.pyc in __call__(self, inputs, state, scope)
     90         r, u = array_ops.split(
     91             value=_linear(
---> 92                 [inputs, state], 2 * self._num_units, True, 1.0, scope=scope),
     93             num_or_size_splits=2,
     94             axis=1)

/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.pyc in _linear(args, output_size, bias, bias_start, scope)
    749       res = math_ops.matmul(args[0], weights)
    750     else:
--> 751       res = math_ops.matmul(array_ops.concat(args, 1), weights)
    752     if not bias:
    753       return res

/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/array_ops.pyc in concat(values, axis, name)
   1032   return gen_array_ops._concat_v2(values=values,
   1033                                   axis=axis,
-> 1034                                   name=name)
   1035 
   1036 

/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_array_ops.pyc in _concat_v2(values, axis, name)
    517   """
    518   result = _op_def_lib.apply_op("ConcatV2", values=values, axis=axis,
--> 519                                 name=name)
    520   return result
    521 

/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.pyc in apply_op(self, op_type_name, name, **keywords)
    462                                 (prefix, dtype.name))
    463               else:
--> 464                 raise TypeError("%s that don't all match." % prefix)
    465             else:
    466               raise TypeError("%s that are invalid." % prefix)

TypeError: Tensors in list passed to 'values' of 'ConcatV2' Op have types [int32, float32] that don't all match.