Using keras and tf.keras has different result

System information

TensorFlow):
Linux Ubuntu 16.04:
TensorFlow installed from Binary:
TensorFlow version (1.4):
Python version 3.6.3:

Describe the problem
I am using tf.keras and keras but it has a different result. I am using the code below for sentiment analysis classification using imdb dataset.
Source code / logs
model = Sequential()
model.add(Embedding(n_unique_words, n_dim, input_length=max_reviw_length))
model.add(Flatten())
model.add(Dense(n_dense, activation='relu'))
model.add(Dropout(dropout))
model.add(Dense(1, activation='sigmoid'))
model.summary() 

_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
embedding_1 (Embedding)      (None, 100, 64)           320000    
_________________________________________________________________
flatten_1 (Flatten)          (None, 6400)              0         
_________________________________________________________________
dense_1 (Dense)              (None, 64)                409664    
_________________________________________________________________
dropout_1 (Dropout)          (None, 64)                0         
_________________________________________________________________
dense_2 (Dense)              (None, 1)                 65        
=================================================================
Total params: 729,729
Trainable params: 729,729
Non-trainable params: 0
__________________________

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=1, validation_data=(x_valid, y_valid), callbacks=[modelcheckpoint])

preprocessing all exact the same
tf.keras result
Train on 25000 samples, validate on 25000 samples
Epoch 1/4
25000/25000 [==============================] - 9s - loss: 0.7412 - acc: 0.4990 - val_loss: 0.6932 - val_acc: 0.50000.4
Epoch 2/4
25000/25000 [==============================] - 7s - loss: 0.6932 - acc: 0.5005 - val_loss: 0.6931 - val_acc: 0.5000
Epoch 3/4
25000/25000 [==============================] - 7s - loss: 0.6932 - acc: 0.5001 - val_loss: 0.6931 - val_acc: 0.5000
Epoch 4/4
25000/25000 [==============================] - 7s - loss: 0.6932 - acc: 0.4942 - val_loss: 0.6931 - val_acc: 0.5000

<tensorflow.python.keras._impl.keras.callbacks.History at 0x7fad685e7c18>

keras result
Train on 25000 samples, validate on 25000 samples
Epoch 1/4
25000/25000 [==============================] - 9s 344us/step - loss: 0.5607 - acc: 0.6900 - val_loss: 0.3622 - val_acc: 0.8404
Epoch 2/4
25000/25000 [==============================] - 8s 308us/step - loss: 0.2849 - acc: 0.8849 - val_loss: 0.3486 - val_acc: 0.8446
Epoch 3/4
25000/25000 [==============================] - 8s 305us/step - loss: 0.1179 - acc: 0.9642 - val_loss: 0.4183 - val_acc: 0.8339
Epoch 4/4
25000/25000 [==============================] - 8s 307us/step - loss: 0.0252 - acc: 0.9960 - val_loss: 0.5202 - val_acc: 0.8345

<keras.callbacks.History at 0x7f560b85d940>