Segmentation Fault (core dumped) on exit from unit test that imports `tf.contrib.rnn`

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 14.04
TensorFlow installed from (source or binary): Source
TensorFlow version (use command below): 1.0.0
Bazel version (if compiling from source): 0.4.4
CUDA/cuDNN version: 8.0/5110
GPU model and memory: GeForce GTX 980 Ti
Exact command to reproduce: python -m unittest discover -s tests -p "example_test.py"(see below for details)

Describe the problem
I am running Tensorflow code from within the Python unittest module. The individual unit-tests, each of which train a specific architecture, run successfully with an OK. However, I observed that given the above described system configuration, I receive a Segmentation Fault (core dumped) just before the program exits. And this leads to the overall test being marked as FAIL (despite the individual tests passing).
On further investigation, I observed that the segmentation fault can be prevented from occurring by preventing the tensorflow/contrib/rnn/python/ops/_gru_ops.so file from being loaded by the load_op_library function inside tensorflow.contrib.rnn.python.ops.gru_ops
Source code / logs
Say I have a folder my_code that contains a tests folder where my unit-tests are all located. The error can be reproduced by running an example_test.py (given below) within the unittest module using the call python -m unittest discover -s tests -p "example_test.py" from within themy_codedirectory. The filemy_code/tests/example_tests.py` contains the following:
import unittest                               
import tensorflow as tf                       
                                              
class SomeTestClass(unittest.TestCase): 
    """Some docstring."""              
                                              
    def test_something(self):          
        print("Testing something...\n")
        print tf.contrib.rnn.LSTMCell         
        session = tf.Session()                
        session.close()                       

Note that the error occurs only when both session is created and there is a reference to tf.contrib.rnn.