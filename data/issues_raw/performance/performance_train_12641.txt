Improve all-in-memory file copy architecture (Python at least)

Current file copy (at least via Python tf.gfile.Copy (gfile.py→ file_io.py → file_io.i)) involves copying the source contents into memory, and then writing memory to the destination. For scenarios like #12630 which is working with an 11GB asset, this is unacceptable design.
file_system.h's WritableFile is not stubbed to allow anything like a streaming, though its RandomAccessFile is. (not entirely, entirely, true - i suppose WriteableFile.Append(const StringPiece& data) could be employed in a streamable fashion -ish.)
To cull the Python low hanging fruit, at least, please implement file_io.i using a regular streaming design instead of the above described current design.