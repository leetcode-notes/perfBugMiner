[Feature Request] GPU ops for strided_slice/pad on uint8, int8 and bool

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 and Linux Ubuntu 16.04
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.6.0
Python version: 3.6
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: GeForce GTX 1080 Ti
Exact command to reproduce: See below

Introduction
We are trying to move the preprocessing of our tensorflow network to GPU in order to gain performance. Unfortunately it does not allow to run strided_slice or pad on GPU, thus either memcpy from/to GPU/CPU is required or everything must be computed on CPU. Also we wish not to convert these to other datatypes, because the tensors are quite large (thus every operation very memory consuming).
Request
Implement GPU ops for datatypes such as DT_UIN8, DT_INT8, DT_BOOL for strided_slice and pad.
Example
import tensorflow as tf

x = tf.constant(0, dtype=tf.uint8, shape=(1,))
with tf.device('GPU:0'):
    y = x[0]
    # Or for padding:
    #y = tf.pad(x, [[0, 0]])

# This works, because the cpu op is taken as fallback.
#with tf.Session(config=tf.ConfigProto(allow_soft_placement=True)).as_default():
# This doesn't work, because the GPU op doesn't exist.
with tf.Session().as_default():
    print(y.eval())

This example fails with the following error for slicing (as defined in strided_slice_op_gpu.cu.cc also via TF_CALL_GPU_NUMBER_TYPES):
InvalidArgumentError (see above for traceback): Cannot assign a device for operation 'strided_slice': Could not satisfy explicit device specification '/device:GPU:0' because no supported kernel for GPU devices is available.
Registered kernels:
  device='CPU'; T in [DT_INT64]
  device='CPU'; T in [DT_INT32]
  device='CPU'; T in [DT_UINT16]
  device='CPU'; T in [DT_INT16]
  device='CPU'; T in [DT_UINT8]
  device='CPU'; T in [DT_INT8]
  device='CPU'; T in [DT_HALF]
  device='CPU'; T in [DT_BFLOAT16]
  device='CPU'; T in [DT_FLOAT]
  device='CPU'; T in [DT_DOUBLE]
  device='CPU'; T in [DT_COMPLEX64]
  device='CPU'; T in [DT_COMPLEX128]
  device='CPU'; T in [DT_BOOL]
  device='CPU'; T in [DT_STRING]
  device='CPU'; T in [DT_RESOURCE]
  device='CPU'; T in [DT_VARIANT]
  device='GPU'; T in [DT_HALF]
  device='GPU'; T in [DT_FLOAT]
  device='GPU'; T in [DT_DOUBLE]
  device='GPU'; T in [DT_COMPLEX64]
  device='GPU'; T in [DT_COMPLEX128]
  device='GPU'; T in [DT_INT64]
  device='GPU'; T in [DT_INT32]

	 [[Node: strided_slice = StridedSlice[Index=DT_INT32, T=DT_UINT8, begin_mask=0, ellipsis_mask=0, end_mask=0, new_axis_mask=0, shrink_axis_mask=1, _device="/device:GPU:0"](Const, strided_slice/stack, strided_slice/stack_1, strided_slice/stack_2)]]

For padding (as defined in pad_op_gpu.cu.cc via TF_CALL_GPU_NUMBER_TYPES):
InvalidArgumentError (see above for traceback): Cannot assign a device for operation 'Pad': Could not satisfy explicit device specification '/device:GPU:0' because no supported kernel for GPU devices is available.
Registered kernels:
  device='CPU'; T in [DT_INT64]; Tpaddings in [DT_INT32]
  device='CPU'; T in [DT_INT64]; Tpaddings in [DT_INT64]
  device='CPU'; T in [DT_INT32]; Tpaddings in [DT_INT32]
  device='CPU'; T in [DT_INT32]; Tpaddings in [DT_INT64]
  device='CPU'; T in [DT_UINT16]; Tpaddings in [DT_INT32]
  device='CPU'; T in [DT_UINT16]; Tpaddings in [DT_INT64]
  device='CPU'; T in [DT_INT16]; Tpaddings in [DT_INT32]
  device='CPU'; T in [DT_INT16]; Tpaddings in [DT_INT64]
  device='CPU'; T in [DT_UINT8]; Tpaddings in [DT_INT32]
  device='CPU'; T in [DT_UINT8]; Tpaddings in [DT_INT64]
  device='CPU'; T in [DT_INT8]; Tpaddings in [DT_INT32]
  device='CPU'; T in [DT_INT8]; Tpaddings in [DT_INT64]
  device='CPU'; T in [DT_HALF]; Tpaddings in [DT_INT32]
  device='CPU'; T in [DT_HALF]; Tpaddings in [DT_INT64]
  device='CPU'; T in [DT_BFLOAT16]; Tpaddings in [DT_INT32]
  device='CPU'; T in [DT_BFLOAT16]; Tpaddings in [DT_INT64]
  device='CPU'; T in [DT_FLOAT]; Tpaddings in [DT_INT32]
  device='CPU'; T in [DT_FLOAT]; Tpaddings in [DT_INT64]
  device='CPU'; T in [DT_DOUBLE]; Tpaddings in [DT_INT32]
  device='CPU'; T in [DT_DOUBLE]; Tpaddings in [DT_INT64]
  device='CPU'; T in [DT_COMPLEX64]; Tpaddings in [DT_INT32]
  device='CPU'; T in [DT_COMPLEX64]; Tpaddings in [DT_INT64]
  device='CPU'; T in [DT_COMPLEX128]; Tpaddings in [DT_INT32]
  device='CPU'; T in [DT_COMPLEX128]; Tpaddings in [DT_INT64]
  device='CPU'; T in [DT_BOOL]; Tpaddings in [DT_INT32]
  device='CPU'; T in [DT_BOOL]; Tpaddings in [DT_INT64]
  device='GPU'; T in [DT_HALF]; Tpaddings in [DT_INT32]
  device='GPU'; T in [DT_HALF]; Tpaddings in [DT_INT64]
  device='GPU'; T in [DT_FLOAT]; Tpaddings in [DT_INT32]
  device='GPU'; T in [DT_FLOAT]; Tpaddings in [DT_INT64]
  device='GPU'; T in [DT_DOUBLE]; Tpaddings in [DT_INT32]
  device='GPU'; T in [DT_DOUBLE]; Tpaddings in [DT_INT64]
  device='GPU'; T in [DT_INT32]; Tpaddings in [DT_INT32]
  device='GPU'; T in [DT_INT32]; Tpaddings in [DT_INT64]

	 [[Node: Pad = Pad[T=DT_UINT8, Tpaddings=DT_INT32, _device="/device:GPU:0"](Const, Pad/paddings)]]