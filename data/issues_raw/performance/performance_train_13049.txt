Optimize batch matrix transposition for narrow matrices.

This is an improved version of matrix transposition that specializes in the case when the matrices to be transposed are narrow. This is a preliminary implementation and I hope to get some feedback before further optimizing this implementation as it would likely entail great deal of efforts and patience.

This implementation modifies the general matrix transposition kernel in a minimal way. Essentially this implementation enables the rectangular tile shapes to be used for transposition. Before, only square tiles are allowed.
This implementation has a couple of specialized tile sizes and a very simple cost function is used to select among them during runtime. The logic behind this cost function is simple and will likely to be effective on a variety of platforms.
We tested this implementation on problem sizes of {32, 64, 128, 256, 512, 1024} X range(16, 2048, 32) X range(2, 16) as well as {32, 64, 128, 256, 512, 1024} X range(2, 16)  X range(16, 2048, 32) where these problem size dimensions can be interpreted as batch_size, matrix_height, matrix_width correspondingly.  The average speedup is 16.7%. This experiment includes 10752 data points and is plotted using excel to indicate for what sub-space of all problem size space do we see speedups over baseline/existing implementation. See picture. In the picture, problem sizes where we do see speedups are colored red and otherwise white. The three dimensional problem size space is collapsed to two by serializing the batch size dimension and matrix height dimension.
As you can see from the current performance results, existing implementation is very good at dealing with large batches of tiny matrices. This is due to the fact that the baseline implementation uses a brute force (and nonetheless effective) way of dividing up workloads evenly which outperforms this commits. I may consider modify the cost function to use the baseline in these cases in the future.
Again, this is only a preliminary implementation, I'm happy to make significant changes.