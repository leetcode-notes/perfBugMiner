Importing TensorFlow breaks numpy.linalg.matrix_power()

#10771
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux
TensorFlow installed from (source or binary): Source
TensorFlow version (use command below): 1.2.1
Python version: 3.6.1
Bazel version (if compiling from source): bazel release 0.5.1
CUDA/cuDNN version: CUDA V8.0.61 /
GPU model and memory: NVIDIA Titan X Fall 2016
Exact command to reproduce:

import numpy as np
import tensorflow as tf
np.random.seed(seed=0)
X = np.random.randn(2000, 2000)
Y = np.linalg.matrix_power(X, 30)
Describe the problem
This seems to be a bug where importing tensorflow breaks numpy.linalg.matrix_power()
The two following code snippets are producing different results on my system when entered directly into the python interpreter. Note, I am restarting the python kernel between running each block.
This works:
import numpy as np
np.random.seed(seed=0)
X = np.random.randn(2000, 2000)
Y = np.linalg.matrix_power(X, 30)
>>> X 
array([[ 1.76405235,  0.40015721,  0.97873798, ...,  0.15843385,
        -1.14190142, -1.31097037],
       [-1.53292105, -1.71197016,  0.04613506, ..., -0.03057244,
         1.57708821, -0.8128021 ],
       [ 0.61334917,  1.84369998,  0.27109098, ..., -0.53788475,
         0.39344443,  0.28651827],
       ..., 
       [-0.17117027,  0.57332063, -0.89516715, ..., -0.01409412,
         1.28756456, -0.6953778 ],
       [-1.53627571,  0.57441228, -0.20564476, ...,  0.90499929,
         0.51428298,  0.72148202],
       [ 0.51262101, -0.90758583,  1.78121159, ..., -1.12554283,
         0.95170926, -1.15237806]])
>>> Y
array([[ -1.04752205e+48,   2.10841282e+47,  -4.54826843e+47, ...,
         -7.84526353e+46,  -4.45185369e+47,  -1.96340973e+47],
       [ -5.40802471e+46,   1.12546832e+48,  -1.88764494e+47, ...,
         -3.72182046e+47,   7.97461852e+47,  -5.04546546e+46],
       [ -3.59835691e+47,  -6.90559050e+46,  -8.78538707e+47, ...,
          7.67940928e+47,   2.10052546e+47,   1.75193723e+47],
       ...,
       [  2.20970288e+46,   3.60679821e+47,   5.76631889e+47, ...,
          1.21938369e+48,  -8.61048462e+47,  -3.93610572e+47],
       [ -1.19116636e+48,   2.47318954e+48,   2.65693291e+46, ...,
          9.18513286e+47,   3.91490216e+47,  -7.08113716e+47],
       [ -2.25527724e+47,  -4.94088618e+46,  -2.69359430e+47, ...,
         -4.07174632e+47,   7.38250907e+47,   5.86758288e+46]])
This produces the wrong result:
import numpy as np
import tensorflow as tf
np.random.seed(seed=0)
X = np.random.randn(2000, 2000)
Y = np.linalg.matrix_power(X, 30)
>>> X
array([[ 1.76405235,  0.40015721,  0.97873798, ...,  0.15843385,
        -1.14190142, -1.31097037],
       [-1.53292105, -1.71197016,  0.04613506, ..., -0.03057244,
         1.57708821, -0.8128021 ],
       [ 0.61334917,  1.84369998,  0.27109098, ..., -0.53788475,
         0.39344443,  0.28651827],
       ..., 
       [-0.17117027,  0.57332063, -0.89516715, ..., -0.01409412,
         1.28756456, -0.6953778 ],
       [-1.53627571,  0.57441228, -0.20564476, ...,  0.90499929,
         0.51428298,  0.72148202],
       [ 0.51262101, -0.90758583,  1.78121159, ..., -1.12554283,
         0.95170926, -1.15237806]])
>>> Y
array([[ -3.40382764e+91,   2.85027458e+91,   1.14039870e+91, ...,
          3.32682992e+91,   6.00166234e+91,   2.33233825e+91],
       [  3.86088264e+91,   1.15500453e+92,   2.83821815e+91, ...,
         -6.16959058e+91,  -1.91501705e+91,  -4.67672849e+91],
       [  5.05026067e+91,   7.72796711e+91,  -4.70112473e+91, ...,
          8.41553063e+90,  -2.66176140e+91,   8.50899233e+90],
       ...,
       [ -2.08592878e+91,   2.28435173e+91,   9.15188619e+90, ...,
         -1.25550051e+91,   1.85247259e+91,  -8.73231986e+90],
       [ -4.73923534e+91,   1.61385540e+92,   1.26364668e+92, ...,
          2.83667716e+91,   5.06236372e+90,  -5.18395025e+91],
       [ -1.52984791e+91,  -5.57421948e+90,   3.27657918e+91, ...,
         -7.08972359e+91,  -1.58912068e+91,  -1.22216698e+91]])
The values for X are exactly the same. Interestingly, if you run the first code block, then import tensorflow without restarting the kernel and recompute the matrix power, the correct result is returned.
I haven't been able to find a reference to this anywhere online, and it's a big problem not being able to use tensorflow and numpy in the same script.