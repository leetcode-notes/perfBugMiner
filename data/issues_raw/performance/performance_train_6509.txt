Issue with tf.one_hot() in 0.12.0 in GPU mode (CUDA_ERROR_ILLEGAL_ADDRESS)

I'm using a LeNet-5 mnist example from Udacity's course. Link to the source code is below.
Training works ok on a CPU (config = tf.ConfigProto(device_count = {'GPU': 0})),
but fails in a GPU mode with the following 'CUDA_ERROR_ILLEGAL_ADDRESS' error:

I c:\tf_jenkins\home\workspace\release-win\device\gpu\os\windows\tensorflow\core\common_runtime\gpu\gpu_device.cc:885] Found device 0 with properties:
name: GeForce GTX 1060 6GB
major: 6 minor: 1 memoryClockRate (GHz) 1.7845
pciBusID 0000:01:00.0
Total memory: 6.00GiB
Free memory: 5.01GiB
I c:\tf_jenkins\home\workspace\release-win\device\gpu\os\windows\tensorflow\core\common_runtime\gpu\gpu_device.cc:906] DMA: 0
I c:\tf_jenkins\home\workspace\release-win\device\gpu\os\windows\tensorflow\core\common_runtime\gpu\gpu_device.cc:916] 0:   Y
I c:\tf_jenkins\home\workspace\release-win\device\gpu\os\windows\tensorflow\core\common_runtime\gpu\gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1060 6GB, pci bus id: 0000:01:00.0)
Training...
E c:\tf_jenkins\home\workspace\release-win\device\gpu\os\windows\tensorflow\stream_executor\cuda\cuda_event.cc:49] Error polling for event status: failed to query event: CUDA_ERROR_ILLEGAL_ADDRESS
F c:\tf_jenkins\home\workspace\release-win\device\gpu\os\windows\tensorflow\core\common_runtime\gpu\gpu_event_mgr.cc:198] Unexpected Event status: 1

I have reproduced same error on two setups.
Environment 1 (Home PC):

windows 10;
latest anaconda 4.2.0, python 3.5;
cuda 8
cudnn 5.1 (for win10)
tensorflow 0.12.0 gpu (https://storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-0.12.0-cp35-cp35m-win_amd64.whl)
GeForce GTX 1060 6Gb

Environment 2 (Work PC):

windows 7;
latest anaconda 4.2.0, python 3.5;
cuda 8
cudnn 5.1 (for win7)
tensorflow 0.12.0 gpu (https://storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-0.12.0-cp35-cp35m-win_amd64.whl)
GeForce GTX 660 3Gb

I'm sharing two scripts with minor changes that allow a workaround:
https://drive.google.com/open?id=0B6jkkqMOGy5cNHh3TVpxU283Ykk
Main difference:
Script from example that crashes (LabLenetBad.py) uses raw mnist label data with the tf.one_hot() call.
The workaround (LabLenetGood.py) reads mnist data with (one_hot=True) flag and does not use tf.one_hot() call on the Y placeholder.
I think that tf.one_hot does not work properly on the gpu.