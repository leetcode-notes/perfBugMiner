tf.nn.elu: incorrect second derivative

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 14.04
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.2.0
Bazel version (if compiling from source): N/A
CUDA/cuDNN version: CUDA 8.0 / cuDNN 6.0
GPU model and memory: GTX 1080 Ti 11GB
Exact command to reproduce: see below

tf.nn.elu gives incorrect second derivatives:
Consider the graph y = 2 * elu(-x).
x = tf.placeholder(tf.float32, ())
y = 2 * tf.nn.elu(-x)
We'll be evaluating at x=1:
x_ = 1
We can evaluate first derivatives with automatic differentiation:
dy, = tf.gradients(y, x)
dy.eval({x: x_})
=> -0.7357589
This lines up with the analytic answer: y' = -2e^(-x)
However, for the second derivative:
ddy, = tf.gradients(dy, x)
ddy.eval({x: x_})
=> 0.36787945
Whoops, this doesn't look right! Analytically, the derivative is y'' = 2e^(-x). Evaluated at x=1, this is 0.7357588!
Workaround
Just in case anyone else needs to work around this until it's fixed:
def elu(x):
    return tf.where(x >= 0.0, x, tf.exp(x) - 1)
Looks like second derivatives work with that.