Convolution_transpose layer now gives an error (Tensorflow 1.0.0).

I am implementing an architecture with conv and conv_transpose layers and this is what I am giving the convolution transpose layer:
    ('convolution_transpose', dict(num_outputs=96, kernel_size=[41, 11],
                                     stride=[2, 1], padding="SAME", scope='dec_block_1'))

and this is what I get
/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)
    175       current_args = current_scope[key_func].copy()
    176       current_args.update(kwargs)
--> 177     return func(*args, **current_args)
    178   _add_op(func)
    179   setattr(func_with_args, '_key_op', _key_op(func))

/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py in convolution2d_transpose(inputs, num_outputs, kernel_size, stride, padding, data_format, activation_fn, normalizer_fn, normalizer_params, weights_initializer, weights_regularizer, biases_initializer, biases_regularizer, reuse, variables_collections, outputs_collections, trainable, scope)
   1123         _scope=sc,
   1124         _reuse=reuse)
-> 1125     outputs = layer.apply(inputs)
   1126 
   1127     # Add variables to collections.

/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in apply(self, inputs, **kwargs)
    301       Output tensor(s).
    302     """
--> 303     return self.__call__(inputs, **kwargs)
    304 
    305 

/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in __call__(self, inputs, **kwargs)
    267           input_shapes = [x.get_shape() for x in input_list]
    268           if len(input_shapes) == 1:
--> 269             self.build(input_shapes[0])
    270           else:
    271             self.build(input_shapes)

/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/convolutional.py in build(self, input_shape)
   1048                                   regularizer=self.bias_regularizer,
   1049                                   trainable=True,
-> 1050                                   dtype=self.dtype)
   1051     else:
   1052       self.bias = None

/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in get_variable(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, validate_shape, custom_getter)
    986       collections=collections, caching_device=caching_device,
    987       partitioner=partitioner, validate_shape=validate_shape,
--> 988       custom_getter=custom_getter)
    989 get_variable_or_local_docstring = (
    990     """%s

/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in get_variable(self, var_store, name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, validate_shape, custom_getter)
    888           collections=collections, caching_device=caching_device,
    889           partitioner=partitioner, validate_shape=validate_shape,
--> 890           custom_getter=custom_getter)
    891 
    892   def _get_partitioned_variable(self,

/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in get_variable(self, name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape, custom_getter)
    339           reuse=reuse, trainable=trainable, collections=collections,
    340           caching_device=caching_device, partitioner=partitioner,
--> 341           validate_shape=validate_shape)
    342     else:
    343       return _true_getter(

/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in variable_getter(getter, name, shape, dtype, initializer, regularizer, trainable, **kwargs)
    256           name, shape, initializer=initializer, regularizer=regularizer,
    257           dtype=dtype, trainable=trainable,
--> 258           variable_getter=functools.partial(getter, **kwargs))
    259 
    260     # Build (if necessary) and call the layer, inside a variable scope.

/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in _add_variable(self, name, shape, dtype, initializer, regularizer, trainable, variable_getter)
    206                                initializer=initializer,
    207                                dtype=dtype,
--> 208                                trainable=trainable and self.trainable)
    209     # TODO(sguada) fix name = variable.op.name
    210     if variable in existing_variables:

/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py in layer_variable_getter(getter, *args, **kwargs)
   1308       getter = functools.partial(current_custom_getter, getter)
   1309     kwargs['rename'] = rename
-> 1310     return _model_variable_getter(getter, *args, **kwargs)
   1311   return layer_variable_getter
   1312 

/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py in _model_variable_getter(getter, name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, rename, **_)
   1297       regularizer=regularizer, collections=collections, trainable=trainable,
   1298       caching_device=caching_device, partitioner=partitioner,
-> 1299       custom_getter=getter)
   1300 
   1301 

/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)
    175       current_args = current_scope[key_func].copy()
    176       current_args.update(kwargs)
--> 177     return func(*args, **current_args)
    178   _add_op(func)
    179   setattr(func_with_args, '_key_op', _key_op(func))

/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/variables.py in model_variable(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, device, partitioner, custom_getter)
    266                  trainable=trainable, collections=collections,
    267                  caching_device=caching_device, device=device,
--> 268                  partitioner=partitioner, custom_getter=custom_getter)
    269   return var
    270 

/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)
    175       current_args = current_scope[key_func].copy()
    176       current_args.update(kwargs)
--> 177     return func(*args, **current_args)
    178   _add_op(func)
    179   setattr(func_with_args, '_key_op', _key_op(func))

/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/variables.py in variable(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, device, partitioner, custom_getter)
    223                   collections=collections,
    224                   caching_device=caching_device,
--> 225                   partitioner=partitioner)
    226 
    227 

/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in _true_getter(name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape)
    331           initializer=initializer, regularizer=regularizer, reuse=reuse,
    332           trainable=trainable, collections=collections,
--> 333           caching_device=caching_device, validate_shape=validate_shape)
    334 
    335     if custom_getter is not None:

/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in _get_single_variable(self, name, shape, dtype, initializer, regularizer, partition_info, reuse, trainable, collections, caching_device, validate_shape)
    682         caching_device=caching_device,
    683         dtype=variable_dtype,
--> 684         validate_shape=validate_shape)
    685     self._vars[name] = v
    686     logging.vlog(1, "Created variable %s with shape %s and init %s", v.name,

/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variables.py in __init__(self, initial_value, trainable, collections, validate_shape, caching_device, name, variable_def, dtype, expected_shape, import_scope)
    224           name=name,
    225           dtype=dtype,
--> 226           expected_shape=expected_shape)
    227 
    228   def __str__(self):

/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variables.py in _init_from_args(self, initial_value, trainable, collections, validate_shape, caching_device, name, dtype, expected_shape)
    301             with ops.name_scope("Initializer"),  ops.device(None):
    302               self._initial_value = ops.convert_to_tensor(
--> 303                   initial_value(), name="initial_value", dtype=dtype)
    304               shape = (self._initial_value.get_shape()
    305                        if validate_shape else tensor_shape.unknown_shape())

/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in <lambda>()
    671       else:
    672         init_val = lambda: initializer(
--> 673             shape.as_list(), dtype=dtype, partition_info=partition_info)
    674         variable_dtype = dtype.base_dtype
    675 

TypeError: __init__() got multiple values for argument 'dtype'


The same code worked on Tensorflow 0.12.