tensorflow.contrib.keras.python.keras.models throwing errors for a valid keras code

System information
== cat /etc/issue ===============================================
Linux parikshit-XPS-L322X 4.4.0-79-generic #100-Ubuntu SMP Wed May 17 19:58:14 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
VERSION="16.04.2 LTS (Xenial Xerus)"
VERSION_ID="16.04"
VERSION_CODENAME=xenial
== are we in docker =============================================
No
== compiler =====================================================
c++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
== uname -a =====================================================
Linux parikshit-XPS-L322X 4.4.0-79-generic #100-Ubuntu SMP Wed May 17 19:58:14 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
== check pips ===================================================
numpy (1.13.0)
protobuf (3.3.0)
tensorflow (1.2.0rc1)
== check for virtualenv =========================================
False
== tensorflow import ============================================
tf.VERSION = 1.2.0-rc1
tf.GIT_VERSION = v1.2.0-rc0-24-g94484aa
tf.COMPILER_VERSION = v1.2.0-rc0-24-g94484aa
Sanity check: array([1], dtype=int32)
== env ==========================================================
LD_LIBRARY_PATH is unset
DYLD_LIBRARY_PATH is unset
== nvidia-smi ===================================================
./tf_env_collect.sh: line 105: nvidia-smi: command not found
== cuda libs  ===================================================
Keras version 2.0.5 with Tensorflow backend
Using PyCharm Community edition 2017.1.3 as editor
Describe the problem
I was trying to implement a toy example for One Shot Siamese paper (Gregory Koch etc.) using Keras and found difference in behaviour (errors) between tensorflow.contrib.keras.python.keras.models (i.e using Tensorflow's contrib library for Keras) and keras.models (i.e Keras library with tensorflow backend). Here we have to train two separate CNNs with tied weights and tensorflow contrib library for keras is throwing errors for valid Keras code. Please refer to the code below for difference in behaviour / error
Source code (using tensorflow contrib lib for keras)
from __future__ import absolute_import, print_function, division
from tensorflow.contrib.keras.python.keras.layers import LSTM, Input, Conv2D, Lambda, merge, Dense, Flatten,MaxPooling2D
from tensorflow.contrib.keras.python.keras.models import Model, Sequential
from tensorflow.contrib.keras.python.keras.regularizers import l2
from tensorflow.contrib.keras.python.keras import backend as K
from tensorflow.contrib.keras.python.keras.optimizers import SGD
from tensorflow.contrib.keras.python.keras.initializers import RandomNormal

input_shape = (105, 105, 1)
left_input = Input(input_shape)
right_input = Input(input_shape)

w_init = RandomNormal(mean=0, stddev=1e-2)
b_init = RandomNormal(mean=0.5, stddev=1e-2)

convnet = Sequential()
convnet.add(Conv2D(64, (10, 10), activation='relu', input_shape=input_shape,
                   kernel_initializer=w_init, kernel_regularizer=l2(2e-4)))
convnet.add(MaxPooling2D())
convnet.add(Conv2D(128, (7, 7), activation='relu',
                   kernel_regularizer=l2(2e-4), kernel_initializer=w_init,
                   bias_initializer=b_init))
convnet.add(MaxPooling2D())
convnet.add(Conv2D(128, (4, 4), activation='relu', kernel_initializer=w_init,
                   kernel_regularizer=l2(2e-4), bias_initializer=b_init))
convnet.add(MaxPooling2D())
convnet.add(Conv2D(256, (4, 4), activation='relu', kernel_initializer=w_init,
                   kernel_regularizer=l2(2e-4), bias_initializer=b_init))
convnet.add(Flatten())
convnet.add(Dense(4096, activation="sigmoid", kernel_regularizer=l2(1e-3),
                  kernel_initializer=w_init, bias_initializer=b_init))

l_side = convnet(left_input)
r_side = convnet(right_input)
Output/Error (tensorflow contrib lib for keras)
Traceback (most recent call last):
  File "/home/parikshit/PycharmProjects/Toy_example/one_shot.py", line 53, in <module>
    l_side = convnet(left_input)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/engine/topology.py", line 432, in __call__
    output = super(Layer, self).__call__(inputs, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py", line 439, in __call__
    outputs = self.call(inputs, *args, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/models.py", line 560, in call
    return self.model.call(inputs, mask)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/engine/topology.py", line 1743, in call
    output_tensors, _, _ = self.run_internal_graph(inputs, masks)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/engine/topology.py", line 1957, in run_internal_graph
    self.add_loss(layer.get_losses_for(None), None)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py", line 254, in add_loss
    self._losses += losses
AttributeError: 'Model' object has no attribute '_losses'

Source code (using Keras library with tensorflow backend)
from __future__ import absolute_import, print_function, division
from keras.layers import LSTM, Input, Conv2D, Lambda, merge, Dense, Flatten,MaxPooling2D
from keras.models import Model, Sequential
from keras.regularizers import l2
from keras import backend as K
from keras.optimizers import SGD
from keras.initializers import RandomNormal

input_shape = (105, 105, 1)
left_input = Input(input_shape)
right_input = Input(input_shape)

w_init = RandomNormal(mean=0, stddev=1e-2)
b_init = RandomNormal(mean=0.5, stddev=1e-2)

convnet = Sequential()
convnet.add(Conv2D(64, (10, 10), activation='relu', input_shape=input_shape,
                   kernel_initializer=w_init, kernel_regularizer=l2(2e-4)))
convnet.add(MaxPooling2D())
convnet.add(Conv2D(128, (7, 7), activation='relu',
                   kernel_regularizer=l2(2e-4), kernel_initializer=w_init,
                   bias_initializer=b_init))
convnet.add(MaxPooling2D())
convnet.add(Conv2D(128, (4, 4), activation='relu', kernel_initializer=w_init,
                   kernel_regularizer=l2(2e-4), bias_initializer=b_init))
convnet.add(MaxPooling2D())
convnet.add(Conv2D(256, (4, 4), activation='relu', kernel_initializer=w_init,
                   kernel_regularizer=l2(2e-4), bias_initializer=b_init))
convnet.add(Flatten())
convnet.add(Dense(4096, activation="sigmoid", kernel_regularizer=l2(1e-3),
                  kernel_initializer=w_init, bias_initializer=b_init))

l_side = convnet(left_input)
r_side = convnet(right_input)
Output/Error (Keras library with tensorflow backend)
Using TensorFlow backend.

Process finished with exit code 0