gradient of tf.floor

import numpy as np
import tensorflow as tf
f = np.array([3.8], dtype='float32')
vif = tf.placeholder(tf.float32, shape=[1])

#out = vif + tf.cast(tf.cast(vif, tf.int32), tf.float32)
out = vif + tf.floor(vif)
grad = tf.gradients(tf.reduce_sum(out), vif)

sess = tf.Session()
sess.run(tf.initialize_all_variables())
print sess.run(grad, feed_dict={vif: f})  # print 2

import theano
import theano.tensor as T
vif = T.fvector()
out = vif + T.floor(vif)
grad = T.grad(out.sum(), vif)
func = theano.function([vif], grad)
print func(f) # print 1
It looks like the gradient of tf.floor(x) w.r.t x is 1. But I'm expecting it to be 0, as in theano.
Right now I could use a double casting as a work around, but why is it different?