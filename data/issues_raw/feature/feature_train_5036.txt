Feature request: Inception v3 MetaGraph

Would it be possible for the TensorFlow developers to put a tar-ball online with the Inception v3 saved as a MetaGraph? I can't find it anywhere.
I'm currently using the following tar-ball with a frozen graph for Inception v3:
http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz
The problem is that I cannot continue training that graph because it is frozen, so all the variables have been converted to constants before it was saved. I can't find a way to convert the constants back to variables so I don't think that is possible. (There are also some deprecation warnings regarding BatchNormWithGlobalNormalization so it will presumably stop working at some point in the future).
After searching for a solution for days, I found that you have released a newer checkpoint-file for Inception v3:
http://download.tensorflow.org/models/image/imagenet/inception-v3-2016-03-01.tar.gz
I downloaded it but it's only the checkpoint-file, not the graph-definition. So in my Python code I would apparently have to create the Inception graph using this function first:
https://github.com/tensorflow/models/blob/master/inception/inception/slim/inception_model.py#L52
But this apparently requires building TensorFlow from source, as far as I could understand from the README. There's also several options for using the function and it apparently has to be wrapped in arg_scopes and what-not:
https://github.com/tensorflow/models/blob/master/inception/inception/inception_model.py#L76-87
Would it be possible to update the above tar-ball (dated 2016-03-01) so it also contains the MetaGraph-files, so I can load it more easily and use it in my own Python program? I have another data-set so I replace the softmax-layer of the Inception-graph, and I also want to continue optimizing the rest of the variables of the Inception-graph.
Please also consider including a small example program in the tar-ball (or a link to some python-code), as it would make it a lot easier for everyone who wants to use it. Or at least make a list of all the relevant tensor-names (input, output, etc.)
Thanks!