Feature request: size of memory vectors in LSTM

Motivation
There are two different memory vectors used in LSTM cell: internal state vector (c symbol in tensorflow convention) and output vector (h in tensorflow convention). Let’s consider the possible sizes of both vectors:


c (internal state vector) – has to be the same size for both input and output of a single cell (equation 5 below)


h (output vector) – doesn’t have to be the same (1-4), to be more specific: input size could be arbitrary, but the output size has to be the same as c (6)



The equations are copied from a great paper of Lipton, Berkowitz and Elkan and again the notation is different: s=c).
Why setting different input and output size of h vector is it useful? If ‘because we can’ doesn’t satisfy you I can cite OrderMatters paper (their notation is a bit different h=q).
Current implementation
Currently, in different LSTM cells constructors, there is only one parameter responsible for setting the size of both c and h vectors and it’s called num_units. IMO it’s not the best name for this param, but that’s not my point here – there is no way to set different input and output size of h vector.
Proposal
We could leave the num_units param for backward compatibility with an integer value and the current behavior. On the other hand, if a user pass a tuple of length 2, we could interpret the param as : (input_size of h, output_size of h). Those two numbers are sufficient for describing both c and h sizes.
Implementation
I have already implemented proposed modification for LSTMCell class and it works fine. I could implement the proposed feature for all LSTM-like cells and create PR, but first wanted to ask the community and tensorflowers if it useful form your perspective?
System information

Have I written custom code: N/A
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): N/A
TensorFlow installed from (source or binary): N/A
TensorFlow version (use command below): N/A
Python version: N/A
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: N/A