Graph "Training/Test" flag & global_flags

I am not sure if this has been proposed yet, but I would like the ability in the .RUN() op to flag "test" rather than "train".  The motivation is around "Dropout".  When I am training a batch I would like the dropout in my graph, but when I am running a "test" I would like the Dropout to simply pass the tensor (0% dropout if you will).  I am sure I can pass the "dropout" as a param through the feeder but they need to be set and reset each time and could get cumbersome for larger and complex graphs.  It would be nice to have an internal feature in "Dropout" and other Training specific features such that they will adjust their behavior if "Not-Training".
Right now I have a graph that has 2 paths, one for training with the Dropouts Ops in-line and one that does note and I call the proper 'Output' based upon my Test/Training desire.  This complicated the graph.
Maybe this function can be extended to pass "Flags" into the graph so other features can be added that are based upon run-time demand.  This "flag_dict" could be global to the entire graph so Ops' could check their status upon a run.
sess.run([cost,optimizer,merged], feed_dict={X: Xbatch, Y: YDesired}, flag_dict={Training: True})
I can think of another request where this would be useful.  As I search solution space, I would like to setup a Genetic Algorithm to assist.  One of the things I would like to change in each graph iteration might be the "activation", "Cost" and/or "optimizer" functions.  So a generic Activation Op or Optimizer op could be written (are maybe a simple "Case" Op based upon the flag)?
eg. flag_dict={Training: True, Activation: Relu, Optimizer: AdagradOptimizer}
Not sure how to deal with the parameters if they differ from Op to Op.  But maybe "custom global flags" could be passed as well.
eg.  layer2out = tf.nn.genericActivation(layer1out,ActivationFlag=Activation) #Activation=Relu from above
Just a thought to help explore during training/testing.