Feature Request: Setting the shape of a tf.data.Dataset if it cannot be inferred

Hello, I have really liked the new tf.data.Dataset api, and had a feature request.
I need to often make data transformations that require third-party libraries, and use Dataset.map along with a tf.py_func command as shown in the Importing Data tutorial. In the process of doing this, Tensorflow is not able to infer the shape of the numpy arrays that are returned by the py_func-based functions, and so the output_shapes attribute of the dataset returns something like (TensorShape(None), TensorShape(None), TensorShape(None), TensorShape(None), TensorShape(None))
To address this, I have been adding a new map function after that calls set_shape on each tensor to enforce the shape requirement. For example, I have code that looks something like this:
dataset = dataset.map(lambda strings, labels: tuple(tf.py_func(_featurize, [strs, labels], [tf.int32, tf.float64, tf.int32, tf.int32, labels.dtype])))
dataset = dataset.map(_set_shapes)

where
def _set_shapes(af, pf, split, atp, labels):
    af.set_shape([None, 75])
    pf.set_shape([None, 14])
    split.set_shape([None, ])
    atp.set_shape([None, 2])
    labels.set_shape([None, ])
    return af, pf, split, atp, labels

Could this be simplified by adding a new tf.data.Dataset member function called "set_dataset_shape" which essentially just implements the above _set_shapes method?
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04
TensorFlow installed from (source or binary): AWS Deep Learning AMI
TensorFlow version (use command below): 1.4
Python version: 3.6
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: AWS Deep Learning AMI-based
GPU model and memory: NVIDIA K80
Exact command to reproduce: N/A