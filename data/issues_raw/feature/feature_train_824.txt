Feature parity of tf.diag with np.diag

np.diag can

take 2d array and produce 1d vector of diagonal entries
take 1d array and produce diagonal 2d array (inverse of case 1)

tf.diag only supports 2) and the behavior for case 1) is undocumented
Currently to do 1) you need to do something like this:
def identity_matrix(n):
  """Returns nxn identity matrix."""
  # note, if n is a constant node,Â this assert node won't be executed,
  # this error will be caught during shape analysis 
  assert_op = tf.Assert(tf.greater(n, 0), ["Matrix size must be positive"])
  with tf.control_dependencies([assert_op]):
    ones = tf.fill(n, 1)
    diag = tf.diag(ones)
  return diag

def extract_diagonal(tensor):
  """Extract diagonal of a square matrix."""

  shape = tf.shape(tensor)
  n = shape[0]
  assert_op = tf.Assert(tf.equal(shape[0], shape[1]), ["Can't get diagonal of "
                                                       "a non-square matrix"])

  with tf.control_dependencies([assert_op]):
  return tf.reduce_sum(tf.mul(tensor, identity_matrix(n)), [0])