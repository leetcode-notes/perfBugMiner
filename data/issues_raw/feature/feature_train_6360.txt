Locking mechanisms

Especially when integrating TensorFlow into an exiting multi-threaded application, it's not always easy to use queues for synchronization. Currently, we must use Python locks to lock the sess.run(...) calls from different threads. Exposing a TensorFlow lock interface could allow to synchronize access only to needed values of the session:
x = tf.placeholder(tf.float32, [None, 784])
y = tf.placeholder(tf.float32, [None, 10])
W = tf.Variable(tf.zeros([784, 10]))
b = tf.Variable(tf.zeros([10]))

lock = tf.Lock()
with lock:
  pred = tf.nn.softmax(tf.matmul(x, W) + b)
loss = -tf.reduce_mean(tf.reduce_sum(y * tf.log(pred), 1))
with lock:
  train_step = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

def inference_thread():
  while True:
    # Generate data...
    sess.run(pred, data)

def training_thread():
  while True:
    # Generate data...
    sess.run(train_step, data)
Or simpler:
with tf.Lock():
  W = tf.Variable(tf.zeros([784, 10]))
# ...