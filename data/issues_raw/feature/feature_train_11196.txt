[Feature Request] Distributed Tensorflow with Data Parallelism and DMA

Hi, I have a machine with multiple GPUs and deployed a distributed Tensorflow exploiting data parallelism. I use ClusterConfig to configure the cluster's topology and pass this to Experiment to run the distributed training. I wanted to make one of the GPUs as the parameter server and use the rest for the workers, each of which uses one GPU. I did this through launching multiple processes for parameter server and workers while setting up the env variable (CUDA_VISIBLE_DEVICES) to one of the GPUs.
In this case, I noticed that the GPUs don't communicate to each other via DMA and I guess this is because the DMA is only available between visible devices to Tensorflow.
I also tried "device_count={"GPU": 1}" to make Tensorflow see all the GPUs while using only one GPU, but this still seems to occupy the whole resource of all visible GPUs, preventing another Tensorflow process to be launched over the idle GPU.
It would be great if there is a way to use only one GPU for a Tensorflow process but still enable DMA with the other GPUs sitting in the system. Am I missing such feature even though it exists?
Thank you!