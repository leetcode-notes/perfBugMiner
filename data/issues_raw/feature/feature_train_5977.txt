split_v generates tensors of unspecified size for all dimensions, when one dimension is missing at the original one

The new split_v function introduced in 0.12rc0 does not correctly predict the shapes of the resulting tensors when the original tensor has an unknown dimension, resulting on the split dimension being of unknown size. For instance:
tensor = tf.placeholder(tf.float32, [None, 12])
parts = tf.split_v(tensor, [6, 4, 2], split_dim=1)

This results in three tensors, all with shapes [?, ?], instead of the expected [?, 6], [?, 4] and [?, 2]. While at runtime the resulting tensors are of the right size, this makes it more difficult to debug the code during graph definition.
EDIT: This also creates problems when combined with scan. Because scan expects fn to return tensors of the same shape as the initializers, it forces the use of a reshape just to clear the 'unknown' dimension.