[FeatureRequest] Decorator for estimator input_fn

In the documentation for Passing input_fn Data to Your Model there are a few methods provided for using a function to construct input data and then wrapping that to get a function object. The documentation suggests functools.partial or lambda.
Would it be possible to provide a python decorator (maybe under the tf.estimator module)?
Looking at suggested decorator and usage below, I think it makes the code cleaner when making these reusable input functions.
Proposed decorator
n.b. name to be improved/aligned with TF
import functools

def tf_data_input_fn(old_func):
    def inside(*args, **kwargs):
        return functools.partial(old_func, *args, **kwargs)
    return inside
Usage
@tf_data_input_fn
def my_input_fn(data_set):
    # Construct dataset, repeat, maps etc
    features, labels = dataset.make_one_shot_iterator().get_next()
    return features, labels

train_input_fn = my_input_fn(training_set)
eval_input_fn = my_input_fn(test_set)

classifier.train(input_fn=train_input_fn, steps=2000)
classifier.evaluate(input_fn= eval_input_fn, steps=2000)
If this is favourable, I'd be happy to provide a contribution towards such an addition.
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS
TensorFlow installed from (source or binary): pip
TensorFlow version (use command below): v1.4.0-8-gbca50da6eb 1.4.0
Python version: 3.6.3
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: N/A