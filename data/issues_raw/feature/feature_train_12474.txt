CUDA 9RC + cuDNN7

Things have moved forward.  I strongly suggest building from head with CUDA 9 and cuDNN 7.  All of the necessary codes should be in the TF 1.4 tag but given we are still working on new features for FP16, I would build from head if that is of interest.  I do not like to share anything I have not personally tested as I know how frustrating trying to get things to compile can be.
Everything below this line is OUT DATED as of 19-OCT
This is an unofficial and very not supported patch to make it possible to compile TensorFlow with CUDA9RC and cuDNN 7 or CUDA8 + cuDNN 7.
During testing on V100 (Volta) and ResNet-50 FP32  using CUDA 9RC + cuDNN 7 was significantly faster than CUDA 8 + cuDNN 6, which was not a surprise.  I am about to test on P100s.  I am sharing this patch informally so those that are interested can play with cuDNN 7 as well as CUDA 9RC before we have the official release.  As we have more interesting code, e.g FP16 models, I will share it in this issue.   I expect NVIDIA will start to submit official cuDNN 7 patches very soon.
Note:  This patch may work on more recent versions of TensorFlow but it will likely bit rot so keep that in mind.  Apply the cuDNN 7 patch and then fast-forwarding the branch might be the best approach.  My git skills are not strong so do what you think is best.

Download the patches


0001-CUDA-9.0-and-cuDNN-7.0-support.patch
eigen.f3a22f35b044.cuda9.diff



Clone the tensorflow repo
https://github.com/tensorflow/tensorflow.git


Checkout the revision that the TensorFlow patch can apply to:
git checkout db596594b5653b43fcb558a4753b39904bb62cbd~


Apply the TensorFlow patch:
git apply ~/Downloads/0001-CUDA-9.0-and-cuDNN-7.0-support.patch


Run ./configure. When it asks for the CUDA version, put 9.0 (or 8). When it asks for the cudnn version, put 7.0.1 (Entering '7' worked fine for me). Make sure you put the paths to the right Cuda and cudnn versions and have your ldconfig or LD_LIBARY_PATH set to point to the CUDA 9 folder.
./configure


Attempt to build TensorFlow, so that Eigen is downloaded. This build will fail if building for CUDA9RC but will succeed for CUDA8
bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package


Apply the Eigen patch:


    cd -P bazel-out/../../../external/eigen_archive
    patch -p1 < ~/Downloads/eigen.f3a22f35b044.cuda9.diff

Build TensorFlow successfully

    cd -
    bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package
I have run this process myself on Ubuntu 14.04 with Python 2.7.
Thank for NVIDIA for the early patch and @reedwm who created most of these instructions.
If you are using Python 2.7 and gcc 4.8+ here is a .whl where I followed the instructions above and one with CUDA 8 and cuDNN 7 which I have yet to test.  Stress again, this was created by me and not the TensorFlow build team.  My/our goal is to engage with anyone that wants to try this out and try to have a little fun.  :-)