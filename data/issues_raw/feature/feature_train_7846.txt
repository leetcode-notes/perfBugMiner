No 'T' attr on Logical op in GraphDef

Most graph nodes have a 'T' attr in their node definition.
'LogicalAnd', 'LogicalOr', and others do not in TF 1.0. Is this because these nodes only operate on bools?
Adding a 'T' attr would help tool builders have a uniform interface to ops and would allow easy future extension to logical operations on integer types.
Example:
from __future__ import print_function
import tensorflow as tf

x = tf.constant(1., name='x')
y = tf.constant(2., name='y')
ge = tf.greater(x, y, name='ge')
q = tf.logical_and(ge, ge, name='q')
z = tf.logical_not(q, name='z')

print(tf.get_default_graph().as_graph_def())
Output:
node {
  name: "x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "ge"
  op: "Greater"
  input: "x"
  input: "y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "q"
  op: "LogicalAnd"
  input: "ge"
  input: "ge"
}
node {
  name: "z"
  op: "LogicalNot"
  input: "q"
}
versions {
  producer: 21
}