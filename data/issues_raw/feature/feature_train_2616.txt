[New Feature] Dimension Validation for CNNs

In the deep MNIST samples for experts, the dimensions of the example network is defined as follows:
[5, 5, 1, 32]
[5, 5, 32,64]
[7_7_64, 1024]
[1024, n_classes]
It seems nice for us to implement functions that checks a validity of given network, if we've not done yet.
Example Error or Warning Messages:
1: u" Dimension mismatch occurs at forward calculation from %s %s to %s %s: Input_dim=%s but Output_dim=%s  "%( lower_component, lower_component,  upper_type, upper_name, Input_dim, Output_dim)
"lower_component" and "upper_componet" are either function with out tf.Variable or anything with tf.Varriables.
1-a: u" Dimension mismatch occurs at forward calculations from linear-layer "first-linear" to linear-layer "out": Input_dim=1024 but Output_dim=1023", if
'first-linear': tf.Variable(tf.random_normal([7*7*64, 1024])), 
'out': tf.Variable(tf.random_normal([1023, n_classes])) 

2: u" Dimension mismatch occurs at forward calculation:  Input_dim=%s  of %s %s is not divided by %s*%s, Note that output of %s %s reduce dimension from %s to %s "%(Input_dim, lower_type, lower_name, out_width, out_height,  lower_type,  lower_name, Input_dim, Output_dim)
2-a u" Dimension mismatch occurs at forward calculation:  Input_dim=2048  of linear-layer "wd1" is not divided by 7*7, Note that output of function "max_pool" reduces dimension from 196 to 49 "
3: u" Dimension mismatch occurs at forward calculation: At the conv-layer %s, for given weight of W2 =(W1-F+2P)/S+1 isn't an integer, where width W1=%s, F=%s, P=%s, S=%S  "%(conv_layer_name, filter_size, padding, strides)