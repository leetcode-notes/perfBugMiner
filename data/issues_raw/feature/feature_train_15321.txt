Feature Request: Support for DT_STRING type in ScatterNd kernel.

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): -
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOs, Ubuntu 16.04
TensorFlow installed from (source or binary): binaries
TensorFlow version (use command below):
v1.3.0-rc1-5542-g03a1651cbb 1.5.0-dev20171206
and
v1.4.0-rc1-11-g130a514 1.4.0
Python version: 3.6
Bazel version (if compiling from source): -
GCC/Compiler version (if compiling from source): -
CUDA/cuDNN version: -
GPU model and memory: -
Exact command to reproduce:

import tensorflow as tf
indices = tf.constant(
    [[i] for i in range(37)] +\
    [[i] for i in range(37,37+18)] +\
    [[i] for i in range(37*2,37*2+9)] +\
    [[i] for i in range(37*3,37*3+36)]
)
updates = tf.ones([100,13])
# This line:
updates = tf.as_string(updates)
shape = tf.constant([37*4, 13])
sc=tf.scatter_nd(indices, updates, shape)
with tf.Session() as sess:
    print(sess.run(sc))
Describe the problem
tf.scatter_nd supports most of the other types except DT_STRING, and throws the following error:
---------------------------------------------------------------------------
NotFoundError                             Traceback (most recent call last)
<ipython-input-196-71592cd7f940> in <module>()
      9 updates = tf.as_string(updates)
     10 shape = tf.constant([37*4, 13])
---> 11 sc=tf.scatter_nd(indices, updates, shape)

~/tf-nightly/lib/python3.6/site-packages/tensorflow/python/ops/gen_array_ops.py in scatter_nd(indices, updates, shape, name)
   4395     _attrs = ("T", _attr_T, "Tindices", _attr_Tindices)
   4396     _result = _execute.execute(b"ScatterNd", 1, inputs=_inputs_flat,
-> 4397                                attrs=_attrs, ctx=_ctx, name=name)
   4398   _execute.record_gradient(
   4399       "ScatterNd", _inputs_flat, _attrs, _result, name)

~/tf-nightly/lib/python3.6/site-packages/tensorflow/python/eager/execute.py in quick_execute(op_name, num_outputs, inputs, attrs, ctx, name)
     64     else:
     65       message = e.message
---> 66     six.raise_from(core._status_to_exception(e.code, message), None)
     67   # pylint: enable=protected-access
     68   return tensors

~/tf-nightly/lib/python3.6/site-packages/six.py in raise_from(value, from_value)

NotFoundError: No registered 'ScatterNd' OpKernel for CPU devices compatible with node ScatterNd = ScatterNd[T=DT_STRING, Tindices=DT_INT32](dummy_input, dummy_input, dummy_input)
	 (OpKernel was found, but attributes didn't match)
	.  Registered:  device='CPU'; T in [DT_INT64]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_INT64]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_INT32]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_INT32]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_UINT16]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_UINT16]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_INT16]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_INT16]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_UINT8]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_UINT8]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_INT8]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_INT8]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_HALF]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_HALF]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_FLOAT]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_FLOAT]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_DOUBLE]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_DOUBLE]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_COMPLEX64]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_COMPLEX64]; Tindices in [DT_INT64]
  device='CPU'; T in [DT_COMPLEX128]; Tindices in [DT_INT32]
  device='CPU'; T in [DT_COMPLEX128]; Tindices in [DT_INT64]
 [Op:ScatterNd]

Question
Is it possible to get tf.scatter_nd to work with strings, for example, an empty string as a default value?
Also, on the related note, rn the default values are 0 or 0.0, can the function be extended to use an arbitrary value (e.g. a padding symbol)?