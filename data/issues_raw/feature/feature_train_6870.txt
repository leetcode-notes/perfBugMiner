POSIX compliance

This is a non-urgent issue that might require a lot of changes
I was looking into modifying some TF files to make it work on BSD, and noticed that a lot of files ignore the POSIX compliance. Quick example, configure is written in Bourne shell, which is not POSIX.
I think it is important to write everything with POSIX in mind, because later on if TF would need to add support for other OS's, it might be harder.
For example if you run checkbashisms on configure, that what you get:
possible bashism in ./configure line 7 ((push|pop)d):
pushd `dirname $0` > /dev/null
possible bashism in ./configure line 9 ((push|pop)d):
popd > /dev/null
possible bashism in ./configure line 12 ('function' is useless):
function is_windows() {
possible bashism in ./configure line 14 (alternative test command ([[ foo ]] should be [ foo ])):
  if [[ "${PLATFORM}" =~ msys_nt* ]]; then
possible bashism in ./configure line 21 ('function' is useless):
function bazel_clean_and_fetch() {
possible bashism in ./configure line 40 (read with option other than -r):
    read -p "Please specify the location of python. [Default is $default_python_bin_path]: " PYTHON_BIN_PATH
possible bashism in ./configure line 64 (should be 'b = a'):
while [ "$TF_NEED_JEMALLOC" == "" ]; do
possible bashism in ./configure line 66 (read with option other than -r):
  read -p "Do you wish to use jemalloc as the malloc implementation? "\
"(Linux only) [Y/n] " INPUT
possible bashism in ./configure line 75 (should be 'b = a'):
if [ "$TF_NEED_JEMALLOC" == "1" ]; then
possible bashism in ./configure line 81 (should be 'b = a'):
while [ "$TF_NEED_GCP" == "" ]; do
possible bashism in ./configure line 83 (read with option other than -r):
  read -p "Do you wish to build TensorFlow with "\
"Google Cloud Platform support? [y/N] " INPUT
possible bashism in ./configure line 95 (should be 'b = a'):
if [ "$TF_NEED_GCP" == "1" ]; then
possible bashism in ./configure line 98 (alternative test command ([[ foo ]] should be [ foo ])):
  if [[ $(uname -a) =~ Linux ]] && [[ ! -f "/usr/include/curl/curl.h" ]]; then
possible bashism in ./configure line 111 (should be 'b = a'):
while [ "$TF_NEED_HDFS" == "" ]; do
possible bashism in ./configure line 113 (read with option other than -r):
  read -p "Do you wish to build TensorFlow with "\
"Hadoop File System support? [y/N] " INPUT
possible bashism in ./configure line 125 (should be 'b = a'):
if [ "$TF_NEED_HDFS" == "1" ]; then
possible bashism in ./configure line 134 (should be 'b = a'):
while [ "$TF_ENABLE_XLA" == "" ]; do
possible bashism in ./configure line 135 (read with option other than -r):
  read -p "Do you wish to build TensorFlow with the XLA just-in-time compiler (experimental)? [y/N] " INPUT
possible bashism in ./configure line 144 (should be 'b = a'):
if [ "$TF_ENABLE_XLA" == "1" ]; then
possible bashism in ./configure line 163 (should be 'b = a'):
while [ "$TF_NEED_OPENCL" == "" ]; do
possible bashism in ./configure line 164 (read with option other than -r):
  read -p "Do you wish to build TensorFlow with OpenCL support? [y/N] " INPUT
possible bashism in ./configure line 175 (should be 'b = a'):
while [ "$TF_NEED_CUDA" == "" ]; do
possible bashism in ./configure line 176 (read with option other than -r):
  read -p "Do you wish to build TensorFlow with CUDA support? [y/N] " INPUT
possible bashism in ./configure line 187 (alternative test command ([[ foo ]] should be [ foo ])):
if [[ "$TF_NEED_CUDA" == "0" ]] && [[ "$TF_NEED_OPENCL" == "0" ]]; then
possible bashism in ./configure line 187 (should be 'b = a'):
if [[ "$TF_NEED_CUDA" == "0" ]] && [[ "$TF_NEED_OPENCL" == "0" ]]; then
possible bashism in ./configure line 193 (should be 'b = a'):
if [ "$TF_NEED_CUDA" == "1" ]; then
possible bashism in ./configure line 200 (read with option other than -r):
    read -p "Please specify which gcc should be used by nvcc as the host compiler. [Default is $default_gcc_host_compiler_path]: " GCC_HOST_COMPILER_PATH
possible bashism in ./configure line 224 (read with option other than -r):
    read -p "Please specify the CUDA SDK version you want to use, e.g. 7.0. [Leave empty to use system default]: " TF_CUDA_VERSION
possible bashism in ./configure line 237 (read with option other than -r):
    read -p "Please specify the location where CUDA $TF_CUDA_VERSION toolkit is installed. Refer to README.md for more details. [Default is $default_cuda_path]: " CUDA_TOOLKIT_PATH
possible bashism in ./configure line 244 (alternative test command ([[ foo ]] should be [ foo ])):
  if [[ -z "$TF_CUDA_VERSION" ]]; then
possible bashism in ./configure line 252 (should be 'b = a'):
  elif [ "$OSNAME" == "Linux" ]; then
possible bashism in ./configure line 254 (should be 'b = a'):
  elif [ "$OSNAME" == "Darwin" ]; then
possible bashism in ./configure line 277 (read with option other than -r):
    read -p "Please specify the Cudnn version you want to use. [Leave empty to use system default]: " TF_CUDNN_VERSION
possible bashism in ./configure line 283 (read with option other than -r):
    read -p "Please specify the location where cuDNN $TF_CUDNN_VERSION library is installed. Refer to README.md for more details. [Default is $default_cudnn_path]: " CUDNN_INSTALL_PATH
possible bashism in ./configure line 293 (alternative test command ([[ foo ]] should be [ foo ])):
  if [[ -z "$TF_CUDNN_VERSION" ]]; then
possible bashism in ./configure line 300 (should be 'b = a'):
    elif [ "$OSNAME" == "Linux" ]; then
possible bashism in ./configure line 303 (should be 'b = a'):
    elif [ "$OSNAME" == "Darwin" ]; then
possible bashism in ./configure line 320 (alternative test command ([[ foo ]] should be [ foo ])):
    if [[ "$REALVAL" =~ .so[.]+([0-9]*) ]]; then
possible bashism in ./configure line 321 ($BASH_SOMETHING):
      TF_CUDNN_EXT="."${BASH_REMATCH[1]}
possible bashism in ./configure line 321 (bash arrays, ${name[0|*|@]}):
      TF_CUDNN_EXT="."${BASH_REMATCH[1]}
possible bashism in ./configure line 322 ($BASH_SOMETHING):
      TF_CUDNN_VERSION=${BASH_REMATCH[1]}
possible bashism in ./configure line 322 (bash arrays, ${name[0|*|@]}):
      TF_CUDNN_VERSION=${BASH_REMATCH[1]}
possible bashism in ./configure line 324 (alternative test command ([[ foo ]] should be [ foo ])):
    elif [[ "$REALVAL" =~ ([0-9]*).dylib ]]; then
possible bashism in ./configure line 325 ($BASH_SOMETHING):
      TF_CUDNN_EXT=${BASH_REMATCH[1]}".dylib"
possible bashism in ./configure line 325 (bash arrays, ${name[0|*|@]}):
      TF_CUDNN_EXT=${BASH_REMATCH[1]}".dylib"
possible bashism in ./configure line 326 ($BASH_SOMETHING):
      TF_CUDNN_VERSION=${BASH_REMATCH[1]}
possible bashism in ./configure line 326 (bash arrays, ${name[0|*|@]}):
      TF_CUDNN_VERSION=${BASH_REMATCH[1]}
possible bashism in ./configure line 330 (should be 'b = a'):
    if [ "$OSNAME" == "Darwin" ]; then
possible bashism in ./configure line 340 (should be 'b = a'):
  elif [ "$OSNAME" == "Linux" ]; then
possible bashism in ./configure line 343 (should be 'b = a'):
  elif [ "$OSNAME" == "Darwin" ]; then
possible bashism in ./configure line 354 (should be 'b = a'):
  if [ "$OSNAME" == "Linux" ]; then
possible bashism in ./configure line 365 (should be 'b = a'):
  if [ "$OSNAME" == "Linux" ]; then
possible bashism in ./configure line 388 (read with option other than -r):
    read -p "[Default is: \"3.5,5.2\"]: " TF_CUDA_COMPUTE_CAPABILITIES
possible bashism in ./configure line 395 (${parm/?/pat[/str]}):
  COMPUTE_CAPABILITIES=${TF_CUDA_COMPUTE_CAPABILITIES//,/ }
possible bashism in ./configure line 398 (alternative test command ([[ foo ]] should be [ foo ])):
    if [[ ! "$CAPABILITY" =~ [0-9]+.[0-9]+ ]]; then
possible bashism in ./configure line 404 (should be 'b = a'):
  if [ "$ALL_VALID" == "0" ]; then
possible bashism in ./configure line 430 (should be 'b = a'):
if [ "$TF_NEED_OPENCL" == "1" ]; then
possible bashism in ./configure line 437 (read with option other than -r):
    read -p "Please specify which C++ compiler should be used as the host C++ compiler. [Default is $default_cxx_host_compiler]: " HOST_CXX_COMPILER
possible bashism in ./configure line 460 (read with option other than -r):
    read -p "Please specify which C compiler should be used as the host C compiler. [Default is $default_c_host_compiler]: " HOST_C_COMPILER
possible bashism in ./configure line 485 (read with option other than -r):
    read -p "Please specify the location where ComputeCpp for SYCL $TF_OPENCL_VERSION is installed. [Default is $default_computecpp_toolkit_path]: " COMPUTECPP_TOOLKIT_PATH
possible bashism in ./configure line 492 (should be 'b = a'):
  if [ "$OSNAME" == "Linux" ]; then