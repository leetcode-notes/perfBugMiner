Feature Request: Mixed Sparse and Dense Tensors

Describe the problem
I am trying to implement a sparse convolution operation. This means I have spatially sparse locations(in this case NHW of NHWC in 2d convolutions)
and at each of these locations I have a dense vector of values (C of NHWC).
In tensorflow there are currently two classes for sparse representations:

SparseTensor:
Consisting of an indices matrix, value and shape vector.
This allows for a fully sparse tensor, however it does not fit this use case, because representing the channels as just another sparse dimension, I cannot simply compute a matrix multiplication, with the corresponding kernel parameters. This extremely reduces efficiency. Apart from this, also the storage
is inefficient, since It redundantly stores the indices for the dense sub tensor.
IndexedSlices
Consisting of an indices vector and an arbitrarily shaped value tensor.
This is a mixed sparse dense data structure. So the individual sub tensors are stored sparsely. It does however not fit the use case, because the indexing is only a vector and not (as compared to the sparse
tensor) a matrix. So we can only address only a single index. While it is possible to encode an index vector
as a scalar index, it imposes this effort on the user, which seems to me to be non optimal.

So both data structures are inadequate for this use case. While I am talking about a single use case, I cannot imagine, that no one else stumbled across this issue, since its so general.
Proposed Solution
To solve this issue I propose to introduce a new class MixedSparseDenseTensor, which takes an indices matrix (as opposed to IndexedSlices vector), an arbitrarily shaped values tensor (as opposed to SparseTensors vector) and a shape vector. So it would thus be either a generalization of IndexedSlices to multiple dimensional indices or a generalization of SparseTensor to arbitrarily shaped sub tensors.
The dimensionality of the shape vector should then be the rank of the sparse tensor + the rank of the dense tensor.