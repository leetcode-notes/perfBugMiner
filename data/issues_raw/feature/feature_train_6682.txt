Weird behavior of tf.tensordot when shapes are partly known

I frequently use tf.tensordot, for its flexibility on axes.
However, as I multiply two tensors whose shapes are partly known, it cannot infer the shape of the result tensor, i.e. shape is <unknown>, while other alternative functions that do the same operation infer shapes well.
For example, let a and b be
a = tf.placeholder('float32', shape=[None, 100])
b = tf.placeholder('float32', shape=[100, 300])

We can validate that the below functions infer shapes well.
result_matmul = tf.matmul(a, b)
result_matmul.get_shape().as_list()  # [None, 300]

result_einsum = tf.einsum('ij,jk->ik', a, b)
result_einsum.get_shape().as_list()  # [None, 300]

However, when tf.tensordot is used, the weird result occurs:
result_tensordot = tf.tensordot(a, b, axes=[[1], [0]])
result_tensordot.get_shape()  # TensorShape(None)
result_tensordot.get_shape().as_list()  # Error

Thus, I have to call set_shape(shape) function explicitly to make the output be able to be used for further operations.
There also exists an issue that it still uses concat function, where the warning that it would be deprecated after 2016-12-14 occurs, instead of concat_v2.