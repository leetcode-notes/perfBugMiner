Make tf.Tensor's magic functions (e.g., `__add__()`) play nice with unknown types

tf.Tensor's magic functions should return NotImplemented rather than raising an exception when they are given an object of an unsupported type (i.e., an object that TensorFlow cannot convert_to_tensor()). This would give that object a chance to perform the operation with its reverse magic function (e.g., __radd__()). See the code example below. Note that this is what NumPy arrays do.
Environment info
Operating System: Ubuntu 16.10
Installed version of CUDA and cuDNN:  N/A
Installed pip package:
https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.0-cp35-cp35m-linux_x86_64.whl
TensorFlow version: 1.0.0
Reproducible example
>>> class AmazingMatrix(object):
...   def __add__(self, b):
...     print("I know how to handle TensorFlow Tensors!")
...   def __radd__(self, a):
...     print("I know how to handle TensorFlow Tensors!")
... 
>>> am = AmazingMatrix()
>>> t = tf.constant([[0.]])
>>> am + t
I know how to handle TensorFlow Tensors!
>>> t + am
Traceback (most recent call last):
[...]/python/ops/math_ops.py", line 799, in binary_op_wrapper
    y = ops.convert_to_tensor(y, dtype=x.dtype.base_dtype, name="y")
[...]
TypeError: Expected float32, got <__main__.AmazingMatrix object at 0x7f5999a73518> of type 'AmazingMatrix' instead.

Related GitHub issues or StackOverflow threads
http://stackoverflow.com/questions/38599637/overloading-tensorflow-tensor-magic-method-priority-similar-to-numpys-array
What other attempted solutions have you tried?
None. I guess one could create Tensor wrappers, with the appropriate behavior, but it would be quite cumbersome to use.
Logs or other output that would be helpful
None