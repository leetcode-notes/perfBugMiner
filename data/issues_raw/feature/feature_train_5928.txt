Support distributed aggregation in embedding_lookup_sparse

The current code just gather the slice (co-located with the partition) and send back to the caller for the further aggregation with the specified combiner. In some cases, making the aggregation co-located with the variable partition can reduce latency (both computing time and transfer time).
For example, the embedding weights has shape 10000000 * 1024 with 10 partitions. The batch size is 256. And the average number non-zero value of each feature tensor is 100. Without aggregation, the transfer size out of each partition is around 256 * 100/10 * 1024 * 4 = 10MB. If we make the aggregation first, the data size can be reduced to around 256 * 1024 * 4 = 1MB. There are two benefits for the latency, first is the reduced transfer size, the second is partial of the aggregation is done in parallel.
It's suggested to add an option with this feature default to false (whether to use this feature depends on the devices speed up ratio and transfer bandwidth).