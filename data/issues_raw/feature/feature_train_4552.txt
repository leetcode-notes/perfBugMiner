Feature request: better handling of concurrent execution to prevent unnecessary out of memory failures

I have a model in which one operation happens to be very memory intensive and cannot be executed at once. I thought that by splitting the operation manually and executing parts of it individually (all on the GPU), I would get around the OOM problem. Unfortunately, it appears that TF aggressively tries to schedule as many ops to run in parallel as possible, even if that results in an OOM failure. I describe my specific issue further in this Stack Overflow post.
It seems to me that this problem should be reasonably easy to solve, and is rather a serious current limitation of TF. The basic principle is that a computation should not fail if it's possible, in some sequential order, to execute it in memory. I'm not talking about situations in which TF has to be clever about splitting a seemingly atomic operations in parts. That I understand can be quite difficult and requires "art" on the part of the programmer. What I'm describing is a situation in which the computation graph, as described, can in fact be executed without running out of memory, but because TF is (overly) aggressive in scheduling independent ops concurrently, it runs out of memory.
The solution seems rather straight-forward. Before putting yet another op onto the GPU (or whatever hardware), TF should check if that would cause the memory to run out. If so, it should check if there's a cyclic dependency on the current op getting executed, i.e. it would be impossible for it to move forward unless the current op is executed. If so then that's a legitimate problem and it would fail with an OOM error. On the other hand, if it's possible for it to wait until other ops are executed before trying again, then it should simply wait until more memory is available. I.e. it should have a way to run independent operations sequentially.
I'm not familiar enough with the internals of TF to know how difficult a change like this would be, but as it currently stands, it seems like it's preventing a large swath of models from getting executed that otherwise could get executed.
On a related note, the dynamic_rnn op already seems to do this, where it's able to shuffle memory back and forth until the computation is done, and so perhaps there's an existing partial solution that I'm not aware of?