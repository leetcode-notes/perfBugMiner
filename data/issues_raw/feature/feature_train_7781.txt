Distribution of sum of several discrete variables

I've looked for this feature, and I don't think it exists, but it would be really useful for modelling the latent variable models which result in the observation being a sum of several discrete variables. This would be especially useful in signal processing, where different signals add up. Additionally, the idea I am presenting below involves clipping, which is also a feature of the signal recording equipment.
Let's say I have a discrete set of signal values that I am tracking, like so:
x = tf.constant(
    [-2.0, -1.0, 0.0, 1.0, 2.0],
    name='x')

It is important for the below that the values in x are sequential and equally spaced. In fact, I am only interested in integer values centered around zero.
Let's say that some latent variable model produces the probabilities of 3 signals taking on these specific values like so (I am writing as a constant, but it will be in fact a variable):
p = tf.constant(
    [[0.1, 0.1, 0.2, 0.4,  0.2],
     [0.5, 0.3, 0.1, 0.05, 0.05],
     [0.1, 0.2, 0.4, 0.2,  0.1]],
    name='p')

Assuming these three variables are independent, I would now like a function res = f(x, p) that would compute res[i] = p(sum(signal1 + signal2 + signal3) = x[i]) for 0 < i < len(x) -1.
Moreover, for at the edges if should produce the output like so (clipping): res[0] = p(sum(signal1 + signal2 + signal3) <= x[0]) and res[-1] = p(sum(signal1 + signal2 + signal3) >= x[-1])
The output of this operation would be of the same shape as x. The result of the operation would be equivalent to a series of convolutions with clipping: conv(p[-1,:], conv(... conv(p[0, :], p[1, :]))). Here we assume the normal convolution function (not cross-correlation).
It might be useful to return the results in the log-space (and be able to accept the inputs as logits too).