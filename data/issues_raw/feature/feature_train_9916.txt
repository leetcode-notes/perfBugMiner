tf.self_adjoint_eig doesn't behave the same way with float32 and float64

Here is an example to reproduce the problem
l = tf.constant([[10., -4., -4., -2.],
                  [-4., 10., -2., -4.],
                  [-4., -2., 6., 0.],
                  [-2., -4., 0., 6.]], dtype=tf.float64)
e, v = tf.self_adjoint_eig(tf.expand_dims(l, 0))

When I set dtype=tf.float64 the output is
// Eigen values
[[ -2.31986627e-15   5.52786405e+00   1.20000000e+01   1.44721360e+01]]

// Eigen vectors
[[-0.5        -0.16245985  0.5        -0.68819096]
 [-0.5         0.16245985  0.5         0.68819096]
 [-0.5        -0.68819096 -0.5         0.16245985]
 [-0.5         0.68819096 -0.5        -0.16245985]]

When dtype=tf.float32 the output is
// Eigen values
[[ -1.02379988e-06   5.52786446e+00   1.20000019e+01   1.44721375e+01]]

// Eigen vectors
[[ 0.49999985  0.16245979  0.49999985 -0.68819106]
 [ 0.5        -0.16246006  0.50000018  0.68819082]
 [ 0.5         0.68819106 -0.49999988  0.16246004]
 [ 0.49999991 -0.68819088 -0.50000012 -0.16245979]]

In this case the sign of the second eigen vector changed.
The numpy equivalent of this code always give the same result (in float or float32) and is similar to the result I got with the tf.float64 version
L = np.array([[10., -4., -4., -2.],
                  [-4., 10., -2., -4.],
                  [-4., -2., 6., 0.],
                  [-2., -4., 0., 6.]])
D, V =np.linalg.eigh(L)

// numpy eigen values
[  1.11716192e-15   5.52786405e+00   1.20000000e+01   1.44721360e+01]

// numpy eigen vectors
[[ 0.5        -0.16245985  0.5        -0.68819096]
 [ 0.5         0.16245985  0.5         0.68819096]
 [ 0.5        -0.68819096 -0.5         0.16245985]
 [ 0.5         0.68819096 -0.5        -0.16245985]]