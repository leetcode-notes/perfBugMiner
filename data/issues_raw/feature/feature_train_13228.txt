add image gradient op

A paper I am reimplementing recently uses image gradient loss. Numpy offers np.gradient to achieve this task i.e. np.gradient(image, axis=0), np.gradient(image, axis=1) however tensorflow lacks this feature or at least documentation about how to use tf.gradients to get this done.
Therefore I propose to either send a PR where I add a gradient image op which uses fixed 2d convolution, i.e.:
import numpy as np
import scipy as sp
import tensorflow as tf

from skimage import io
from skimage import color

from matplotlib import pyplot as plt

image = color.rgb2gray(io.imread('image.jpg'))
image_rs = image.reshape([1] + list(image.shape) + [1])

xgrad = np.gradient(image, axis=0)
ygrad = np.gradient(image, axis=1)

image_ph = tf.placeholder(tf.float32, image_rs.shape)

x_weight = tf.reshape(tf.constant([-1, 0, +1], tf.float32), [3, 1, 1, 1])
y_weight = tf.reshape(x_weight, [1, 3, 1, 1])

xgrad_ts = tf.nn.conv2d(image_ph, x_weight, [1, 1, 1, 1], 'SAME')
ygrad_ts = tf.nn.conv2d(image_ph, y_weight, [1, 1, 1, 1], 'SAME')

with tf.Session() as sess:
    xgrad2, ygrad2 = sess.run([xgrad_ts, ygrad_ts], feed_dict={image_ph: image_rs})

    print(xgrad2.shape)
    fig, axes = plt.subplots(2, 3)
    axes[0, 0].imshow(image)
    axes[0, 1].imshow(xgrad)
    axes[0, 2].imshow(ygrad)
    axes[1, 0].imshow(image)
    axes[1, 1].imshow(xgrad2[0,:,:,0])
    axes[1, 2].imshow(ygrad2[0,:,:,0])
    plt.show()

or have someone update documentation of tf.gradients.
For the first I could provide a PR if this is considered interesting for tensorflow and not "too implementation specific".