valgrind helloworld.py throws 7805 errors

NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.
For general support from the community, see StackOverflow.
To make bugs and feature requests more easy to find and organize, we close issues that are deemed
out of scope for GitHub Issues and point people to StackOverflow.
For bugs or installation issues, please provide the following information.
The more information you provide, the more easily we will be able to offer
help and advice.
What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?
Several issues report memory leaks, but only for specific uses of Tensorflow:
https://raw.githubusercontent.com/aymericdamien/TensorFlow-Examples/master/examples/1_Introduction/helloworld.py
#700
#4151
http://stackoverflow.com/questions/35695183/tensorflow-memory-leak-even-while-closing-session
Environment info
Operating System:
Linux, Ubuntu 14.04
Installed version of CUDA and cuDNN:
(please attach the output of ls -l /path/to/cuda/lib/libcud*):
❯ ls -l /usr/local/cuda-8.0/lib64/libcud*
-rw-r--r-- 1 root root   556000 Jan 26 18:48 /usr/local/cuda-8.0/lib64/libcudadevrt.a
lrwxrwxrwx 1 root root       16 Jan 26 18:51 /usr/local/cuda-8.0/lib64/libcudart.so -> libcudart.so.8.0
lrwxrwxrwx 1 root root       19 Jan 26 18:51 /usr/local/cuda-8.0/lib64/libcudart.so.8.0 -> libcudart.so.8.0.61
-rw-r--r-- 1 root root   415432 Jan 26 18:48 /usr/local/cuda-8.0/lib64/libcudart.so.8.0.61
-rw-r--r-- 1 root root   775162 Jan 26 18:48 /usr/local/cuda-8.0/lib64/libcudart_static.a
lrwxrwxrwx 1 root root       13 Mar  9 14:14 /usr/local/cuda-8.0/lib64/libcudnn.so -> libcudnn.so.5
lrwxrwxrwx 1 root root       17 Mar  9 14:14 /usr/local/cuda-8.0/lib64/libcudnn.so.5 -> libcudnn.so.5.1.5
-rw-r--r-- 1 root root 79337624 Mar  9 14:14 /usr/local/cuda-8.0/lib64/libcudnn.so.5.1.5
-rw-r--r-- 1 root root 69756172 Mar  9 14:14 /usr/local/cuda-8.0/lib64/libcudnn_static.a

If installed from binary pip package, provide:


A link to the pip package you installed:
pip install tensorflow


The output from python -c "import tensorflow; print(tensorflow.__version__)".


(env) ❯ python -c "import tensorflow; print(tensorflow.__version__)"
1.0.1

If installed from source, provide
I'm listing both because I encountered the problem using both source and pip package.

The commit hash (git rev-parse HEAD)

~/tensorflow r1.0*
❯ git rev-parse HEAD
e895d5ca395c2362df4f5c8f08b68501b41f8a98



The output of bazel version

❯ bazel version
............
Build label: 0.4.4
Build target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar
Build time: Wed Feb 1 18:54:21 2017 (1485975261)
Build timestamp: 1485975261
Build timestamp as int: 1485975261

If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)
valgrind python helloworld.py

Here, helloworld.py refers to https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/1_Introduction/helloworld.py.
While there are certain cases in which memory violations are not a problem, I am trying to track down a segfault from using Tensorflow with Ros and Gazebo. It's very difficult to know whether one of the memory issues already present in Tensorflow is  responsible.
Final summary is as follows:
==18112== HEAP SUMMARY:
==18112==     in use at exit: 8,356,021 bytes in 99,634 blocks
==18112==   total heap usage: 775,798 allocs, 676,164 frees, 352,616,777 bytes allocated
==18112== 
==18112== LEAK SUMMARY:
==18112==    definitely lost: 154,618 bytes in 82 blocks
==18112==    indirectly lost: 0 bytes in 0 blocks
==18112==      possibly lost: 1,745,007 bytes in 32,420 blocks
==18112==    still reachable: 6,456,396 bytes in 67,132 blocks
==18112==         suppressed: 0 bytes in 0 blocks
==18112== Rerun with --leak-check=full to see details of leaked memory
==18112== 
==18112== For counts of detected and suppressed errors, rerun with: -v
==18112== Use --track-origins=yes to see where uninitialised values come from
==18112== ERROR SUMMARY: 7713 errors from 159 contexts (suppressed: 0 from 0)

What other attempted solutions have you tried?
None.
Logs or other output that would be helpful
(If logs are large, please upload as attachment or provide link).
This gist contains the full output of valgrind python helloworld.py.