tf.image.decode_image doesn't return tensor's shape

I try to use "image.decode_image" to read image file as tensor, but this function returns a tensor without "shape".
As said in the doc:

Their input and output are all of variable size. If you need fixed size images, pass the output of the decode Ops to one of the cropping and resizing Ops.
But actually it cannot be passed to resizing op without shape.

Is there a way to use import image as a normal tensor?
Codes: I ran it in ipy notebook
fn = '8.png'
image_contents = tf.read_file(fn)
image = tf.image.decode_image(image_contents, channels=1)
image

image.shape

image.eval().shape

img_resize = tf.image.resize_images(image, [28,28])

Output:
<tf.Tensor 'decode_image/cond_jpeg/Merge:0' shape= dtype=uint8>
TensorShape(None)
(250, 250, 1)

ValueError                                Traceback (most recent call last)
 in ()
----> 1 img_resize = tf.image.resize_images(image, [28,28])
/home/tianwei/anaconda2/lib/python2.7/site-packages/tensorflow/python/ops/image_ops_impl.pyc in resize_images(images, size, method, align_corners)
641   images = ops.convert_to_tensor(images, name='images')
642   if images.get_shape().ndims is None:
--> 643     raise ValueError(''images' contains no shape.')
644   # TODO(shlens): Migrate this functionality to the underlying Op's.
645   is_batch = True
ValueError: 'images' contains no shape.