How to have a "static" like variable inside a function

The StackOverflow website does not work for logging in. Sorry, I have to post my question here.
I want a simple test. A simple function F(x), inside which mean and variance are calculated from the input x. Meanwhile, I also want to keep two "static" like variables (like in C) avg_mean, avg_variance. So that every time F is called avg_mean and avg_variance are updated based on their previous values.
Also, I want to have two sets of "avg_mean, avg_variance" for different scopes. My test codes are as below, but the avg_mean and avg_variance are only the values calculated from the last call and does not include the influence from the first call. If I remove the two "reuse_variables()" lines, the program does not run.
Could anyone help what should I do? By the way, please help withOUT using tf.contrib libs please, because those are not fully supported in Windows now. Thank you.
import tensorflow as tf
def getsta(x):
print('getsta start...')
params_shape = [x.get_shape()[-1]]
decay=0.9
mean = tf.get_variable(
'mean', [1], tf.float32,
initializer=tf.constant_initializer(0.0, tf.float32))
variance = tf.get_variable(
'howvariance', [1], tf.float32,
initializer=tf.constant_initializer(1.0, tf.float32))
avg_mean = tf.get_variable(
'avg_mean', [1], tf.float32,
initializer=tf.constant_initializer(0.0, tf.float32))
avg_variance = tf.get_variable(
'avg_variance', [1], tf.float32,
initializer=tf.constant_initializer(0.0, tf.float32))
mean, variance = tf.nn.moments(x, [0], name='moments')
avg_mean -= (1.0 - decay) * (avg_mean - mean)
avg_variance -= (1.0 - decay) * (avg_variance - variance)
return x, mean, variance, avg_mean, avg_variance
def main(argv=None):
x1 = tf.constant([1,2,3,4], tf.float32)
x2 = tf.constant([5,6,7,8], tf.float32)
x3 = tf.constant([1,3,5,7], tf.float32)
x4 = tf.constant([4,8,12,16], tf.float32)
with tf.variable_scope("AAA") as scopeA:
y1, mean1, variance1, avg_mean1, avg_variance1 = getsta(x1)
scopeA.reuse_variables()
y1, mean1, variance1, avg_mean1, avg_variance1 = getsta(x2)
with tf.variable_scope("BBB") as scopeB:
y2, mean2, variance2, avg_mean2, avg_variance2 = getsta(x3)
scopeB.reuse_variables()
y2, mean2, variance2, avg_mean2, avg_variance2 = getsta(x4)
sess = tf.InteractiveSession()
sess.run(tf.global_variables_initializer())
print(sess.run([y1, mean1, variance1, avg_mean1, avg_variance1]))
print(sess.run([y2, mean2, variance2, avg_mean2, avg_variance2]))
if name == 'main':
tf.app.run(main=main)