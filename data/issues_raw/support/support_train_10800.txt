tf.cond should be evaluated lazily

It should be possible to statically analyze the following graph such that the execution of the one branch is stopped early if the other branch is determined to be chosen. Am I missing some different function in TensorFlow that allows to do this? Perhaps using control dependencies?
In the following code the identity matrix is multiplied many times and a placeholder threshold determines whether the second multiplication or the last is chosen as output of the graph.
import tensorflow as tf
import numpy as np
import timeit

N = 2048

x = tf.placeholder(tf.float32, [N,N])
t = tf.placeholder(tf.float32)
net = x
stop = None
for i in range(300):
  net = tf.matmul(net, net)
  if i == 1:
    stop = net

net = tf.cond(tf.reduce_sum(stop) < t, lambda: stop * 0., lambda: net)

sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))

r = None

start_time = timeit.default_timer()
for i in range(10):
  r = sess.run(net, feed_dict={x: np.eye(N), t: N})
print(r)
print(timeit.default_timer() - start_time)

start_time = timeit.default_timer()
for i in range(10):
  r = sess.run(net, feed_dict={x: np.eye(N), t: N + 1})
print(r)
print(timeit.default_timer() - start_time)

Both runs take roughly the same time even though the second run only depend on the first two matrix multiplications (at least if one accounts for the warm-up phase which give the first run a slight disadvantage).
I hope I am not missing something obvious. Thanks.