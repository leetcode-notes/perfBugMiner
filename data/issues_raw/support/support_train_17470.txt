how to get tuple for tensorflow in c++

Please go to Stack Overflow for help and support:
https://stackoverflow.com/questions/tagged/tensorflow
If you open a GitHub issue, here is our policy:

It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).
The form below must be filled out.
It shouldn't be a TensorBoard issue. Those go here.

Here's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):win10
TensorFlow installed from (source or binary):source
TensorFlow version (use command below):rc1.5
Python version: 3.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:8.0/7.1
GPU model and memory:Nvidia GT
Exact command to reproduce:

You can collect some of this information using our environment capture script:
https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh
You can obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
Describe the problem
Rewrite tracking code from python to c++.
I don't know how to get tuple in c++.
The python and c++ code as following:
Source code / logs
python code:
lstm2_outputs, state2 = tf.nn.dynamic_rnn(lstm2, lstm2_inputs, initial_state=state2, swap_memory=swap_memory)
state2 is a tuple,state2[0] has shape(1,1024),state2[1] has shape(1,1024).
c++ code:
Status run_status = session->Run({ { "Placeholder",place_ } ,{ "Placeholder_1",place1_ } ,{ "Placeholder_2",place2_ } ,{ "Placeholder_3",place3_ }  ,{ "Placeholder_4",place4_ }, { "Placeholder_5",place5_ } },output_tensor_names, {}, { &outputs });
output_tensor_names:re3/lstm1/rnn/transpose_1,re3/lstm2/rnn/transpose_1,
why outputs[0]'s shape is(1,1,1024),outputs[1]'s shape is(1,1,1024),I think they should be (2,1,1024) according the output of python.
The python is the original code which is absolutely,i think my c++ code goes wrong!
in python code:
feed_dict = {
self.imagePlaceholder : [croppedInput0, croppedInput1],
self.prevLstmState : lstmState,
self.batch_size : 1,
}
in c++ code ,i write it like this:
Status run_status = session->Run({ { "Placeholder",place_ } ,{ "Placeholder_1",place1_ } ,{ "Placeholder_2",place2_ } ,{ "Placeholder_3",place3_ }  ,{ "Placeholder_4",place4_ }, { "Placeholder_5",place5_ } },output_tensor_names, {}, { &outputs });
the shape is: place_ (2,227,227,3),place1_~place_4(1,1024),does the problem from here?
my model node is like ï¼š
node {
name: "Placeholder"
op: "Placeholder"
attr {
key: "dtype"
value {
type: DT_UINT8
}
}
attr {
key: "shape"
value {
shape {
dim {
size: -1
}
dim {
size: 227
}
dim {
size: 227
}
dim {
size: 3
}
}
}
}
}
node {
name: "Placeholder_1"
op: "Placeholder"
attr {
key: "dtype"
value {
type: DT_FLOAT
}
}
attr {
key: "shape"
value {
shape {
dim {
size: -1
}
dim {
size: 1024
}
}
}
}
}
node {
name: "Placeholder_2"
op: "Placeholder"
attr {
key: "dtype"
value {
type: DT_FLOAT
}
}
attr {
key: "shape"
value {
shape {
dim {
size: -1
}
dim {
size: 1024
}
}
}
}
}
some body know why?Give my great appreciation to you!