Numpy.FFT2() vs. TF.FFT2D() gives wrong values

What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?
None.
Environment info
Operating System:
Ubuntu 16.04 LTS
Installed version of CUDA and cuDNN:
(please attach the output of ls -l /path/to/cuda/lib/libcud*):
Toolkit-version 8.0
If installed from binary pip package, provide:
Installed it using pip install und Anaconda
If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)
# check if np.fft2d of TF.fft2d and NP have the same result

testimage = np.random.rand(256, 256)
testimage = testimage+0j

ft_testimage = np.fft.fft2(testimage)
np_result = np.sum(ft_testimage)
print(np_result)

tf_ft_testimage = tf.fft2d(testimage)
tf_result = np.sum(tf_ft_testimage.eval())
print(tf_result)

result_div = np.abs(tf_ft_testimage.eval())

plt.imshow(np.log(result_div))

print(np_result)
(56368.5840888+9.09494701773e-13j)

print(tf_result)
(56368.6+0.00390625j)


What other attempted solutions have you tried?
Logs or other output that would be helpful
I was encountering this problem, when I did some numerical calculations using the FFT. I simply ported one algorithm from pure python to Tensorflow and the result were not the same. I think one of the reasons could be the wrong interpretation of the FFT2D used in Tensorflow? Do I need to normalize it somehow? Is the usage somehow different compared to Numpy?
Thanks a lot!