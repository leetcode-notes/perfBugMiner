Tensorflow 1.4 Keras issue with respect to model_fn

I have a model function which accepts Features, targets and mode but when I add tf.keras layers I'm currently getting Exception pred must be a Tensor, a Variable, or a Python bool.
But, When I run the same code with out using tf.keras but directly from keras(i.e. from keras.layers), It's working.
Code :
def model_fn(features, labels, mode):

    if mode == tf.estimator.ModeKeys.TRAIN:
        tf.keras.backend.set_learning_phase(1)
    else:
        tf.keras.backend.set_learning_phase(0)

    input_feature = features['x']
    table = lookup.index_table_from_file(vocabulary_file='vocab.txt', num_oov_buckets=1, default_value=-1)
    text = tf.squeeze(input_feature, [1])
    words = tf.string_split(text)
    densewords = tf.sparse_tensor_to_dense(words, default_value=PADWORD)
    numbers = table.lookup(densewords)
    padding = tf.constant([[0, 0], [0, MAX_FEATURES]])
    padded = tf.pad(numbers, padding)
    sliced = tf.slice(padded, [0, 0], [-1, MAX_FEATURES])
    print('words_sliced={}'.format(words))

    #embeds = tf.keras.layers.Embedding(MAX_FEATURES, 50, input_length=MAX_FEATURES)(sliced)
    embeds = tf.contrib.layers.embed_sequence(sliced, vocab_size=MAX_FEATURES, embed_dim=50)
    print('words_embed={}'.format(embeds))

    f1 = tf.keras.layers.Dropout(0.2)(embeds)
    f1 = tf.keras.layers.Conv1D(filters, kernel_size, padding='valid', activation='relu', strides=1)(f1)
    f1 = tf.keras.layers.GlobalAveragePooling1D()(f1)
    # f1 = layers.BatchNormalization()(f1)
    f1 = tf.keras.layers.Dense(hidden_dims)(f1)
    f1 = tf.keras.layers.Dropout(0.5)(f1)
    f1 = tf.keras.layers.Activation('relu')(f1)
    logits = tf.keras.layers.Dense(11)(f1)

    predictions_dict = {
        'class': tf.argmax(logits, 1),
        'prob': tf.nn.softmax(logits)
    }

    prediction_output = tf.estimator.export.PredictOutput({"classes": tf.argmax(input=logits, axis=1),
                                                           "probabilities": tf.nn.softmax(logits,
                                                                                          name="softmax_tensor")})

    if mode == tf.estimator.ModeKeys.PREDICT:
        return tf.estimator.EstimatorSpec(mode=mode, predictions=predictions_dict, export_outputs={
            tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY: prediction_output
        })

    # one_hot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=11)
    loss = tf.losses.sparse_softmax_cross_entropy(labels, logits=logits)

    if mode == tf.contrib.learn.ModeKeys.TRAIN:
        train_op = tf.contrib.layers.optimize_loss(loss, tf.contrib.framework.get_global_step(), optimizer='Adam',
                                                   learning_rate=0.001)
        return tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)

    eval_metrics_ops = {
        'accuracy': tf.metrics.accuracy(labels=labels, predictions=predictions_dict['class'])
    }
    return tf.estimator.EstimatorSpec(mode=mode, loss=loss, eval_metric_ops=eval_metrics_ops)
Exception:
File "D:/PyCharm-Workspace/Keras-Exp/finance-complaints/tensorflow/tf_finance_complaints.py", line 149, in 
finance_classifier.train(input_fn=lambda: input_fn('dataset/train.csv', batch_size=32, repeat_count=5, shuffle=True))
File "E:\Programs\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\estimator\estimator.py", line 302, in train
loss = self._train_model(input_fn, hooks, saving_listeners)
File "E:\Programs\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\estimator\estimator.py", line 711, in _train_model
features, labels, model_fn_lib.ModeKeys.TRAIN, self.config)
File "E:\Programs\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\estimator\estimator.py", line 694, in _call_model_fn
model_fn_results = self._model_fn(features=features, **kwargs)
File "D:/PyCharm-Workspace/Keras-Exp/finance-complaints/tensorflow/tf_finance_complaints.py", line 108, in model_fn
f1 = tf.keras.layers.Dropout(0.2)(embeds)
File "E:\Programs\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\keras_impl\keras\engine\topology.py", line 252, in call
output = super(Layer, self).call(inputs, **kwargs)
File "E:\Programs\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\layers\base.py", line 575, in call
outputs = self.call(inputs, *args, **kwargs)
File "E:\Programs\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\keras_impl\keras\layers\core.py", line 118, in call
output = super(Dropout, self).call(inputs, training=training)
File "E:\Programs\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\layers\core.py", line 300, in call
lambda: array_ops.identity(inputs))
File "E:\Programs\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\layers\utils.py", line 203, in smart_cond
pred_value = constant_value(pred)
File "E:\Programs\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\layers\utils.py", line 233, in constant_value
raise TypeError('pred must be a Tensor, a Variable, or a Python bool.')
TypeError: pred must be a Tensor, a Variable, or a Python bool.