Problems with `raw_rnn` with dynamic dimensions

I am trying to implement the pointing softmax in TF 1.1 and I am using raw_rnn but I get an error. Since is hard to explain the whole thing, here is how to reproduce it:
$ git clone https://github.com/petrux/LiTeFlow.git
$ cd LiTeFlow
$ git checkout broken
$ ./bin/py3venv.sh
$ source .py3venv/bin/activate
$ python3 -m unittest liteflow.tests.test_layers._TestSmoke
the error that I have is:
petrux@orion:~/Projects/LiTeFlow$ python3 -m unittest liteflow.tests.test_layers._TestSmoke
./usr/local/lib/python3.5/dist-packages/tensorflow/python/util/deprecation.py:212: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead
  arg_spec = inspect.getargspec(func)
/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/keras/python/keras/backend.py:3593: ResourceWarning: unclosed file <_io.TextIOWrapper name='/home/petrux/.keras/keras.json' mode='r' encoding='UTF-8'>
  _config = json.load(open(_config_path))
/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/labeled_tensor/python/ops/_typecheck.py:233: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead
  spec = inspect.getargspec(f)
elements_finished: Tensor("PointingDecoder_1_1/rnn/GreaterEqual:0", shape=(?,), dtype=bool)
next_cell_input: Tensor("PointingDecoder_1_1/rnn/concat:0", shape=(?, ?), dtype=float32)
next_cell_state: Tensor("GRUCellZeroState/zeros:0", shape=(?, 5), dtype=float32)
emit_output: Tensor("zeros:0", shape=(?, ?), dtype=float32)
next_loop_state: (<tf.Tensor 'PointingDecoder_1_1/rnn/LocationSoftmax_1/softmax/truediv:0' shape=(?, ?) dtype=float32>, <tf.Tensor 'PointingDecoder_1_1/rnn/LocationSoftmax_1/Sum:0' shape=(?, 4) dtype=float32>)

E
======================================================================
ERROR: test_smoke (liteflow.tests.test_layers._TestSmoke)
Build a pointer decoder and test that it works.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/array_ops.py", line 1356, in zeros
    shape = tensor_shape.as_shape(shape)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_shape.py", line 800, in as_shape
    return TensorShape(shape)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_shape.py", line 436, in __init__
    self._dims = [as_dimension(d) for d in dims_iter]
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_shape.py", line 436, in <listcomp>
    self._dims = [as_dimension(d) for d in dims_iter]
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_shape.py", line 378, in as_dimension
    return Dimension(value)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_shape.py", line 33, in __init__
    self._value = int(value)
TypeError: int() argument must be a string, a bytes-like object or a number, not 'Tensor'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/petrux/Projects/LiTeFlow/liteflow/tests/test_layers.py", line 518, in test_smoke
    output = decoder()
  File "/home/petrux/Projects/LiTeFlow/liteflow/layers.py", line 616, in __call__
    return super(PointingDecoder, self).__call__()
  File "/home/petrux/Projects/LiTeFlow/liteflow/layers.py", line 147, in __call__
    result = self._call_helper(*args, **kwargs)
  File "/home/petrux/Projects/LiTeFlow/liteflow/layers.py", line 610, in _call_helper
    outputs_ta, _, _ = tf.nn.raw_rnn(self._decoder_cell, self._loop_fn)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/rnn.py", line 965, in raw_rnn
    for size_i, dtype_i in zip(flat_emit_size, flat_emit_dtypes)]
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/rnn.py", line 965, in <listcomp>
    for size_i, dtype_i in zip(flat_emit_size, flat_emit_dtypes)]
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/array_ops.py", line 1359, in zeros
    shape = ops.convert_to_tensor(shape, dtype=dtypes.int32, name="shape")
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py", line 639, in convert_to_tensor
    as_ref=False)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py", line 704, in internal_convert_to_tensor
    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/array_ops.py", line 905, in _autopacking_conversion_function
    return _autopacking_helper(v, inferred_dtype, name or "packed")
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/array_ops.py", line 867, in _autopacking_helper
    constant_op.constant(elem, dtype=dtype, name=str(i)))
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/constant_op.py", line 102, in constant
    tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape, verify_shape=verify_shape))
  File "/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_util.py", line 360, in make_tensor_proto
    raise ValueError("None values not supported.")
ValueError: None values not supported.

----------------------------------------------------------------------
Ran 2 tests in 0.430s

FAILED (errors=1)
EDIT a working implementation is here.