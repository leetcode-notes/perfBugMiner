Streaming accuracy and recall aren't working as expected

Environment info
Ubuntu 16.04
Cuda 8.0
Cudnn 5.1

The commit hash (git rev-parse HEAD)
c56c873
The output of bazel version
Build label: 0.4.4
Build target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar
Build time: Wed Feb 1 18:54:21 2017 (1485975261)
Build timestamp: 1485975261
Build timestamp as int: 1485975261

Here is my code:
weights = {'first': tf.Variable(tf.random_normal([1, 3, 1, 10])),
           'iterated': tf.Variable(tf.random_normal([1, 3, 10, 10])),
           'out': tf.Variable(tf.random_normal([embedding_dim*10, n_classes]))}

biases = {'first': tf.Variable(tf.random_normal([10])),
          'iterated': tf.Variable(tf.random_normal([10])),
          'out': tf.Variable(tf.random_normal([n_classes]))}

preds, cost = model(x, y, weights, biases, dropout, depth_tensor)

optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)

accuracy, update_accuracy = streaming_accuracy(y, preds)
recall, update_recall = streaming_recall(y, preds)

init = tf.global_variables_initializer()
init2 = tf.local_variables_initializer()

with tf.Session() as sess:
    sess.run(init)
    i = 1
    
    for batch_x, batch_y in data_processor(data, train_inds, embedding, label_processor, n_iter):
        sess.run(optimizer, 
                 feed_dict={x: batch_x, y: batch_y, 
                            dropout: dropout_prob})
        
        if i % display_step == 0:
            loss = sess.run(cost, 
                            feed_dict={x: batch_x, y: batch_y, dropout: dropout_prob})
            
            print("Iter:{}, Minibatch Loss:{:.6f}".format(i,loss))
        i += 1
    
    sess.run(init2)
    for batch_x, batch_y in data_processor(data, val_inds, embedding, label_processor, n_iter):
        recall, accuracy = sess.run([update_recall, update_accuracy], 
                                    feed_dict={x:batch_x, y: batch_y, dropout: 1})
        
        f1 = 2 * recall * accuracy / (recall + accuracy)
    
    print("Testing Accuracy:", accuracy,"Testing Recall:", recall, "Testing F1 Score:", f1) 

Output:
Iter:100, Minibatch Loss:18038.144531
Iter:200, Minibatch Loss:11628.046875
Iter:300, Minibatch Loss:9288.974609
Iter:400, Minibatch Loss:4583.474121
Iter:500, Minibatch Loss:6600.524902
...
Iter:11700, Minibatch Loss:4.203137
Iter:11800, Minibatch Loss:3.623320
Iter:11900, Minibatch Loss:4.883300
Iter:12000, Minibatch Loss:3.045975
Testing Accuracy: 0.0 Testing Recall: 0.00211863 Testing F1 Score: 0.0