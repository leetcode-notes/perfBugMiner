print out 'nan' for simple linear regression model

root@1cf079dc9729:~/src# python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
('v1.2.0-5-g435cdfc', '1.2.1')

The source code is very simple and it is from: https://www.tensorflow.org/get_started/get_started
import numpy as np
import tensorflow as tf

# Model parameters
W = tf.Variable([.3], dtype=tf.float32)
b = tf.Variable([-.3], dtype=tf.float32)
# Model input and output
x = tf.placeholder(tf.float32)
linear_model = W * x + b
y = tf.placeholder(tf.float32)
# loss
loss = tf.reduce_sum(tf.square(linear_model - y)) # sum of the squares
# optimizer
optimizer = tf.train.GradientDescentOptimizer(0.01)
train = optimizer.minimize(loss)
# training data
x_train = [1,2,3,4,35]
y_train = [0,-1,-2,-3,-34]
# training loop
init = tf.global_variables_initializer()
sess = tf.Session()
sess.run(init) # reset values to wrong
for i in range(1000):
  sess.run(train, {x:x_train, y:y_train})

#x_test = [5, 100, 345] #[5,100,345,-99.66]
#y_test = [-4, -99, -344] #[-4,-99,-344,-101.66]
# evaluate training accuracy
curr_W, curr_b, curr_loss = sess.run([W, b, loss], {x:x_train, y:y_train})
print("W: %s b: %s loss: %s"%(curr_W, curr_b, curr_loss))

the output:
W: [ nan] b: [ nan] loss: nan

if i delete the last element for training data:
x_train = [1,2,3,4]
y_train = [0,-1,-2,-3]

the output is right:
W: [-0.9999969] b: [ 0.99999082] loss: 5.69997e-11