C API, SIGABRT abort, Non-OK-status: RegisterAlreadyLocked, Invalid name.

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Working with public C API.
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
MacOS 10.13.2 (17C88)
TensorFlow installed from (source or binary):
binary
TensorFlow version (use command below):
libtensorflow 1.4.1 (from brew package)
Python version:
non
Bazel version (if compiling from source):
non
GCC/Compiler version (if compiling from source):
Apple Swift version 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2), lldb-900.0.64, Swift-4.0
CUDA/cuDNN version:
non
GPU model and memory:
non
Exact command to reproduce:
Using swift code as example (https://github.com/Octadero/Example).

Describe the problem
Dear TensorFlow community,
It is really strange issue, from time to time at the same code, I have SIGABRT crash.
2018-01-05 21:03:55.627002: F tensorflow/core/framework/op.cc:165] Non-OK-status: RegisterAlreadyLocked(deferred_[i]) status: Invalid argument: Invalid name: {\242	ï¿½
(lldb) bt
* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGABRT
    frame #0: 0x00007fff528f7e3e libsystem_kernel.dylib`__pthread_kill + 10
    frame #1: 0x0000000108cd41b4 libsystem_pthread.dylib`pthread_kill + 333
    frame #2: 0x00007fff52854312 libsystem_c.dylib`abort + 127
    frame #3: 0x0000000108e600c0 libtensorflow_framework.so`tensorflow::internal::LogMessageFatal::~LogMessageFatal() + 32
    frame #4: 0x0000000108e600d0 libtensorflow_framework.so`tensorflow::internal::LogMessageFatal::~LogMessageFatal() + 16
    frame #5: 0x0000000108d28676 libtensorflow_framework.so`tensorflow::OpRegistry::MustCallDeferred() const + 406
    frame #6: 0x0000000108d2819d libtensorflow_framework.so`tensorflow::OpRegistry::LookUp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, tensorflow::OpRegistrationData const**) const + 61
    frame #7: 0x0000000108d0c875 libtensorflow_framework.so`tensorflow::FunctionLibraryDefinition::LookUp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, tensorflow::OpRegistrationData const**) const + 117
    frame #8: 0x0000000108d27b0a libtensorflow_framework.so`tensorflow::OpRegistryInterface::LookUpOpDef(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, tensorflow::OpDef const**) const + 42
    frame #9: 0x0000000108d81b65 libtensorflow_framework.so`tensorflow::Graph::AddNode(tensorflow::NodeDef const&, tensorflow::Status*) + 69
    frame #10: 0x0000000108d8177a libtensorflow_framework.so`tensorflow::Graph::Graph(tensorflow::OpRegistryInterface const*) + 458
    frame #11: 0x00000001004f7d73 libtensorflow.so`TF_NewGraph + 51
  * frame #12: 0x00000001066b739d CAPI`newGraph() at Graph.swift:26
    frame #13: 0x00000001063021b3 TensorFlowKit`Graph.init() at Graph.swift:36
    frame #14: 0x000000010630214a TensorFlowKit`Graph.__allocating_init() at Graph.swift:0
    frame #15: 0x0000000106500f2d TensorFlowKit`static SavedModel.load(exportPath="/Users/Volodymyr/Projects/Examples/03_Reinforcement/Resources/save/", tags=1 value, options=0x00000001098e35d0, self=TensorFlowKit.SavedModel) at SavedModel.swift:221
    frame #16: 0x00000001000069f4 03_Reinforcement`static Network.loadGraph(self=_3_Reinforcement.Network) at Network.swift:146
    frame #17: 0x0000000100003428 03_Reinforcement`Network.init() at Network.swift:73
    frame #18: 0x0000000100002e4c 03_Reinforcement`Network.__allocating_init() at Network.swift:0
    frame #19: 0x0000000100008656 03_Reinforcement`main at main.swift:32
    frame #20: 0x00007fff527a8115 libdyld.dylib`start + 1
    frame #21: 0x00007fff527a8115 libdyld.dylib`start + 1

Sanitizer options can't help to resolve that issue. List of libs loaded in attached file.
dyld_log.txt
Source code / logs
Using C API I am alloc new Graph by TF_NewGraph()