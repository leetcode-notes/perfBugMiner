Minor instruction issue in functional_ops.py/scan

I had been using functional_ops.py/scan for implementing RNNs.
I've just checked the instruction, and think this is little bit wrong.
In master branch, from line 419 in functional_ops.py, it says
  Args:
    fn: The callable to be performed.  It accepts two arguments.  The first
      will have the same (possibly nested) structure as `elems`.  The second
      will have the same structure as `initializer` if one is provided,
      otherwise it will have the same structure as `elems`.  Its output
      must have the same structure as `initializer` if one is provided,
      otherwise it must have the same structure as `elems`.

.
But actually the first argument of fn should have the same structure as initializer,
and the second should have the same structure as elems.
As we can see this in few examples just below, from line 448,
  Examples:
    ```python
    elems = np.array([1, 2, 3, 4, 5, 6])
    sum = scan(lambda a, x: a + x, elems)
    # sum == [1, 3, 6, 10, 15, 21]
    ```
    ```python
    elems = np.array([1, 2, 3, 4, 5, 6])
    initializer = np.array(0)
    sum_one = scan(
        lambda a, x: x[0] - x[1] + a, (elems + 1, elems), initializer)
    # sum_one == [1, 2, 3, 4, 5, 6]
    ```
    ```python
    elems = np.array([1, 0, 0, 0, 0, 0])
    initializer = (np.array(0), np.array(1))
    fibonaccis = scan(lambda a, _: (a[1], a[0] + a[1]), elems, initializer)
    # fibonaccis == ([1, 1, 2, 3, 5, 8], [1, 2, 3, 5, 8, 13])
    ```

, the instruction is slightly wrong.