Potential resource leaks caused by unclear Java examples

System information
Java examples at https://www.tensorflow.org/ for tensorflow 1.6.0.
Describe the problem
org.tensorflow.Session.Runner.run() returns list of closables, Javadoc clearly states that the caller is responsible to free all of them. None of the Java examples I found at https://www.tensorflow.org/ highlights that, I realized it by happy accident during in-depth reading implementation in Session.java quite long time after I wrote my code that uses TensorFlow.
    /**
     * Execute the graph fragments necessary to compute all requested fetches.
     *
     * <p><b>WARNING:</b> The caller assumes ownership of all returned {@link Tensor}s, i.e., the
     * caller must call {@link Tensor#close()} on all elements of the returned list to free up
     * resources.
     *
     * ...
     */
    public List<Tensor<?>> run() {
      return runHelper(false).outputs;
    }

I'm not sure if the examples them-self contain any resource leak or not, they free only the first element of the list, but there may be more of them (in general). I would expect an explicit loop properly freeing all the returned resources there.
Such examples for beginners should be as explicit as possible, 100% clear and understandable for anyone. A lot of people (like me) base core of their code on them which may easily introduce significant resource leak bugs to their applications.

https://www.tensorflow.org/install/install_java, HelloTF example
https://www.tensorflow.org/install/install_java, referenced advanced example LabelImage
https://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/java/src/main/java/org/tensorflow/examples/LabelImage.java

Source code / logs
None.