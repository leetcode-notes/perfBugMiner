Feature request: convenience functions for getting variables from scopes

There does not currently seem to be a good way to get a collection of variables that belong to a given scope. I've seen issue #7295, but the answer given by Yaroslav (at http://stackoverflow.com/questions/42073239/tf-get-collection-to-extract-variables-of-one-scope) does not nest:
import tensorflow as tf

def bar():
  with tf.variable_scope("bar") as scope:
    x = tf.Variable(0, name="x")
    print list(map(str, tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=scope.name)))
    print list(map(str, tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=scope.name + "/")))
  print list(map(str, tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope="bar")))

def foo():
  with tf.variable_scope("foo") as scope:
    with tf.variable_scope("bar_") as scope:
      y = tf.Variable(0, name="y")
    bar()

with tf.Graph().as_default():
  bar()
print
with tf.Graph().as_default():
  foo()
The snippet above outputs (on TF 1.0):
['Tensor("bar/x/read:0", shape=(), dtype=int32)']
['Tensor("bar/x/read:0", shape=(), dtype=int32)']
['Tensor("bar/x/read:0", shape=(), dtype=int32)']

['Tensor("foo/bar_/y/read:0", shape=(), dtype=int32)', 'Tensor("foo/bar/x/read:0", shape=(), dtype=int32)']
['Tensor("foo/bar/x/read:0", shape=(), dtype=int32)']
[]

The output shows that wrapping the scope "bar" in another scope ("foo") breaks Yaroslav's proposal of using tf.get_collection(..., "bar"). It also breaks tf.get_collection(..., scope.name) by including variables from outside the scope. The only version that works regardless of context is tf.get_collection(..., scope.name + "/"), which is ugly and too informed.
It would be great to have scope.trainable_variables(), or scope.get_collection(...), or even tf.get_collection(..., scope).