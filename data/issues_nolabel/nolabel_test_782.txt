Adds GPU CUDA kernel for scatter ops

This adds GPU CUDA kernels for scatter_add, scatter_sub, and scatter_update.
Testing on a local machine with a weak graphics card already shows good improvement.  For about 20M floats, split as a 2Mx10 matrix, 1M size for idx, the op on a weak 3-core GPU is about twice as fast as on a 12-core CPU.  On very small data sets (1000 floats) the GPU code seems a bit slower (20%).
Some notes:

range checking in CUDA kernel currently not implemented.  It's not possible to include OpKernelContext since it includes protos hence nvcc fails to compile.  I can do it as a method in the .h/.cc files.  However, it seems rather inefficient as for low-dimensional input it is basically as slow as doing the entire scatter op sequentially on CPU.  Would it make sense to run the entire kernel, ignore bad indices, and report after?  This does mean the parameters may be updated when the code does fail because the modifications are happening in place.  Advice?
There's a weird bug in scatter_op_gpu.cu.cc where I cannot use TF_CALL_GPU_NUMBER_TYPES.  I suspect it has to do with the defined(__ANDROID__) magic in register_types.h interacting badly with nvcc, but cannot confirm.