padded_batch fails on nested shapes

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux, fully updated
TensorFlow installed from (source or binary): Source
TensorFlow version (use command below): v1.3.0-rc1-4086-g028809769d 1.4.0-rc1
Python version: 3.6.3
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source): gcc (GCC) 7.2.0
CUDA/cuDNN version: cuda 9.0.176-4 cuDNN 7.0.3-1
GPU model and memory: N/A
Exact command to reproduce:

Describe the problem
Trying to use tf.data.Dataset.padded_batch fails with type error for any nested shape
see stack overflow question
Source code / logs
import tensorflow as tf
def generator():
    while 1:
        yield [[[1]*3 for y in range(32)] for x in range(32)],[[[0]*cnum for y in range(1)]for x in range(1)]
dataset = tf.data.Dataset.from_generator(generator,tf.float32)
shapes = (tf.TensorShape([None,None,None,3]),tf.TensorShape([None,5]))
batch = dataset.padded_batch(1,shapes)

note: I'm not sure if the additional None dimension representing batch should be added to the generator or not but this code does reproduce the error I'm having.
Traceback (most recent call last):
  File "/usr/lib/python3.6/site-packages/tensorflow/python/data/ops/dataset_ops.py", line 1263, in _partial_shape_to_tensor
    shape_like = tensor_shape.as_shape(shape_like)
  File "/usr/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py", line 849, in as_shape
    return TensorShape(shape)
  File "/usr/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py", line 455, in __init__
    self._dims = [as_dimension(d) for d in dims_iter]
  File "/usr/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py", line 455, in <listcomp>
    self._dims = [as_dimension(d) for d in dims_iter]
  File "/usr/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py", line 397, in as_dimension
    return Dimension(value)
  File "/usr/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py", line 32, in __init__
    self._value = int(value)
TypeError: int() argument must be a string, a bytes-like object or a number, not 'TensorShape'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/lib/python3.6/site-packages/tensorflow/python/data/ops/dataset_ops.py", line 710, in padded_batch
    return PaddedBatchDataset(self, batch_size, padded_shapes, padding_values)
  File "/usr/lib/python3.6/site-packages/tensorflow/python/data/ops/dataset_ops.py", line 1309, in __init__
    input_dataset.output_shapes, _partial_shape_to_tensor, padded_shapes)
  File "/usr/lib/python3.6/site-packages/tensorflow/python/data/util/nest.py", line 519, in map_structure_up_to
    results = [func(*tensors) for tensors in zip(*all_flattened_up_to)]
  File "/usr/lib/python3.6/site-packages/tensorflow/python/data/util/nest.py", line 519, in <listcomp>
    results = [func(*tensors) for tensors in zip(*all_flattened_up_to)]
  File "/usr/lib/python3.6/site-packages/tensorflow/python/data/ops/dataset_ops.py", line 1271, in _partial_shape_to_tensor
    return ops.convert_to_tensor(shape_like, dtype=dtypes.int64)
  File "/usr/lib/python3.6/site-packages/tensorflow/python/framework/ops.py", line 887, in convert_to_tensor
    as_ref=False)
  File "/usr/lib/python3.6/site-packages/tensorflow/python/framework/ops.py", line 977, in internal_convert_to_tensor
    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
  File "/usr/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py", line 233, in _constant_tensor_conversion_function
    return constant(v, dtype=dtype, name=name)
  File "/usr/lib/python3.6/site-packages/tensorflow/python/framework/constant_op.py", line 212, in constant
    value, dtype=dtype, shape=shape, verify_shape=verify_shape))
  File "/usr/lib/python3.6/site-packages/tensorflow/python/framework/tensor_util.py", line 399, in make_tensor_proto
    _AssertCompatible(values, dtype)
  File "/usr/lib/python3.6/site-packages/tensorflow/python/framework/tensor_util.py", line 314, in _AssertCompatible
    (dtype.name, repr(mismatch), type(mismatch).__name__))
TypeError: Expected int64, got TensorShape([Dimension(None), Dimension(None), Dimension(None), Dimension(3)]) of type 'TensorShape' instead.