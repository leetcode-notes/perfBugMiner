Feature Request: keepdims option for tf.boolean_mask()

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): N/A
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): N/A
TensorFlow installed from (source or binary): N/A
TensorFlow version (use command below): ('v1.6.0-0-gd2e24b6039', '1.6.0')
Python version: Python 2.7.14
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: N/A

Describe the problem
tf.boolean_mask() currently grabs individual elements from the input tensor according to the shape and content of the boolean mask argument (see https://www.tensorflow.org/api_docs/python/tf/boolean_mask). The returning tensor's dimensionality is always lower than or equal to the input tensor. It would be very useful if tf.boolean_mask() included an additional, optional boolean argument keepdims. If keepdims=False, the behavior of the method is unchanged. If keepdims=True, the output tensor would have the same dimensionality as the input tensor. This would allow 'filtering out' of certain values from the input, while keeping its overall shape as much as possible (see example below).
Source code / logs
tensor = [[1, 2], [3, 4], [5, 6]]
mask = np.array([[True, False],[False, True],[False, True]])
boolean_mask(tensor, mask, keepdims=False)  # [1, 4, 6]
boolean_mask(tensor, mask, keepdims=True) # [[1],[4],[6]]

mask = np.array([[True, False],[False, True],[False, False]])
boolean_mask(tensor, mask, keepdims=False)  # [1, 4]
boolean_mask(tensor, mask, keepdims=True) # [[1],[4]]