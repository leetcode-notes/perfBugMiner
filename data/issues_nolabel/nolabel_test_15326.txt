`import_scoped_meta_graph ()` use wrong name scope and fails to restore the collections

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 1.4.1
Python version: 3.6.3
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: N/A

Describe the problem
This is a tiny code occurs the problem. In this code, import_scoped_meta_graph_def() create the different variables s/v and s_1/v but returns only s/v.
import tensorflow as tf
from tensorflow.python.framework import meta_graph

tf.Variable(0, name='v')
meta_graph_def, _ = meta_graph.export_scoped_meta_graph()

for i in range(2):
    var_list = meta_graph.import_scoped_meta_graph(meta_graph_def,
                                                   import_scope='s')
    print(i, ':', var_list)
    print('----------------------')
    for op in tf.get_default_graph().get_operations():
        print(op.name)
    print()
stdout:
0 : {'v:0': <tf.Variable 's/v:0' shape=() dtype=int32_ref>}
----------------------
v/initial_value
v
v/Assign
v/read
s/v/initial_value
s/v
s/v/Assign
s/v/read

1 : {'v:0': <tf.Variable 's/v:0' shape=() dtype=int32_ref>}
----------------------
v/initial_value
v
v/Assign
v/read
s/v/initial_value
s/v
s/v/Assign
s/v/read
s_1/v/initial_value
s_1/v
s_1/v/Assign
s_1/v/read

This problem occurs when the name scope created by import_graph_def() inside import_scoped_meta_graph_def() does not match  the argument import_scope.

  
    
      tensorflow/tensorflow/python/framework/meta_graph.py
    
    
        Lines 658 to 663
      in
      438604f
    
    
    
    

        
          
           importer.import_graph_def( 
        

        
          
               input_graph_def, name=(import_scope or ""), input_map=input_map, 
        

        
          
               producer_op_list=producer_op_list) 
        

        
          
            
        

        
          
           scope_to_prepend_to_names = "/".join( 
        

        
          
               [part for part in [graph.get_name_scope(), import_scope] if part])