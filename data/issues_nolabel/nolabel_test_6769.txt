TF Learn TypeError: DataType float64 for attr 'T' not in list of allowed values: float32, float16

NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.
For general support from the community, see StackOverflow.
To make bugs and feature requests more easy to find and organize, we close issues that are deemed
out of scope for GitHub Issues and point people to StackOverflow.
For bugs or installation issues, please provide the following information.
The more information you provide, the more easily we will be able to offer
help and advice.
What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?
tf.cast()
Environment info
Operating System:
masOSSierra
jupyter notebook
tensforflow v0.12.1
Installed version of CUDA and cuDNN:
(please attach the output of ls -l /path/to/cuda/lib/libcud*):
No
If installed from binary pip package, provide:

A link to the pip package you installed: pip install tensorflow
The output from python -c "import tensorflow; print(tensorflow.__version__)".tensforflow v0.12.1

If installed from source, provide

The commit hash (git rev-parse HEAD)
The output of bazel version

If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)
I try to run the examples of MNIST from this repository with tensorflow learn, but to read in data with Pandas and use sklearn StrandardScale to scale the data beforehand.
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/learn/mnist.py
What other attempted solutions have you tried?
try to cast DataFrame into float32 with
X_train = X_train.astype(np.float32)
try to cast each column with
tf.cast(col, tf.float32)
but after use feature_columns = learn.infer_real_valued_columns_from_input(X_train)
feature_columns dtype just turn to tf.float64
(tried and didn't find attribute from source code that I can change dtype here)
Logs or other output that would be helpful
(If logs are large, please upload as attachment or provide link).

TypeError                                 Traceback (most recent call last)
 in ()
----> 1 classifier.fit(X_train, y_train, batch_size=100, steps=20000) #, monitors=[validation_monitor])
/usr/local/lib/python2.7/site-packages/tensorflow/python/util/deprecation.pyc in new_func(*args, **kwargs)
189             _call_location(), decorator_utils.get_qualified_name(func),
190             func.module, arg_name, date, instructions)
--> 191       return func(*args, **kwargs)
192     new_func.doc = _add_deprecated_arg_notice_to_docstring(
193         func.doc, date, instructions)
/usr/local/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)
353                              steps=steps,
354                              monitors=monitors,
--> 355                              max_steps=max_steps)
356     logging.info('Loss for final step: %s.', loss)
357     return self
/usr/local/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _train_model(self, input_fn, steps, feed_fn, init_op, init_feed_fn, init_fn, device_fn, monitors, log_every_steps, fail_on_nan_loss, max_steps)
697       # cases, but will soon be deleted after the subclasses are updated.
698       # TODO(b/32664904): Update subclasses and delete the else-statement.
--> 699       train_ops = self._get_train_ops(features, labels)
700       if isinstance(train_ops, model_fn_lib.ModelFnOps):  # Default signature
701         train_op = train_ops.train_op
/usr/local/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _get_train_ops(self, features, labels)
1050       ModelFnOps object.
1051     """
-> 1052     return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)
1053
1054   def _get_eval_ops(self, features, labels, metrics):
/usr/local/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _call_model_fn(self, features, labels, mode)
1019                                           params=self.params)
1020       else:
-> 1021         model_fn_results = self._model_fn(features, labels, mode=mode)
1022     else:
1023       model_fn_results = self._model_fn(features, labels)
 in conv_model(feature, target, mode)
10                                     activation_fn=tf.nn.relu)
11
---> 12         h_pool1 = max_pool_2x2(h_conv1)
13
14     with tf.variable_scope('conv_layer2'):
 in max_pool_2x2(tensor_in)
1 def max_pool_2x2(tensor_in):
----> 2     return tf.nn.max_pool(tensor_in, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')
/usr/local/lib/python2.7/site-packages/tensorflow/python/ops/nn_ops.pyc in max_pool(value, ksize, strides, padding, data_format, name)
1615                                 padding=padding,
1616                                 data_format=data_format,
-> 1617                                 name=name)
1618
1619
/usr/local/lib/python2.7/site-packages/tensorflow/python/ops/gen_nn_ops.pyc in _max_pool(input, ksize, strides, padding, data_format, name)
1596   result = _op_def_lib.apply_op("MaxPool", input=input, ksize=ksize,
1597                                 strides=strides, padding=padding,
-> 1598                                 data_format=data_format, name=name)
1599   return result
1600
/usr/local/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.pyc in apply_op(self, op_type_name, name, **keywords)
580             for base_type in base_types:
581               _SatisfiesTypeConstraint(base_type,
--> 582                                        _Attr(op_def, input_arg.type_attr))
583             attrs[input_arg.type_attr] = attr_value
584             inferred_from[input_arg.type_attr] = input_name
/usr/local/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.pyc in _SatisfiesTypeConstraint(dtype, attr_def)
58           "DataType %s for attr '%s' not in list of allowed values: %s" %
59           (dtypes.as_dtype(dtype).name, attr_def.name,
---> 60            ", ".join(dtypes.as_dtype(x).name for x in allowed_list)))
61
62
TypeError: DataType float64 for attr 'T' not in list of allowed values: float32, float16
Many thanks.