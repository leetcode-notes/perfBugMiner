tf.flags.DEFINE_boolean is broken for flags containing dashes

tf.flags.DEFINE_boolean does not replace dashes with underscores when adding the negated flag, which results in a bug for flags containing dashes.
Environment info
Operating System: Mac OSX 10.11.5
Pip Package: https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0rc0-py3-none-any.whl
TensorFlow Version: 0.9.0rc0
Steps to reproduce

foo.py:

import tensorflow as tf

tf.flags.DEFINE_boolean('foo-bar', True, "Foo Bar")
tf.flags.FLAGS._parse_flags()
print(tf.flags.FLAGS.__flags)
What have you tried?

$ python foo.py: {'foo_bar': True, 'foo-bar': True}
$ python foo.py --foo-bar: {'foo_bar': True, 'foo-bar': True}
$ python foo.py --nofoo-bar: {'foo_bar': True, 'foo-bar': False}

In the last example it is impossible to get the False value of the flag, tf.flags.FLAGS.foo-bar results in an AttributeError, because the dash is interpreted as a minus and FLAGS.foo does not exist.
In order to support flags with dashes, Python's argparse replaces dashes with underscores (docs, code).
Fixing this bug should be as simple as substituting flag_name with flag_name.replace('-', '_') in https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/platform/flags.py#L106, but I haven't tested this yet.