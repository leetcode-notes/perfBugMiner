Dynamic use of tensorflow.python.ops.array_ops.space_to_batch

When calling "tensorflow.python.ops.array_ops.space_to_batch" in Python I need to specify the padding at compile time. In my use case I calculate the padding in the computation graph. Therefore it fails when I use a tensor as padding. I attached the stacktrace:
/home/user/anaconda2/lib/python2.7/site-packages/tensorflow/python/ops/gen_array_ops.pyc in space_to_batch(input, paddings, block_size, name)
   1636   result = _op_def_lib.apply_op("SpaceToBatch", input=input,
   1637                                 paddings=paddings, block_size=block_size,
-> 1638                                 name=name)
   1639   return result
   1640 

/home/user/anaconda2/lib/python2.7/site-packages/tensorflow/python/ops/op_def_library.pyc in apply_op(self, op_type_name, name, **keywords)
    691           op = g.create_op(op_type_name, inputs, output_types, name=scope,
    692                            input_types=input_types, attrs=attr_protos,
--> 693                            op_def=op_def)
    694           outputs = op.outputs
    695           return _Restructure(ops.convert_n_to_tensor(outputs),

/home/user/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in create_op(self, op_type, inputs, dtypes, input_types, name, attrs, op_def, compute_shapes, compute_device)
   2186                     original_op=self._default_original_op, op_def=op_def)
   2187     if compute_shapes:
-> 2188       set_shapes_for_outputs(ret)
   2189     self._add_op(ret)
   2190     self._record_op_seen_by_control_dependencies(ret)

/home/user/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in set_shapes_for_outputs(op)
   1640       raise RuntimeError("No shape function registered for standard op: %s"
   1641                          % op.type)
-> 1642   shapes = shape_func(op)
   1643   if len(op.outputs) != len(shapes):
   1644     raise RuntimeError(

/home/user/anaconda2/lib/python2.7/site-packages/tensorflow/python/ops/array_ops.pyc in _SpaceToBatchShape(op)
   1630 
   1631   paddings = tensor_util.constant_value(op.inputs[1])
-> 1632   if (paddings[0, 0] < 0 or paddings[0, 1] < 0 or
   1633       paddings[1, 0] < 0 or paddings[1, 1] < 0):
   1634     raise ValueError("paddings cannot be negative.")
TypeError: 'NoneType' object has no attribute '__getitem__'

I think it has something to do with the Python shape op. If so how can I override the existing shape op to test a new one with dynamic calculation?