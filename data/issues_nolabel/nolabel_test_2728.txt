Memory leak (on cpu) in 0.9rc (vs. 0.7.1rc)

Hi,
using the provided wheel vor 0.9rc (also reproduced with a fresh install from source) I'm seeing a lot of memory consumption (on the cpu) during training a model (on a gpu (TITAN X) which gets its data from a tf.FIFOQueue pinned with tf.device() to a cpu). I tested two different dataset sizes and these lead to 600MB and 1.2GB leaked memory respectively accumulated during the training loop (GPU memory consumption stays constant during training time).
This memory leak does not happen at all when running the same code using 0.7.1rc. Additionally,
with 0.9rc setting up the whole graph takes about 600MB vs 400MB with 0.7.1rc.
The code is rather large so it will take a bit to get a MWE to (hopefully) reproduce this issue. I suspect it is tied to using a queue (queues, actually, because the validation set is also feed through a different queue, relying on tf.template() to share model parameters). Has something like that been observed beforehand? Any hints how I could try figure out more of the problem myself?
Environment info
Operating System:
Ubuntu 15.10
Installed version of CUDA and cuDNN:
CUDA7.5/cuDNN4.0.4
(please attach the output of ls -l /path/to/cuda/lib/libcud*):
-rw-r--r-- 1 root root 189170 Jan  1 23:25 /usr/local/cuda/lib/libcudadevrt.a
lrwxrwxrwx 1 root root     16 Jan  1 23:25 /usr/local/cuda/lib/libcudart.so -> libcudart.so.7.5
lrwxrwxrwx 1 root root     19 Jan  1 23:25 /usr/local/cuda/lib/libcudart.so.7.5 -> libcudart.so.7.5.18
-rwxr-xr-x 1 root root 311596 Jan  1 23:25 /usr/local/cuda/lib/libcudart.so.7.5.18
-rw-r--r-- 1 root root 558020 Jan  1 23:25 /usr/local/cuda/lib/libcudart_static.a

If installed from binary pip package, provide:

Which pip package you installed.
https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.9.0rc0-cp27-none-linux_x86_64.whl
The output from python -c "import tensorflow; print(tensorflow.__version__)".

I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcuda.so locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally 0.9.0rc0

Steps to reproduce

Working on MWE...

What have you tried?
The described behavior does not happen with 0.7.1rc (UPDATE: also not observed with 0.8rc).