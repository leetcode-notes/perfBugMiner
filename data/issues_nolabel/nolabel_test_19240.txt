error compilation with openmp enabled  in tensorflow lite compilation

Hi ,
I building tensorflow lite shared library .
I added flag -fopenmp to build_def.bzl to enable openmp:
def tflite_copts():
  """Defines compile time flags."""
  copts = [
      "-DFARMHASH_NO_CXX_STRING",
  ] + select({
          str(Label("//tensorflow:android_arm64")): [
              "-std=c++11",
              "-O3",
              "-fopenmp",
          ],
          str(Label("//tensorflow:android_arm")): [
              "-mfpu=neon",
              "-mfloat-abi=softfp",
              "-std=c++11",
              "-O3",
          ],
          str(Label("//tensorflow:android_x86")): [
              "-DGEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK",
          ],
          str(Label("//tensorflow:ios_x86_64")): [
              "-msse4.1",
          ],
          "//conditions:default": [],
  }) + select({
      str(Label("//tensorflow:with_default_optimizations")): [],
      "//conditions:default": ["-DGEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK"],
  })

And I got error compilation,
tensorflow/contrib/lite/kernels/BUILD:43:1: C++ compilation of rule '//tensorflow/contrib/lite/kernels:eigen_support' failed (Exit 1)
In file included from tensorflow/contrib/lite/kernels/eigen_support.cc:17:
In file included from ./third_party/eigen3/Eigen/Core:1:
external/eigen_archive/Eigen/Core:275:10: fatal error: 'omp.h' file not found
#include <omp.h>
         ^
1 error generated.
Target //tensorflow/contrib/lite:libtensorflowLite.so failed to build

Please advise how to fix it.
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
yes,


added openmp flag.
I changed BUILD file in tensorflow lite to create shared library

cc_binary(
    name = "libtensorflowLite.so",
    linkshared=1,

    deps = [
        ":framework",
	"//tensorflow/contrib/lite/kernels:builtin_ops"
    ],
)


OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Ubuntu 16
TensorFlow installed from (source or binary):
sources
TensorFlow version (use command below):
master
Python version:
2.7
Bazel version (if compiling from source):
0.10
GCC/Compiler version (if compiling from source):
latest
CUDA/cuDNN version:
no
GPU model and memory:
no
Exact command to reproduce:
bazel build //tensorflow/contrib/lite:libtensorflowLite.so --crosstool_top=//external:android/crosstool --cpu=arm64-v8a --host_crosstool_top=@bazel_tools//tools/cpp:toolchain --cxxopt="-std=c++11"