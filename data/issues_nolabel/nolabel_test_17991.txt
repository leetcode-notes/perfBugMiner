Tensorflow sequence mask without reducing dimensions

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution: Linux Ubuntu 16.04
TensorFlow installed from: binary
TensorFlow version: 1.4.0
Python version: 3.5.2
Bazel version (if compiling from source): not compiled from source
GCC/Compiler version (if compiling from source): not compiled from source
CUDA/cuDNN version: 8.0/6
GPU model and memory: 8GB x 4 GTX 1080
Exact command to reproduce: N/A

I have a sample code to run:
import numpy a np
import tensorflow as tf
import tensorflow.contrib.eager as tfe
tfe.enable_eager_execution()

x = np.random.randint(100,size=(4,4))
indexes =tf.sequence_mask([1,2,2,4],4)
"""
indexes = [
	[True,False,False,False],
	[True,True,False,False],
	[True,True,False,False],
	[True,True,True,True],
]
"""

y = tf.boolean_mask(x,indexes)
# y = array([43, 78, 68, 54, 46, 28, 15, 52,  3])

Now, I don't want this as the spatial information of the original tensor is lost and I want to keep the shape intact. How can do that in tensorflow since I work with RNN data so my tensor size is = [batch_size, max_time, feature_length] where I would slice it such that:
indexes = tf.sequence_mask([x_1, x_2, x_3, ..., x_batch_size], max_time)
but still want to keep the shape intact. If its not possible, is there a way to sequence mask on multiple tensors of such size while also concatenating them so that only the extracted sequence would remain and not the masked out paddings? Paddings could be applied on the end of the concatenation.