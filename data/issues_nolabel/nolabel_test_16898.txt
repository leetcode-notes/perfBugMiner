Tensorflow build with MKL-DNN produces garbage results

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes (running a keras example)
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): v1.6.0-rc0-0-gaaf367e, 1.6.0-rc0
Python version: 3.6.4 (Anaconda)
Bazel version (if compiling from source): 0.10.0
GCC/Compiler version (if compiling from source): 5.4.0 20160609
CUDA/cuDNN version: NA
GPU model and memory: NA
Exact command to reproduce:  see below

Describe the problem
I have built Tensorflow 1.6.0-rc0 from source in Ubuntu 16.04 with MKL-DNN support following this guide. The build proceeds without any problem. Testing it with keras 2.1.3 on a simple convnet from this example "as is" is two times slower than with the non-MKL build.
Now, tuning the MKL parameters as recommended in the guide leads to almost 2 times speedup over the non-MKL build. But produces complete nonsense in terms of accuracy (and loss):

This comes with no errors or warnings from the console. The CPU is an i7-4790K.
For reference, results obtained from a run without tuning the MKL parameters are as expected:

Source code / logs
The MKL parameters were tuned as follows:
from keras import backend as K
K.set_session(K.tf.Session(config=K.tf.ConfigProto(inter_op_parallelism_threads=1)))
os.environ["KMP_BLOCKTIME"] = "0"
os.environ["KMP_AFFINITY"] = "granularity=fine,verbose,compact,1,0"

and following settings were printed in the console:
OMP: Info #209: KMP_AFFINITY: decoding x2APIC ids.
OMP: Info #207: KMP_AFFINITY: Affinity capable, using global cpuid leaf 11 info
OMP: Info #154: KMP_AFFINITY: Initial OS proc set respected: {0,1,2,3,4,5,6,7}
OMP: Info #156: KMP_AFFINITY: 8 available OS procs
OMP: Info #157: KMP_AFFINITY: Uniform topology
OMP: Info #179: KMP_AFFINITY: 1 packages x 4 cores/pkg x 2 threads/core (4 total cores)
OMP: Info #211: KMP_AFFINITY: OS proc to physical thread map:
OMP: Info #171: KMP_AFFINITY: OS proc 0 maps to package 0 core 0 thread 0 
OMP: Info #171: KMP_AFFINITY: OS proc 4 maps to package 0 core 0 thread 1 
OMP: Info #171: KMP_AFFINITY: OS proc 1 maps to package 0 core 1 thread 0 
OMP: Info #171: KMP_AFFINITY: OS proc 5 maps to package 0 core 1 thread 1 
OMP: Info #171: KMP_AFFINITY: OS proc 2 maps to package 0 core 2 thread 0 
OMP: Info #171: KMP_AFFINITY: OS proc 6 maps to package 0 core 2 thread 1 
OMP: Info #171: KMP_AFFINITY: OS proc 3 maps to package 0 core 3 thread 0 
OMP: Info #171: KMP_AFFINITY: OS proc 7 maps to package 0 core 3 thread 1 
OMP: Info #247: KMP_AFFINITY: pid 5271 tid 5323 thread 0 bound to OS proc set {0}
OMP: Info #247: KMP_AFFINITY: pid 5271 tid 5334 thread 1 bound to OS proc set {1}
OMP: Info #247: KMP_AFFINITY: pid 5271 tid 5335 thread 2 bound to OS proc set {2}
OMP: Info #247: KMP_AFFINITY: pid 5271 tid 5336 thread 3 bound to OS proc set {3}
OMP: Info #247: KMP_AFFINITY: pid 5271 tid 5337 thread 4 bound to OS proc set {4}
OMP: Info #247: KMP_AFFINITY: pid 5271 tid 5338 thread 5 bound to OS proc set {5}
OMP: Info #247: KMP_AFFINITY: pid 5271 tid 5339 thread 6 bound to OS proc set {6}
OMP: Info #247: KMP_AFFINITY: pid 5271 tid 5340 thread 7 bound to OS proc set {7}