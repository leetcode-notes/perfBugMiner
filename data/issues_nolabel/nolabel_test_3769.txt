Assigning Multiple Embeddings per Word in Tensorflow

I am trying to reproduce the results described in the EMNLP 2014 paper "Efficient Non-parametric Estimation of Multiple Embeddings per Word in Vector Space". The authors proposed a way of handling multiple senses per word through the use of multiple embeddings associated with it. Each word is assigned a global context embedding and several sense-specific embeddings, and which sense the word belongs to in the current context is determined by the argmax index of the cosine similarity between the target word's sense-specific embeddings and the average of the global vectors in the context window.
While the authors have made their Scala code publicly available on their website, I have found no similar implementations with a high level deep learning library like Tensorflow. Since I am new to Tensorflow, I am not sure whether such model can be built with the Python API. My main concern is how one can use the argmax operation as an intermediate layer in Tensorflow, and then to decide which embedding to use in the following layers. In addition, as each word might have different number of senses, is there an efficient way to handle this using embedding_lookup?
Does anyone have ideas?
Regards,
Zenong