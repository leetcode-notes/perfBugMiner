I don't understand why I get these errors when i used dict () instead of { }. and how could I solve it?

This is the code. is very similar to tensorflow tutorial but uses estimator instead of classifier .
6.  Definition del model
def model_fn1(features, labels, mode=None, params=None, config=None):
# 6.1. Connect the first hidden layer to the # (features["x"]) with relu activation
hidden = tf.layers.dense(features["x"], 10,
activation=tf.nn.relu)
# 6.2. Connect the second hidden layer to the first hidden with elu activation
hidden1 = tf.layers.dense(hidden, 10, activation=tf.nn.relu)

# 6.3. Connect output to the the second hidden layer without activation
out_y = tf.layers.dense(hidden1, 22)
out_y = tf.reshape(out_y, [-1, 22])

# 6.4. Provide an estimator spec for `ModeKeys.PREDICT`.
if mode == tf.estimator.ModeKeys.PREDICT:
    return tf.estimator.EstimatorSpec(
        mode=mode,
        predictions={'': out_y})
        #predictions = dict(out_y))

# 6.5. Calculate loss using mean squared error and another approach
loss = tf.losses.mean_squared_error(labels, out_y)

# 6.6. Training sub-graph
optimizer = tf.train.GradientDescentOptimizer(
    learning_rate=0.01)
train_op = optimizer.minimize(
    loss=loss, global_step=tf.train.get_global_step())

# 6.7 Calculate root mean squared error as additional eval metric
eval_metric_ops = {
    "rmse": tf.metrics.root_mean_squared_error(
        tf.cast(labels, tf.float64), out_y)
}

# 6.8. Provide an estimator spec for `ModeKeys.EVAL` and `ModeKeys.TRAIN` modes.
return tf.estimator.EstimatorSpec(
    mode=mode,
    loss=loss,
    train_op=train_op,
    eval_metric_ops=eval_metric_ops)

7. Creation of an estimator
estimator1 = tf.estimator.Estimator(model_fn=model_fn1, params=None,
model_dir='/home/jennydariska/targetDirectory/project_1/project1/test/')
8. Running of our model
with tf.Session() as session:
input_fn = tf.estimator.inputs.numpy_input_fn(x={"x": x_train}, y=y_train,
                                              shuffle=True, num_epochs=None)

train_input_fn = tf.estimator.inputs.numpy_input_fn(x={"x": x_train}, y=y_train,
                                                    num_epochs=None, shuffle=False)

eval_input_fn = tf.estimator.inputs.numpy_input_fn(x={"x": x_eval}, y=y_eval,
                                                   num_epochs=1, shuffle=False)
# 8.1 Training of the estimator
estimator1.train(input_fn=input_fn, steps=5000)

# 8.2 Evaluation of how well our model did.
train_metrics = estimator1.evaluate(input_fn=train_input_fn, steps=500)
eval_metrics = estimator1.evaluate(input_fn=eval_input_fn)
print("train metrics: %r" % train_metrics)
print("eval metrics: %r" % eval_metrics)
print("Loss: %s" % eval_metrics["loss"])

# 8.3 Prediction for the news samples
predict_input_fn = tf.estimator.inputs.numpy_input_fn(
    x={"x": new_samples}, num_epochs=1,
    shuffle=False)

predictions = estimator1.predict(input_fn=predict_input_fn)
print(predictions)

for i in enumerate(predictions):
    print("Prediction %s: " % i )

`                                                                                                                                                                             when i use {}, i get this error:
<ERROR:tensorflow:==================================
Object was never used (type <class 'tensorflow.python.framework.ops.Tensor'>):
<tf.Tensor 'report_uninitialized_variables_1/boolean_mask/Gather:0' shape=(?,) dtype=string>
If you want to mark it as used call its "mark_used()" method.


when i use dict(), i get this
<TypeError: 'Tensor' object is not iterable.>.I can not figure out where the problem lies