Tensorboard not fully functional behind nginx proxy

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes. The ngnix configuration to proxy tensorboard from port 6006 to port 80. Details below.
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Linux Ubuntu 16.04
TensorFlow installed from (source or binary):
Source
TensorFlow version (use command below):
('v1.0.1-2-g250e72c-dirty', '1.0.1')
Bazel version (if compiling from source):
Build label: 0.4.5
Build target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar
Build time: Thu Mar 16 12:19:38 2017 (1489666778)
Build timestamp: 1489666778
Build timestamp as int: 1489666778
CUDA/cuDNN version:
8.0.61/cudnn-8.0-linux-x64-v5.1
GPU model and memory:
"TITAN X (Pascal) and 12187 MBytes
Exact command to reproduce:
tensorboard  --logdir /tmp/retrain_logs/

Describe the problem
I follow the image retraining tutorial  [https://www.tensorflow.org/tutorials/image_retraining]. As we have different applications providing a webinterface and a firewall that blocks all ports except 22(ssh) and 80(http)/443(https) we want to put all of them behind a nginx proxy.
With the config below the tensorboard shows up, however no data is displayed.
When disabling all other applications / services that run on port 80 and forcing tensorboard to deliver on port 80 with sudo tensorboard --port 80 --logdir /tmp/retrain_logs the data graphs (ie. accuracy_1, cross_entropy_1, etc.) are displayed.
Source code / logs
`server {
listen 80 default_server;
listen [::]:80 default_server;
    root /var/www/html;

    # Add index.php to the list if you are using PHP
    index index.html index.htm index.nginx-debian.html;

    server_name _;

    location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to displaying a 404.
            try_files $uri $uri/ =404;
    }
    location /tensorflow {
            rewrite ^/tensorflow(.*) /$1 break;
            proxy_pass http://127.0.0.1:6006/;
    }

}
`