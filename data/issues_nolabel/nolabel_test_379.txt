incorrect app.flags.DEFINE_boolean behavior

demo python script
test.py
#!/usr/bin/python
import tensorflow as tf
tf.app.flags.DEFINE_boolean('tea',False,'Soggy Leaves')
cfg = tf.app.flags.FLAGS

if cfg.tea:
    print( "have some tea" )
else:
    print( "no tea" )

Expected behavior
When the above test.py is run with any of {(no arguments), --notea, or --tea=True}, the script behaves as expected...
[markb@schur tmp]$ ./test.py
no tea
[markb@schur tmp]$ ./test.py --notea
no tea
[markb@schur tmp]$ ./test.py --tea=True
have some tea

Weird stuff
Strangely --tea=False is incorrectly interpreted as True.  Having both tea and no tea is only possible in certain Infocom games.
[markb@schur tmp]$ ./test.py --tea=False
have some tea

Apparently, only those who truly want tea will get it.
[markb@schur tmp]$ ./test.py --tea
usage: test.py [-h] [--tea TEA] [--notea]
test.py: error: argument --tea: expected one argument

C'mon. It's a boolean flag !
"Say something once.  Why say it again?"  -- Talking Heads