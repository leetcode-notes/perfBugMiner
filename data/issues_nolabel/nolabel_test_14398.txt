name_scope is indistinguishable from string type

variable_scope yields a class VariableScope when entered, while name_scope yields a string.
import tensorflow as tf

with tf.name_scope("n1"):
    with tf.name_scope("n2") as n2:
        print("name_scope: {}".format(n2))
        print("get_name_scope: {}".format(tf.contrib.framework.get_name_scope()))

with tf.variable_scope("v1"):
    with tf.variable_scope("v2") as v2:
        print("variable_scope: {}".format(v2))
        print("get_name_scope: {}".format(tf.get_variable_scope()))

# output
# name_scope: n1/n2/
# get_name_scope: n1/n2
# variable_scope: <tensorflow.python.ops.variable_scope.VariableScope object at 0x11ba34d68>
# get_name_scope: <tensorflow.python.ops.variable_scope.VariableScope object at 0x11ba34d68>
I think string might be unsafe. Moreover, sometimes we have to hack a "/" suffix if we want to reenter the current name scope.
Especially, it's difficult to check the type when name_scope is an argument for a function.
def func(my_name_scope, my_variable_scope):
    if isinstance(my_variable_scope, (VariableScope, variable_scope)):
        # do something
    else:
        raise TypeError()

    if isinstance(my_name_scope, (six.string_types, name_scope)):
        # how to do if it's an invalid string?
    else:
        raise TypeError()
Will tensorflow plan to introduce a class like VariableScope, say NameScope, in the future? Thanks.