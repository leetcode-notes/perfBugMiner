Calling variable property of DropoutWrapper gives Error: AttributeError: 'DropoutWrapper' object has no attribute 'trainable'

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Using docker container minimaxir/keras-cntk:cpu-compiled (https://hub.docker.com/r/minimaxir/keras-cntk/tags/)
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 1.2.1 also tested on 1.4
Python version: 3.5.2
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:
Exact command to reproduce:

Describe the problem
I was trying to access the weights and biases of an BasicLSTM cell I created. The BasicLSTM cell also has a DropoutWrapper and when trying to access the variables property the below error is thrown.
AttributeError: 'DropoutWrapper' object has no attribute 'trainable'
Someone tried to help me with the error on stackoverflow (second half of this answer) and noticed that while variables is implemented in Layer.
I will quote his very helpful response below:

Although variables is documented for most (all?) RNN classes, it does break for DropoutWrapper. The property has been documented since r1.2, but accessing the property causes an exception in 1.2 and 1.4 (and looks like 1.3, but untested). Specifically,
from tensorflow.contrib import rnn
...
lstm_cell = rnn.BasicLSTMCell(num_hidden, forget_bias=1.0)
wrapped_cell = rnn.DropoutWrapper(lstm_cell)
outputs, states = rnn.static_rnn(wrapped_cell, x, dtype=tf.float32)
print("LSTM vars!", lstm_cell.variables)
print("Wrapped vars!", wrapped_cell.variables)
will throw AttributeError: 'DropoutWrapper' object has no attribute 'trainable'. From the traceback (or a long stare at the DropoutWrapper source), I noticed that variables is implemented in DropoutWrapper's super RNNCell's super Layer. Dizzy yet? Indeed, we find the documented variables property here. It returns the (documented) weights property. The weights property returns the (documented) self.trainable_weights + self.non_trainable_weights properties. And finally the root of the problem:

 @property
 def trainable_weights(self):
     return self._trainable_weights if self.trainable else []
 
 @property
 def non_trainable_weights(self):
     if self.trainable:
         return self._non_trainable_weights
     else:
        return self._trainable_weights + self._non_trainable_weights


That is, variables does not work for a DropoutWrapper instance. Neither will trainable_weights or non_trainable_weights sinceself.trainable is not defined.
One step deeper, Layer.init defaults self.trainable to True. Where that property gets removed, deled, unset, whatever from a DropoutWrapper object, I cannot tell.