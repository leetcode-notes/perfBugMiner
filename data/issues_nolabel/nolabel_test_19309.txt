Generate Java graph building API from @Operator annotated classes

That completes the work started by @kbsriram to generate the *Ops API classes out of the operation wrappers annotated with @Operator. That includes core operations wrappers that are automatically generated at compile time or any user (or custom) operation that might be added to the source path.
Here's an example of usage of the generated classes:
try (Graph g = new Graph()) {
  Ops ops = new Ops(g);
  // Operations are typed classes with convenience builders in Ops.
  Constant three = ops.constant(3);
  // Single-result operations implement the Operand interface, so this works too.
  Operand four = ops.constant(4);
  // Most builders are found within a group, and accept Operand types as operands
  Operand nine = ops.math().add(four, ops.constant(5));
  // Multi-result operations however offer methods to select a particular result for use.
  Operand result = ops.math().add(ops.array().unique(s, a).y(), b);
  // Optional attributes
  ops.math().matMul(a, b, MatMul.transposeA(true));
  // Naming operators
  ops.withName(“foo”).constant(5); // name “foo”
  // Names can exist in a hierarchy
  Ops subOps = ops.withSubScope(“sub”);
  subOps.withName(“bar”).constant(4); // “sub/bar”
}
Note that the grouping of the operation wrappers in the java_api still need to be completed after this before releasing a first version of this API.
CC: @asimshankar