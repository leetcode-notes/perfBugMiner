Session::Run() allocates a lot of memory after the first call

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Sierra 10.12.6
TensorFlow installed from (source or binary): Binary (CPU C API)
TensorFlow version (use command below): 1.4.0
Python version: N/A
Bazel version (if compiling from source): N/A
GCC/Compiler version (if compiling from source): N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: N/A

Describe the problem
I am working on an application that deploys several TensorFlow models using TensorFlow's C API. I have noticed that there seems to be a behavior where TensorFlow takes a long time to run the first time TF_SessionRun() is called, and it allocates a lot of extra memory that hangs around until the session is destroyed. In my case, my program's memory footprint is ~85MB after all of the models are loaded (which makes sense, that's about how large the model .pb files are on disk) but after the first call to TF_SessionRun() it jumps to ~250MB. After profiling my code it appears that TensorFlow is the culprit, and I've observed similar behavior on Android as well.
TensorFlow seems to be doing some lazy initialization, but there doesn't appear to be much documentation or discussion about this. Could someone shed some light on what is happening here? Why does it require so much memory? Is this a bug or expected behavior?
Source code / logs
Here's a memory call tree from Xcode showing persistent memory allocations after the first call to TF_SessionRun() for one of my models:

Let me know if there is any more information that I can provide. I'm curious what's going on here.