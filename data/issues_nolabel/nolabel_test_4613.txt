Maybe there should be an argument 'unique' in the function `tf.where()`

There IS the case where we wanna find the first position of the True element in a tensor.
suppose there is a tensor a like this:
[array([[[ True, False],
        [False, False]],

       [[False,  True],
        [ True, False]],

       [[False, False],
        [False,  True]],

       [[False, False],
        [ True, False]]], dtype=bool)

and u run tf.where(a), u will get:
 array([[0, 0, 0],
       [1, 0, 1],
       [1, 1, 0],
       [2, 1, 1],
       [3, 1, 0]])]

But we sometimes want a result like this:
 array([[0, 0, 0],
       [1, 0, 1],
       [2, 1, 1],
       [3, 1, 0]])]


which show us the index of first True element instead of all True elements.
I suppose the function tf.where() might as well add an argument unique , indicating whether u wanna show all true element positions or the first one. And the default value of unique should be False.
the prototype might be like this:
tf.where(input, unique=False, name=None)

and for the requirements shown above, i might run something like this:
tf.where(a, unique = True)