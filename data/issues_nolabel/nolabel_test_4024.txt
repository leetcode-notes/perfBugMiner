How to link the TensorFlow static library for Android using the Gradle Experimental Plugin

Hi all,
Context: we want to link TensorFlow against our C++ platform-independent code and load a model to run some classification relevant for our application. We use SWIG to generate the Java bindings and in the end it builds an Android .aar file that we push to a private maven repository that our other packages (Android apps, we also have an Android SDK) can consume downstream. Moving our project to Bazel is not ideal given our packaging / distribution pipeline. That's why we are trying the Gradle integration before moving the project to Bazel if there is no way around. For now, I followed https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/makefile/README.md and I was successfully able to build the .a libs (tensorflow-core and protobufs) and ran the benchmark.
Then I have a lot of undefined reference in TensorFlow / Protobuf, see output.txt
And for info, here's my build.gradle
apply plugin: 'com.android.model.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

def VERSION_NAME = '1.0.0-alpha.3-SNAPSHOT'
def GROUP_ID = 'io.cens'
def REPO_KEY = VERSION_NAME.endsWith('SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local'

def ARTIFACT_FILENAME = ARTIFACT_ID + '-' + VERSION_NAME + '.aar'

version = VERSION_NAME
group = GROUP_ID

model {
    android {
        compileSdkVersion 23
        buildToolsVersion "23.0.3"

        defaultConfig {
            minSdkVersion.apiLevel 14
            targetSdkVersion.apiLevel 23
            versionCode 1
            versionName VERSION_NAME
            project.archivesBaseName = ARTIFACT_FILENAME
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles.add(file("proguard-rules.pro"))
            }
        }

        ndk {
            moduleName = "censio_crash"
            stl = "gnustl_shared" // see https://developer.android.com/ndk/guides/cpp-support.html#stl

            // TensorFlow artifacts (it is assumed that the tensorflow repo is a peer of the crash repo)
            cppFlags.add('-I' + file('../../../../../tensorflow').absolutePath)
            cppFlags.add('-I' + file('../../../../../tensorflow/tensorflow/contrib/makefile/gen/proto').absolutePath)
            cppFlags.add('-I' + file('../../../../../tensorflow/tensorflow/contrib/makefile/gen/protobuf/include').absolutePath)
            cppFlags.add('-I' + file('../../../../../tensorflow/tensorflow/contrib/makefile/downloads/eigen-eigen-6f952374ef2b').absolutePath)
            ldFlags.add('../../../../../tensorflow/tensorflow/contrib/makefile/gen/protobuf/lib/libprotobuf-lite.a')
            ldFlags.add('../../../../../tensorflow/tensorflow/contrib/makefile/gen/lib/libtensorflow-core.a')

            // Our sources
            cppFlags.add('-I' + file("../../../../src").absolutePath)
            cppFlags.add("-std=gnu++11")
            cppFlags.addAll(["-fexceptions", "-frtti"])
            ldLibs.addAll(['android', 'log', 'z'])
            abiFilters.addAll(['armeabi-v7a']) // only build for main architecture subset
        }

        sources {
            main {
                jni {
                    source {
                        srcDir '../../../../src'
                        exclude "**/Logger.cpp" // Android impl is generated by SWIG instead
                    }
                }
            }
        }
    }
}

def siteUrl = 'https://github.com/Censio/mobile-crash-sdk'
def gitUrl = 'https://github.com/Censio/mobile-crash-sdk.git'

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                name 'TrueMotion Android On-board SDK - Crash package.'
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name 'Copyright (C) 2016 TrueMotion - All Rights Reserved'
                        url 'http://gotruemotion.com'
                    }
                }
                developers {
                    developer {
                        id 'antoine-dbr'
                        name 'Antoine-Dubois-Rande'
                        email 'antoine@cens.io'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

dependencies {
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId GROUP_ID
            version = VERSION_NAME
            artifactId ARTIFACT_ID

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/" + ARTIFACT_FILENAME)

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.getByName("_releaseCompile").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
}

artifactory {
    contextUrl = 'https://censiodev.artifactoryonline.com/censiodev'
    publish {
        repository {
            // The Artifactory repository key to publish to
            repoKey = REPO_KEY

            username = ARTIFACTORY_USERNAME
            password = ARTIFACTORY_PASSWORD
        }
        defaults {
            publications('aar')
            publishArtifacts = true
            publishPom = true
        }
    }
}

bintray {
    user = BINTRAY_USER
    key = BINTRAY_API_KEY

    configurations = ['archives']
    pkg {
        userOrg = 'censio'
        repo = VERSION_NAME.endsWith('SNAPSHOT') ? '' : 'maven' // This will error out if we attempt to push a snapshot build
        name = ARTIFACT_ID
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ['Censio']
        dryRun = false
        publish = true
    }
}

task rename(type: Copy) {
    from 'build/outputs/aar'
    into 'build/outputs/aar'
    rename { String fileName ->
        fileName.replace('-release.aar', '')
    }
}
Since the benchmark works, I think it's probably an issue on my end. In any case, any help appreciated. Thanks!