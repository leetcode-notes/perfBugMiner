Error performing lstm using BasicLSTMCell in v0.12.0

Hey Guys, I have v0.12.0 installed on my system and I'm facing some issue while running a simple LSTM. While trying to get it to work I have even reduced my code to the examples at https://www.tensorflow.org/tutorials/recurrent/, but still facing the same issue. I'm attaching snippets from my code and the error log. The "lstm" function takes input from a convolving function that produces latent representations (size: 1024) of a sequence of 40 frames.
frames_batch_size = 40
batch_size = 20

def lstm(x, state_size=1024, initial_state=None, reuse=False):
    with tf.variable_scope("lstm") as lstm_scope:
        if reuse:
            tf.get_variable_scope().reuse_variables()
        
        lstm_cell = tf.nn.rnn_cell.BasicLSTMCell(state_size)
        state = initial_state if initial_state else tf.zeros([batch_size, state_size], name="lstm_state")
        
        print(x.name, "-", x.get_shape())
        print(state.name, "-", state.get_shape())

        for i in range(frames_batch_size):
            output, state = lstm_cell(x[:, i], state)
            
        print(output.name, output.get_shape())
    return output
The shapes of tensors as per output are:
generator/convolution/conv_output:0 - (20, 40, 1024)
generator/lstm/lstm_state:0 - (20, 1024)

And the snippet of the error log is:
<ipython-input-13-35b652ff4acc> in lstm(x, state_size, initial_state, reuse)
     10 
     11         for i in range(frames_batch_size):
---> 12             output, state = lstm_cell(x[:, i], state)
     13 
     14         print(output.name, output.get_shape())

/usr/local/lib/python3.5/site-packages/tensorflow/python/ops/rnn_cell.py in __call__(self, inputs, state, scope)
    306       # Parameters of gates are concatenated into one multiply for efficiency.
    307       if self._state_is_tuple:
--> 308         c, h = state
    309       else:
    310         c, h = array_ops.split(1, 2, state)

/usr/local/lib/python3.5/site-packages/tensorflow/python/framework/ops.py in __iter__(self)
    508       TypeError: when invoked.
    509     """
--> 510     raise TypeError("'Tensor' object is not iterable.")
    511 
    512   def __bool__(self):

TypeError: 'Tensor' object is not iterable.