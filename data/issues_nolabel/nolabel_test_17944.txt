App getting crashed while using USB Camera

OS Platform and Distribution: Ubuntu 14.04
TensorFlow installed from: Git cloned
TensorFlow version: N/A
Bazel version: Build label: 0.11.1
CUDA/cuDNN version: N/A
GPU model and memory: x86 8GB RAM
Exact command to reproduce: bazel build --cxxopt=--std=c++11 //tensorflow/contrib/lite/java/demo/app/src/main:TfLiteCameraDemo --config android --cpu=x86_64 --fat_apk_cpu=x86_64
I think i am getting camera id null. is it because tensorflow uses camera2? if yes then how do i fix this issue?
03-23 05:21:14.646  2282  2282 W /system/bin/hwservicemanager: getTransport: Cannot find entry android.hardware.configstore@1.0::ISurfaceFlingerConfigs/default in either framework or device manifest.
03-23 05:21:14.647 19595 19613 I com.example.android.tflitecamerademo: android::hardware::configstore::V1_0::ISurfaceFlingerConfigs::hasWideColorDisplay retrieved: 0
03-23 05:21:14.647 19595 19613 I OpenGLRenderer: Initialized EGL, version 1.4
03-23 05:21:14.647 19595 19613 D OpenGLRenderer: Swap behavior 2
03-23 05:21:14.647 19595 19595 I RenderThread: type=1400 audit(0.0:310): avc: denied { map } for path=2F69393135202864656C6574656429 dev="tmpfs" ino=918453 scontext=u:r:untrusted_app_25:s0:c512,c768 tcontext=u:object_r:untrusted_app_25_tmpfs:s0:c512,c768 tclass=file permissive=1
03-23 05:21:14.651 19595 19595 I CameraManagerGlobal: Connecting to camera service
03-23 05:21:14.652 19595 19595 D AndroidRuntime: Shutting down VM
--------- beginning of crash
03-23 05:21:14.652 19595 19595 E AndroidRuntime: FATAL EXCEPTION: main
03-23 05:21:14.652 19595 19595 E AndroidRuntime: Process: com.example.android.tflitecamerademo, PID: 19595
03-23 05:21:14.652 19595 19595 E AndroidRuntime: java.lang.IllegalArgumentException: cameraId was null
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.hardware.camera2.CameraManager.openCameraForUid(CameraManager.java:457)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.hardware.camera2.CameraManager.openCamera(CameraManager.java:433)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at com.example.android.tflitecamerademo.Camera2BasicFragment.openCamera(Camera2BasicFragment.java:479)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at com.example.android.tflitecamerademo.Camera2BasicFragment.access$000(Camera2BasicFragment.java:69)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at com.example.android.tflitecamerademo.Camera2BasicFragment$1.onSurfaceTextureAvailable(Camera2BasicFragment.java:102)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.TextureView.getHardwareLayer(TextureView.java:390)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.TextureView.draw(TextureView.java:339)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.updateDisplayListIfDirty(View.java:18142)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.draw(View.java:18920)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.drawChild(ViewGroup.java:4236)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.dispatchDraw(ViewGroup.java:4022)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.updateDisplayListIfDirty(View.java:18133)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.draw(View.java:18920)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.drawChild(ViewGroup.java:4236)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.dispatchDraw(ViewGroup.java:4022)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.draw(View.java:19195)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.updateDisplayListIfDirty(View.java:18142)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.draw(View.java:18920)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.drawChild(ViewGroup.java:4236)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.dispatchDraw(ViewGroup.java:4022)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.updateDisplayListIfDirty(View.java:18133)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.draw(View.java:18920)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.drawChild(ViewGroup.java:4236)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.dispatchDraw(ViewGroup.java:4022)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.updateDisplayListIfDirty(View.java:18133)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.draw(View.java:18920)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.drawChild(ViewGroup.java:4236)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.dispatchDraw(ViewGroup.java:4022)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.draw(View.java:19195)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.updateDisplayListIfDirty(View.java:18142)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.draw(View.java:18920)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.drawChild(ViewGroup.java:4236)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.dispatchDraw(ViewGroup.java:4022)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.updateDisplayListIfDirty(View.java:18133)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.draw(View.java:18920)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.drawChild(ViewGroup.java:4236)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.dispatchDraw(ViewGroup.java:4022)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.updateDisplayListIfDirty(View.java:18133)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.draw(View.java:18920)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.drawChild(ViewGroup.java:4236)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewGroup.dispatchDraw(ViewGroup.java:4022)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.draw(View.java:19195)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at com.android.internal.policy.DecorView.draw(DecorView.java:788)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.View.updateDisplayListIfDirty(View.java:18142)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ThreadedRenderer.updateViewTreeDisplayList(ThreadedRenderer.java:669)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ThreadedRenderer.updateRootDisplayList(ThreadedRenderer.java:675)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ThreadedRenderer.draw(ThreadedRenderer.java:783)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewRootImpl.draw(ViewRootImpl.java:2992)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewRootImpl.performDraw(ViewRootImpl.java:2806)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:2359)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1392)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:6752)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.Choreographer$CallbackRecord.run(Choreographer.java:911)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.Choreographer.doCallbacks(Choreographer.java:723)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.Choreographer.doFrame(Choreographer.java:658)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:897)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.os.Handler.handleCallback(Handler.java:790)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.os.Handler.dispatchMessage(Handler.java:99)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.os.Looper.loop(Looper.java:164)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at android.app.ActivityThread.main(ActivityThread.java:6494)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at java.lang.reflect.Method.invoke(Native Method)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)
03-23 05:21:14.652 19595 19595 E AndroidRuntime:        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)
03-23 05:21:14.653 15691 16933 W ActivityManager:   Force finishing activity com.example.android.tflitecamerademo/.CameraActivity
03-23 05:21:14.654 15691 16933 W ActivityManager:   Force finishing activity com.android.settings/.Settings
03-23 05:21:14.655 15691 16933 I ActivityManager: Killing 16856:com.google.android.partnersetup/u0a23 (adj 906): empty #17
03-23 05:21:14.655 15691 15712 W system_server: kill(-16856, 9) failed: No such process
03-23 05:21:14.656  2503  2503 D CRASHLOG: sdcard_allowed : Current crashlog mode is NOMINAL MODE - SDCard storage disabled.
03-23 05:21:14.659 15691 18236 I ActivityManager: START u0 {act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10000100 cmp=com.android.support.car.lenspicker/.LensPickerTrampolineActivity} from uid 0
03-23 05:21:14.660 19595 19595 I Process : Sending signal. PID: 19595 SIG: 9
03-23 05:21:14.674 15691 15758 W InputDispatcher: channel '656c0d6 com.example.android.tflitecamerademo/com.example.android.tflitecamerademo.CameraActivity (server)' ~ Consumer closed input channel or an error occurred.  events=0x9
03-23 05:21:14.674 15691 15758 E InputDispatcher: channel '656c0d6 com.example.android.tflitecamerademo/com.example.android.tflitecamerademo.CameraActivity (server)' ~ Channel is unrecoverably broken and will be disposed!
03-23 05:21:14.674 15691 16917 I ActivityManager: Process com.example.android.tflitecamerademo (pid 19595) has died: vis  +99TOP
03-23 05:21:14.674 15691 16480 I WindowManager: WIN DEATH: Window{656c0d6 u0 com.example.android.tflitecamerademo/com.example.android.tflitecamerademo.CameraActivity}
03-23 05:21:14.674 15691 16480 W InputDispatcher: Attempted to unregister already unregistered input channel '656c0d6 com.example.android.tflitecamerademo/com.example.android.tflitecamerademo.CameraActivity (server)'
03-23 05:21:14.676 15691 15717 W ActivityManager: setHasOverlayUi called on unknown pid: 19595
03-23 05:21:14.681 15691 18187 I ActivityManager: START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 pkg=com.android.settings cmp=com.android.settings/.Settings} from uid 10048