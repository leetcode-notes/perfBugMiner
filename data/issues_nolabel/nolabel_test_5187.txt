Reading data from tfrecords error

When I use tf to read traing and testing data from tfrecords, it runed for a while, then stoped with errors like this (this is testing net error, traing net is the same problem):
INFO:tensorflow:Executing eval_op 8133/15916
INFO:tensorflow:Executing eval_op 8134/15916
INFO:tensorflow:Executing eval_op 8135/15916
INFO:tensorflow:Executing eval_op 8136/15916
INFO:tensorflow:Executing eval_op 8137/15916
INFO:tensorflow:Executing eval_op 8138/15916
INFO:tensorflow:Executing eval_op 8139/15916
INFO:tensorflow:Executing eval_op 8140/15916
INFO:tensorflow:Executing eval_op 8141/15916
INFO:tensorflow:Executing eval_op 8142/15916
INFO:tensorflow:Executing eval_op 8143/15916
INFO:tensorflow:Executing eval_op 8144/15916
INFO:tensorflow:Executing eval_op 8145/15916
INFO:tensorflow:Executing eval_op 8146/15916
INFO:tensorflow:Executing eval_op 8147/15916
INFO:tensorflow:Executing eval_op 8148/15916
INFO:tensorflow:Executing eval_op 8149/15916
INFO:tensorflow:Executing eval_op 8150/15916
INFO:tensorflow:Executing eval_op 8151/15916
INFO:tensorflow:Executing eval_op 8152/15916
INFO:tensorflow:Executing eval_op 8153/15916
INFO:tensorflow:Executing eval_op 8154/15916
INFO:tensorflow:Executing eval_op 8155/15916
INFO:tensorflow:Executing eval_op 8156/15916
INFO:tensorflow:Error reported to Coordinator: <class 'tensorflow.python.framework.errors.InvalidArgumentError'>, Input to reshape is a tensor with 836310 values, but the requested shape has 65712
[[Node: Reshape_14 = Reshape[T=DT_UINT8, _device="/job:localhost/replica:0/task:0/gpu:0"](case_1/If_2/Merge, Reshape_14/shape)]]
[[Node: eval_image/Mul/_3773 = _Recvclient_terminated=false, recv_device="/job:localhost/replica:0/task:0/cpu:0", send_device="/job:localhost/replica:0/task:0/gpu:0", send_device_incarnation=1, tensor_name="edge_152_eval_image/Mul", tensor_type=DT_FLOAT, _device="/job:localhost/replica:0/task:0/cpu:0"]]
Caused by op u'Reshape_14', defined at:
File "eval_image_classifier.py", line 210, in 
tf.app.run()
File "/usr/local/tensorflow/_python_build/tensorflow/python/platform/app.py", line 30, in run
sys.exit(main(sys.argv[:1] + flags_passthrough))
File "eval_image_classifier.py", line 130, in main
common_queue_min=FLAGS.batch_size)
File "/usr/local/tensorflow/_python_build/tensorflow/contrib/slim/python/slim/data/dataset_data_provider.py", line 78, in init
tensors = dataset.decoder.decode(data, items)
File "/usr/local/tensorflow/_python_build/tensorflow/contrib/slim/python/slim/data/tfexample_decoder.py", line 398, in decode
outputs.append(handler.tensors_to_item(keys_to_tensors))
File "/usr/local/tensorflow/_python_build/tensorflow/contrib/slim/python/slim/data/tfexample_decoder.py", line 297, in tensors_to_item
image = self._decode(image_buffer, image_format)
File "/usr/local/tensorflow/_python_build/tensorflow/contrib/slim/python/slim/data/tfexample_decoder.py", line 328, in _decode
image = array_ops.reshape(image, self._shape)
File "/usr/local/tensorflow/_python_build/tensorflow/python/ops/gen_array_ops.py", line 1758, in reshape
name=name)
File "/usr/local/tensorflow/_python_build/tensorflow/python/framework/op_def_library.py", line 703, in apply_op
op_def=op_def)
File "/usr/local/tensorflow/_python_build/tensorflow/python/framework/ops.py", line 2333, in create_op
original_op=self._default_original_op, op_def=op_def)
File "/usr/local/tensorflow/_python_build/tensorflow/python/framework/ops.py", line 1252, in init
self._traceback = _extract_stack()
Traceback (most recent call last):
File "eval_image_classifier.py", line 210, in 
tf.app.run()
File "/usr/local/tensorflow/_python_build/tensorflow/python/platform/app.py", line 30, in run
sys.exit(main(sys.argv[:1] + flags_passthrough))
File "eval_image_classifier.py", line 206, in main
variables_to_restore=variables_to_restore)
File "/usr/local/tensorflow/_python_build/tensorflow/contrib/slim/python/slim/evaluation.py", line 323, in evaluate_once
global_step=global_step)
File "/usr/lib/python2.7/contextlib.py", line 35, in exit
self.gen.throw(type, value, traceback)
File "/usr/local/tensorflow/_python_build/tensorflow/python/training/supervisor.py", line 969, in managed_session
self.stop(close_summary_writer=close_summary_writer)
File "/usr/local/tensorflow/_python_build/tensorflow/python/training/supervisor.py", line 797, in stop
stop_grace_period_secs=self._stop_grace_secs)
File "/usr/local/tensorflow/_python_build/tensorflow/python/training/coordinator.py", line 386, in join
six.reraise(*self._exc_info_to_raise)
File "/usr/local/tensorflow/_python_build/tensorflow/python/training/queue_runner.py", line 225, in _run
sess.run(enqueue_op)
File "/usr/local/tensorflow/_python_build/tensorflow/python/client/session.py", line 717, in run
run_metadata_ptr)
File "/usr/local/tensorflow/_python_build/tensorflow/python/client/session.py", line 915, in _run
feed_dict_string, options, run_metadata)
File "/usr/local/tensorflow/_python_build/tensorflow/python/client/session.py", line 965, in _do_run
target_list, options, run_metadata)
File "/usr/local/tensorflow/_python_build/tensorflow/python/client/session.py", line 985, in _do_call
raise type(e)(node_def, op, message)
tensorflow.python.framework.errors.InvalidArgumentError: Input to reshape is a tensor with 836310 values, but the requested shape has 65712
[[Node: Reshape_14 = Reshape[T=DT_UINT8, _device="/job:localhost/replica:0/task:0/gpu:0"](case_1/If_2/Merge, Reshape_14/shape)]]
[[Node: eval_image/Mul/_3773 = _Recvclient_terminated=false, recv_device="/job:localhost/replica:0/task:0/cpu:0", send_device="/job:localhost/replica:0/task:0/gpu:0", send_device_incarnation=1, tensor_name="edge_152_eval_image/Mul", tensor_type=DT_FLOAT, _device="/job:localhost/replica:0/task:0/cpu:0"]]
Caused by op u'Reshape_14', defined at:
File "eval_image_classifier.py", line 210, in 
tf.app.run()
File "/usr/local/tensorflow/_python_build/tensorflow/python/platform/app.py", line 30, in run
sys.exit(main(sys.argv[:1] + flags_passthrough))
File "eval_image_classifier.py", line 130, in main
common_queue_min=FLAGS.batch_size)
File "/usr/local/tensorflow/_python_build/tensorflow/contrib/slim/python/slim/data/dataset_data_provider.py", line 78, in init
tensors = dataset.decoder.decode(data, items)
File "/usr/local/tensorflow/_python_build/tensorflow/contrib/slim/python/slim/data/tfexample_decoder.py", line 398, in decode
outputs.append(handler.tensors_to_item(keys_to_tensors))
File "/usr/local/tensorflow/_python_build/tensorflow/contrib/slim/python/slim/data/tfexample_decoder.py", line 297, in tensors_to_item
image = self._decode(image_buffer, image_format)
File "/usr/local/tensorflow/_python_build/tensorflow/contrib/slim/python/slim/data/tfexample_decoder.py", line 328, in _decode
image = array_ops.reshape(image, self._shape)
File "/usr/local/tensorflow/_python_build/tensorflow/python/ops/gen_array_ops.py", line 1758, in reshape
name=name)
File "/usr/local/tensorflow/_python_build/tensorflow/python/framework/op_def_library.py", line 703, in apply_op
op_def=op_def)
File "/usr/local/tensorflow/_python_build/tensorflow/python/framework/ops.py", line 2333, in create_op
original_op=self._default_original_op, op_def=op_def)
File "/usr/local/tensorflow/_python_build/tensorflow/python/framework/ops.py", line 1252, in init
self._traceback = _extract_stack()

while I wrote the tfrecords like this:
def _process_image(file_path, label, coder, logfile=None):
"""Process a single image file.
Args:
    filename: string, path to an image file e.g., '/path/to/example.JPG'.
    coder: instance of ImageCoder to provide TensorFlow image coding utils.
Returns:
    image_buffer: string, JPEG encoding of RGB image.
    height: integer, image height in pixels.
    width: integer, image width in pixels.
"""
# Clean the dirty data.
if _is_not_jpg(file_path):
    print('Image %s is not a JPEG image, and its label is %d' % (file_path, label))
    if logfile:
        logfile.write('Image %s is not a JPEG image, and its label is %d\n' % (file_path, label))
    return -1, None

if not tf.gfile.Exists(file_path):
    print('Image %s is not exist, and its label is %d' % (file_path, label))
    if logfile:
        logfile.write('Image %s is not exist, and its label is %d\n' % (file_path, label))
    return -1, None

# Read the image file.
image_data = tf.gfile.FastGFile(file_path, 'r').read()

# Decode the RGB JPEG.
height, width, channels = coder.read_image_dims(image_data)

# Check that image converted right
if height != 148 and width != 148 and channels != 3:
    print('The size of image %s is wrong, which is h[%d] w[%d] c[%d], but requested h[148] w[148] c[148]\n' % (file_path, height, width, channels))
    if logfile:
        logfile.write('The size of image %s is wrong, which is h[%d] w[%d], but requested h[148] w[148] c[148]\n' % (file_path, height, width, channels))
    return -1, None

return 0, _convert_to_example(image_data, height, width, channels, 'jpg', label)

def _process_image_files_batch(coder, thread_index, ranges, name, filenames, labels, num_shards, logfile=None):
num_threads = len(ranges)
assert not num_shards % num_threads
num_shards_per_batch = int(num_shards / num_threads)

shard_ranges = np.linspace(ranges[thread_index][0], ranges[thread_index][1], num_shards_per_batch + 1).astype(int)
num_files_in_thread = ranges[thread_index][1] - ranges[thread_index][0]

counter = 0
for s in xrange(num_shards_per_batch):
    # Generate a sharded version of the file name, e.g. 'train-00002-of-00010'
    shard = thread_index * num_shards_per_batch + s
    output_file = '%s-%.5d-of-%.5d.tfrecord' % (name, shard, num_shards)
    writer = tf.python_io.TFRecordWriter(output_file)

    shard_counter = 0
    files_in_shard = np.arange(shard_ranges[s], shard_ranges[s + 1], dtype=int)
    for i in files_in_shard:
        file_path = filenames[i]
        label = labels[i]

        errCode, example = _process_image(file_path, label, coder, logfile)
        if -1 == errCode:
            continue

        writer.write(example.SerializeToString())
        shard_counter += 1
        counter += 1

        if not counter % 1000:
            print('%s [thread %d]: Processed %d of %d images in thread batch.' % (datetime.now(), thread_index, counter, num_files_in_thread))
            sys.stdout.flush()

    print('%s [thread %d]: Wrote %d images to %s' % (datetime.now(), thread_index, shard_counter, output_file))
    sys.stdout.flush()
    shard_counter = 0
print('%s [thread %d]: Wrote %d images to %d shards.' % (datetime.now(), thread_index, counter, num_files_in_thread))
sys.stdout.flush()


So I checked all the images as the same shape and same size of 65712, and write them by jpg format, Ibut I don't know where the problem is.