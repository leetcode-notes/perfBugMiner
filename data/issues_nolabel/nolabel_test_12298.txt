iOS: thread pools appear to spin forever, even after session close

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No. Built for iOS using provided scripts. Defined ops to be included in build as documented (using ops_to_register.h).
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Built on macOS 10.12.6 for distribution on iOS
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): Unsure, sorry, my python environment is all messed up right now. My HEAD is at 0d2f691
Python version: 2.7.12, but I believe that's irrelevant for this issue
Bazel version (if compiling from source): 0.5.1-homebrew, but I'm using build_all_ios.sh instead of Bazel to build
CUDA/cuDNN version: Unknown
GPU model and memory: iPhone 7 Plus, but AFAIK GPU is unavailable on iOS
Exact command to reproduce: No particular command. Please see description of issue

Also asked about this on Stack Overflow, where it was suggested I file an issue
Describe the problem
I believe this is a bug in Tensorflow. I am running Tensorflow on iOS, using the C++ API. I'm doing some image classification. I have a long-lived session, and I call Run many times on it, to evaluate different images from a backlog. Once I'm done, the RunQueues (via NonBlockingThreadPools) continue to pin the CPU at near max usage. They appear to be stuck in the Steal loop, presumably with no work to do.
Source code / logs
I tried Close()ing and then deleteing the session, and having read some of the C++ source, this should have shut down the thread pools that belong to the session, but this didn't change the situation:
auto status = session->Close();
delete session;
session = nil;
I tried setting some specific configuration options so I could be sure that the session did in fact own its thread pools instead of using a global thread pool, but this didn't help either:
tensorflow::SessionOptions options;
options.config.clear_session_inter_op_thread_pool();
options.config.set_use_per_session_threads(true);
auto status = tensorflow::NewSession(options, &session);
One thing to note: while my understanding is that this isn't necessary, I did also try using a mutex to ensure that Close and delete would not be called concurrently with any call to Run, but again, no luck.
The only thing that has reduced CPU load to a reasonable level is to set inter_op_parallelism_threads to 1. This doesn't resolve the underlying problem (that the threads are never cleaned up), but it does mean that the Steal loop is avoided, so the thread just blocks forever.