The speed of reading images is unstable.

The speed of reading image is very unstable. This problem troubled me for a long time. Can anyone help me to check the problem.
The function of the following code is just reading images from several files with tf_recored pattern in the batch method.
def test_tf_decode_jpeg():
  with tf.device('/cpu:0'): 
    tf_record_pattern = os.path.join('../anno/train_data_with_history', '*')
    data_files = tf.gfile.Glob(tf_record_pattern)
    filename_queue = tf.train.string_input_producer(data_files, shuffle=False, capacity=10)
    images = []
    num_preprocess_threads = 4
    for thread_id in range(num_preprocess_threads):
      reader = tf.TFRecordReader()
      _, image = reader.read(filename_queue)
      image = parse_example_proto(image)
      image = tf.image.decode_jpeg(image, channels=3)
      image.set_shape([256,256,3])
      images.append([image])
    batch_size = 256
    image_batch = tf.train.batch_join(images, batch_size=batch_size,capacity=2 * num_preprocess_threads * batch_size)
  sess = tf.Session()
  coord = tf.train.Coordinator()
  threads = tf.train.start_queue_runners(coord=coord, sess=sess)
  for i in xrange(1000000):
    if coord.should_stop():
      break
    start = time.time()
    output_images = sess.run(image_batch) 
    print time.time() - start, output_images.shape
  coord.request_stop()
  coord.join(threads)

The speed of reading images is very unstable. Here is the running log.
0.876242160797 (256, 256, 256, 3)
0.165473937988 (256, 256, 256, 3)
0.458849906921 (256, 256, 256, 3)
0.172335863113 (256, 256, 256, 3)
0.483803033829 (256, 256, 256, 3)
0.517580032349 (256, 256, 256, 3)
0.174633979797 (256, 256, 256, 3)
0.944914102554 (256, 256, 256, 3)
0.169141054153 (256, 256, 256, 3)
0.447196006775 (256, 256, 256, 3)
0.512051820755 (256, 256, 256, 3)
0.179712057114 (256, 256, 256, 3)
0.53243303299 (256, 256, 256, 3)
0.646076917648 (256, 256, 256, 3)
0.175096988678 (256, 256, 256, 3)
0.656931877136 (256, 256, 256, 3)
0.500935077667 (256, 256, 256, 3)
0.456654071808 (256, 256, 256, 3)
0.41271686554 (256, 256, 256, 3)
0.169769048691 (256, 256, 256, 3)
0.632494926453 (256, 256, 256, 3)
0.369579076767 (256, 256, 256, 3)
0.160307168961 (256, 256, 256, 3)
0.47083902359 (256, 256, 256, 3)
0.440319061279 (256, 256, 256, 3)
0.534809827805 (256, 256, 256, 3)
0.464602947235 (256, 256, 256, 3)
0.183679103851 (256, 256, 256, 3)
0.605715990067 (256, 256, 256, 3)
0.463223934174 (256, 256, 256, 3)
0.329600095749 (256, 256, 256, 3)
0.181442975998 (256, 256, 256, 3)
0.551628112793 (256, 256, 256, 3)
0.52916097641 (256, 256, 256, 3)
0.172710180283 (256, 256, 256, 3)
0.577185153961 (256, 256, 256, 3)
The utilization of cpu and io is quite low.
"cat /proc/cpu" outputs:
processor       : 39
vendor_id       : GenuineIntel
cpu family      : 6
model           : 63
model name      : Intel(R) Xeon(R) CPU E5-2650 v3 @ 2.30GHz