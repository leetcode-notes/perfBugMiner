tf.layers.conv3d_transpose() gives error

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Linux Ubuntu 16.04.2 LTS (Xenial Xerus)
TensorFlow installed from (source or binary):
binary
TensorFlow version (use command below):
1.2.0-rc2
Bazel version (if compiling from source):
CUDA/cuDNN version:
8/5.1.10
GPU model and memory:
GeForce GTX 1080
Exact command to reproduce:

import tensorflow as tf
x_3d = tf.placeholder(tf.float32,shape=[None,5,5,5,1])
conv_t = tf.layers.conv3d_transpose(x_3d,20,[3,3,3])

Describe the problem
I am getting a TypeError when I use a placeholder with batch size as None as inputs to the conv3d_transpose. This problem does not happen with the tf.layers.conv2d_transpose()
Source code / logs
import tensorflow as tf
x_2d = tf.placeholder(tf.float32,shape=[None,5,5,1])
conv2d_t = tf.layers.conv2d_transpose(x_2d,20,[3,3])
x_3d = tf.placeholder(tf.float32,shape=[None,5,5,5,1])
conv_t = tf.layers.conv3d_transpose(x_3d,20,[3,3,3])



TypeError                                 Traceback (most recent call last)
 in ()
4
5 x_3d = tf.placeholder(tf.float32,shape=[None,5,5,5,1])
----> 6 conv_t = tf.layers.conv3d_transpose(x_3d,20,[3,3,3])
/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/convolutional.pyc in conv3d_transpose(inputs, filters, kernel_size, strides, padding, data_format, activation, use_bias, kernel_initializer, bias_initializer, kernel_regularizer, bias_regularizer, activity_regularizer, trainable, name, reuse)
1538       _reuse=reuse,
1539       _scope=name)
-> 1540   return layer.apply(inputs)
1541
1542
/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.pyc in apply(self, inputs, *args, **kwargs)
490       Output tensor(s).
491     """
--> 492     return self.call(inputs, *args, **kwargs)
493
494   def _assert_input_compatibility(self, inputs):
/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.pyc in call(self, inputs, *args, **kwargs)
439         # Check input assumptions set after layer building, e.g. input shape.
440         self._assert_input_compatibility(inputs)
--> 441         outputs = self.call(inputs, *args, **kwargs)
442
443         # Apply activity regularization.
/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/convolutional.pyc in call(self, inputs)
1456         outputs_4d = array_ops.reshape(outputs, [
1457             outputs_shape[0], outputs_shape[1] * outputs_shape[2],
-> 1458             outputs_shape[3], outputs_shape[4]
1459         ])
1460       outputs_4d = nn.bias_add(
/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_array_ops.pyc in reshape(tensor, shape, name)
2449   """
2450   result = _op_def_lib.apply_op("Reshape", tensor=tensor, shape=shape,
-> 2451                                 name=name)
2452   return result
2453
/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.pyc in apply_op(self, op_type_name, name, **keywords)
491           except TypeError as err:
492             if dtype is None:
--> 493               raise err
494             else:
495               raise TypeError(
TypeError: Failed to convert object of type <type 'list'> to Tensor. Contents: [None, 49, 7, 20]. Consider casting elements to a supported type.