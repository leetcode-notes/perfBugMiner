New features: tf.alphas and tf.alphas_like - Related to #16128

This PR is related to the issue: #16128
I send my work here for peer reviewing and discussion. Please do not merge now.
A few interrogations before merging

Are the names I have chosen fine with everyone or you would like it to be changed to something else ?
Do my implementations seem fine ?
What kind of tests should I implement ? Where shall I put them ?
Is it a good idea to replace the function body of tf.ones/tf.zeros and tf.ones_like/tf.zeros_like by a function call to tf.alphas and tf.alphas_like ? Not doing it would lead to code duplication, however I would understand that you might be reluctant, these functions are at the core of the library.

Why I created these functions ?
I oftenly need to create similar tensors with a non-zero/one value. A simple example would be cost functions in GANs with label smoothing applied.
As stated by @facaiy in #16128, I could use :
b1 = tf.ones_like(a, dtype=tf.float32) * 0.9 # Tensor full of 0.9
b2 = tf.ones_like(a, dtype=tf.int32) * 2 # Tensor full of 2
b4 = tf.ones_like(a, dtype=tf.bool) # Tensor full of True
However, as shown in my later comments in the issue, the method implemented in this PR is almost twice as fast.
In a wider view, I think that using a single function more generic is always a good thing whenever it is possible.
How does the function API work ?
In a very similar manner than the existing ones:
import tensorflow as tf

a = tf.constant([
    [
        [4, 5, 6],
        [1, 2, 3]
    ],
    [
        [4, 5, 6],
        [1, 2, 3]
    ]
])

b1 = tf.alphas_like(a, 0.5431)
b2 = tf.alphas_like(a, 5)
b3 = tf.alphas_like(a, -5)
b4 = tf.alphas_like(a, True)

with tf.Session() as sess:
    _b1, _b2, _b3, _b4 = sess.run([b1, b2, b3, b4])
    
print("b1:", _b1)
print("b2:", _b2)
print("b3:", _b3)
print("b4:", _b4)

############### OUTPUTS ###############

>>> b1: [
  [
    [ 0.5431  0.5431  0.5431]
    [ 0.5431  0.5431  0.5431]
  ]
  [
    [ 0.5431  0.5431  0.5431]
    [ 0.5431  0.5431  0.5431]
  ]
]

>>> b2: [
  [
    [5 5 5]
    [5 5 5]
  ]
  [
    [5 5 5]
    [5 5 5]
  ]
]

>>> b3: [
  [
    [-5 -5 -5]
    [-5 -5 -5]
  ]
  [
    [-5 -5 -5]
    [-5 -5 -5]
  ]
]

>>> b4: [
  [
    [ True  True  True]
    [ True  True  True]
  ]
  [
    [ True  True  True]
    [ True  True  True]
  ]
]

I'm of course free for discussion over video-calls. It's the first time I try to make a change at the core of TF, and I'm quite afraid of breaking everything ;) Thanks for your help btw.
All the best,
Jonathan DEKHTIAR