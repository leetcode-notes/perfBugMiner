Build Tensorflow on Windows with /MT option

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 64-bit
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 1.3.0 release
Python version: 3.6
Bazel version (if compiling from source): - (using CMake 3.9.1)
Exact command to reproduce:

First: add /MT key to CMAKE_CXX_FLAGS_RELEASE in CMakeLists.txt
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT /D_ITERATOR_DEBUG_LEVEL=0")

Then, CMake and build:

$ cmake .. -G"Visual Studio 15 2017 Win64" -Dtensorflow_BUILD_PYTHON_BINDINGS=OFF -Dtensorflow_ENABLE_GRPC_SUPPORT=OFF -Dtensorflow_BUILD_SHARED_LIB=ON
$ MSBuild /m:2 /p:PreferredToolArchitecture=x64 /p:Configuration=Release tensorflow.vcxproj

Describe the problem
I am getting a lot of link errors of the following type for many 3rd party libraries tensorflow links against:
(Link target) ->
         nsync.lib(mu.obj) : error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MD_DynamicRelease' doesn't match value 'MT_StaticRelease' in gen_proto_text_functions.obj [C:\all\lib\tensorflow\tensorflow\contrib\cmake\bu
       ild\proto_text.vcxproj]

I am not really sure if that's supposed to work, so it can be considered a feature request. I would really like to build tensorflow with /MT to make my application as portable as possible.
Currently, I build tensorflow.dll with Visual Studio 2017 and default switches (/MD), and therefore the resulting application requires Microsoft Redistributable C++ libraries for Visual Studio 2017.
If building with /MT is supposed to work, maybe someone could give me a hint how to get it right (and then we can close the issue)? I guess, digging into build options of every third-party library and adding /MT there?