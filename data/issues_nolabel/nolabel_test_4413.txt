Unexpected behaviour for tf.InteractiveSession() in Jupyter Notebook

I'm not convinced this is a bug, but if I run tf.InteractiveSession() in a cell with no assignment (e.g. sess = tf.InteractiveSession()), the interactive session will work only as long as the call is the last operation in the notebook cell and the output is not suppressed with ;. This tripped me over a few times, so I'm reporting it just in case this is not the intended behaviour.
FWIW I think this is because IPython/Jupyter stores the session automatically in the cases I highlighted, making the command alike sess = tf.InteractiveSession() which works as expected.
Environment info
Operating System: Linux
Installed version of CUDA and cuDNN: Using CPU version
If installed from binary pip package, provide:

A link to the pip package you installed: https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.10.0-cp35-cp35m-linux_x86_64.whl
The output from python -c "import tensorflow; print(tensorflow.__version__)". 0.10.0

If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)
I open a Jupyter notebook, and this works:
In [1]: import tensorflow as tf
In [2]: tf.InteractiveSession()
In [3]: tf.constant(0).eval()
This doesn't:
In [1]: import tensorflow as tf
In [2]: tf.InteractiveSession();
In [3]: tf.constant(0).eval()
Neither does this one:
In [1]: import tensorflow as tf
In [2]: tf.InteractiveSession()
        print()
In [3]: tf.constant(0).eval()
The both fail with:
ValueError                                Traceback (most recent call last)
<ipython-input-3-b43e5df4f2f7> in <module>()
----> 1 tf.constant(0).eval()

/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py in eval(self, feed_dict, session)
    557 
    558     """
--> 559     return _eval_using_default_session(self, feed_dict, self.graph, session)
    560 
    561 

/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py in _eval_using_default_session(tensors, feed_dict, graph, session)
   3640     session = get_default_session()
   3641     if session is None:
-> 3642       raise ValueError("Cannot evaluate tensor using `eval()`: No default "
   3643                        "session is registered. Use `with "
   3644                        "sess.as_default()` or pass an explicit session to "

ValueError: Cannot evaluate tensor using `eval()`: No default session is registered. Use `with sess.as_default()` or pass an explicit session to `eval(session=sess)`