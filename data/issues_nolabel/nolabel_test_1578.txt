Release GPU memory after computation

Is it possible to release all resources after computation?
For example,
import time
import tensorflow as tf

for i in range(0,10000000):
  t0 = time.clock()

  with tf.Graph().as_default():
    sess = tf.Session()

    a = tf.placeholder(tf.int16, name='a')
    y = tf.identity(a, name='y')

    sess.run(y, feed_dict={a: 3})
    sess.close()

  time.sleep(20)

print time.clock() - t0
When the program is sleeping, I type nvidia-smi, and the memory is always occupied.
| NVIDIA-SMI 352.79     Driver Version: 352.79         |                       
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  GeForce GTX TIT...  Off  | 0000:03:00.0      On |                  N/A |
| 29%   48C    P2    81W / 250W |   5843MiB /  6143MiB |      1%      Default |
The behavior I have observed is that only after the program exit, the memory is released. It makes using multiprocessing hard. Suppose one process is waited on a lock for another progress to finish, and all two processes need to join the main process. Then when process one release the lock, process two cannot get GPU memory, so it would fail.
Is there any way to release memory, so when the above program(not the two process example) is sleeping, it will release memory?
For bugs or installation issues, please provide the following information.
The more information you provide, the more easily we will be able to offer
help and advice.
Environment info
Operating System:
If installed from binary pip package, provide:

Which pip package you installed.

sudo pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.7.1-cp27-none-linux_x86_64.whl

The output from python -c "import tensorflow; print(tensorflow.version)".

I tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally
I tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally
I tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally
I tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally
0.7.1