Tensorflow bezel command line c options does not pass down to gcc if static object is compiled

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
No.
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
CentOS 7.1
TensorFlow installed from (source or binary):
Source
TensorFlow version (use command below):
1.3 rc1
Python version:
2.7
Bazel version (if compiling from source):
0.5.1
CUDA/cuDNN version:
n/a
GPU model and memory:
n/a
Exact command to reproduce:
bazel build --copt="-DEIGEN_USE_MKL_VML" -c opt //tensorflow/tools/pip_package:build_pip_package -s

Describe the problem
When I compile TensorFlow with bazel, I found the c option I put in the bazel command line only passed to the object file for a dynamic library (with -fPIC option), not the object file for a static library (without -fPIC).
For example, I ran the following command:
bazel build --copt="-DEIGEN_USE_MKL_VML" -c opt //tensorflow/tools/pip_package:build_pip_package -s
I expect -DEIGEN_USE_MKL_VML passed down to gcc, but it does not for *.o. For example, the gcc command line for external/nasm/labels.c is the following:
(cd /nfs/pdx/home/sfu2/.cache/bazel/bazel_sfu2/fec016c4b4f3097e22950dbc1f4b848d/execroot/private-tensorflow && 
exec env - 
LD_LIBRARY_PATH=/nfs/pdx/home/sfu2/gcc/install/lib64:/usr/lib64:/usr/local/lib 
PATH=/nfs/pdx/home/sfu2/bin:/usr/bin:/usr/local/bin/:/usr/lib64/qt-3.3/bin:/nfs/pdx/home/sfu2/perl5/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin 
PWD=/proc/self/cwd 
/usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -B/usr/bin -B/usr/bin -Wunused-but-set-parameter -Wno-free-nonheap-object -fno-omit-frame-pointer -g0 -O2 '-D_FORTIFY_SOURCE=1' -DNDEBUG -ffunction-sections -fdata-sections -g0 -MD -MF bazel-out/host/bin/external/nasm/objs/nasm/external/nasm/labels.d -DHAVE_SNPRINTF -iquote external/nasm -iquote bazel-out/host/genfiles/external/nasm -iquote external/bazel_tools -iquote bazel-out/host/genfiles/external/bazel_tools -isystem external/bazel_tools/tools/cpp/gcc3 -w '-std=c99' -fno-canonical-system-headers -Wno-builtin-macro-redefined '-D__DATE="redacted"' '-D__TIMESTAMP__="redacted"' '-D__TIME__="redacted"' -c external/nasm/labels.c -o bazel-out/host/bin/external/nasm/_objs/nasm/external/nasm/labels.o)
You can see the c option "-DEIGEN_USE_MKL_VML" is not on the command line.
Is it a bug in TensorFlow build script?