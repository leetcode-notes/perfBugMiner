Faulty numpy randomness when using GPU

System information

Have I written custom code: Yes
OS Platform and Distribution: Tested on Slackware Linux 14.2 and Ubuntu 16.04
TensorFlow installed from: binary
TensorFlow version: tested on both 1.4 and 1.6
Python version: 3.6
CUDA/cuDNN version: 8.0 for TF 1.4 and 9.0 for TF 1.6
Bazel version: N/A
GPU model and memory: tested on GTX 960M and GTX 1080
Exact command to reproduce: N/A

Describe the problem
I am unable to reproduce random numbers generated from numpy when I use it in combination with TF. In the beginning of all my tests, I set
tf.set_random_seed(seed)
np.random.seed(seed)

I have been debugging, and when I use numpy and no TF, all results are reproducible. When I add the TF code, the random numbers stop being reproducible. When I use both TF and numpy, I get the following results:

TF variables are initialized to the same value every time (OK)
When I use np.random.RandomState() with a set seed instead of direct calls to np.random.uniform(), np.random.normal(), etc, results are reproducible (OK)
When I use direct calls to np.random.uniform(), np.random.normal(), etc, results are reproducible on CPU but not on GPU (NOT OK)
1080
Since the results are reproducible when using CPU but not GPU, it made me think that this might be a possible bug.

I am not using any threads so the problem is definitely not caused by race conditions. I am monitoring reproducibility of results only by the random numbers which are generated, which are not in any way affected by the training results from the TF neural net. What is really strange is that the piece of code that seems to be affecting the results is the part about computing and backpropagating gradients. I do not expect that this uses any random numbers generated by numpy in the backend. Furthermore, even if it did, the order of my calls to np.random and to sess.run is always deterministic, so the same random numbers should be observed between separate runs.
My code is somewhat too big at the moment to post. I can try to compile some simple example where the issue occurs, but I first wanted to make sure that this is indeed not the expected behavior.