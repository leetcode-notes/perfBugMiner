group generated functions for registered ops into separate files (configurable)

wrappers.go is currently ~15k LOC. The lack of organization - code generated from TF_GetAllOpList is stored in a single file - makes it difficult to grok which functions exist and can work together. Also, there doesn’t appear to be any tests for the funcs in wrappers.go.
This PR is a proof-of-concept that maps groups of functions to smaller wrapper files.  Funcs are mapped using the  wrap_opslist.json config file. Here's an example of the mapping:
{
	"wrappings": [{
		"func-grouping": "conv3D",
		"file-name": "conv3dop.go"
	}, {
		"func-grouping": "conv2D",
		"file-name": "conv2dop.go"
	}, {
		"func-grouping": "fft",
		"file-name": "fftop.go"
	}, {
		"func-grouping": "file",
		"file-name": "fileop.go"
	}, {
		"func-grouping": "iter",
		"file-name": "iterop.go"
	}, {
		"func-grouping": "matrix",
		"file-name": "matrixop.go"
	}, {
		"func-grouping": "loss",
		"file-name": "lossop.go"
	}, {
		"func-grouping": "quant",
		"file-name": "quantop.go"
	}, {
		"func-grouping": "random",
		"file-name": "randomop.go"
	}, {
		"func-grouping": "relu",
		"file-name": "reluop.go"
	}, {
		"func-grouping": "save",
		"file-name": "saveop.go"
	}, {
		"func-grouping": "slice",
		"file-name": "sliceop.go"
	}, {
		"func-grouping": "shape",
		"file-name": "shapeop.go"
	}, {
		"func-grouping": "softmax",
		"file-name": "softmaxop.go"
	}, {
		"func-grouping": "space",
		"file-name": "spaceop.go"
	}, {
		"func-grouping": "sparse",
		"file-name": "sparseop.go"
	}, {
		"func-grouping": "tensor",
		"file-name": "tensorop.go"
	}]
} 

The result of the work in this PR - files are organized into individual files under the op pkg.
There is still a large amount of source in wrappers.go - but more mappings can be done..
I’m certainly willing to change how functions are grouped and make this more configurable.   (e.g. add a func level mapping)
I wanted to see what you thoughts are @asimshankar
Does this PR moving things in the right direction? 
If so, do you have any suggestions for how-to organize functions - or - know someone with whom we should talk to about organizing TF wrapper funcs?
 If not, could you kindly provide direction as-to how to make the go functions that wrap the tensorflow operations to be more approachable?