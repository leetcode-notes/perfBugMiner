[C++ API] safe string to int64 conversion

In short:
strings::safe_strto64("+1", &value)
Throws an error because of the +.
I wrote an Op to read data in the LIBSVM format, which is the following:
<label> <index1>:<value1> <index2>:<value2> ....
The sample data provided at the LIBSVM site uses +1 as label instead of only a 1.
The safe conversion throws an error because of the +:
int64 value;
string label("+1");
OP_REQUIRES(ctx, strings::safe_strto64(label, &value),
            errors::InvalidArgument("Label ", label, 
                                    " is not a valid int64."));  
Traceback when calling the op in python:
Traceback (most recent call last):
  File "/usr/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 1022, in _do_call
    return fn(*args)
  File "/usr/lib/python3.5/site-packages/tensorflow/python/client/session.py", line 1004, in _run_fn
    status, run_metadata)
  File "/usr/lib64/python3.5/contextlib.py", line 66, in __exit__
    next(self.gen)
  File "/usr/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py", line 466, in raise_exception_on_not_ok_status
    pywrap_tensorflow.TF_GetCode(status))
tensorflow.python.framework.errors_impl.InvalidArgumentError: Label +1 is not a valid int64.
	 [[Node: DecodeLibsvm = DecodeLibsvm[OUT_TYPE=DT_INT64, num_features=123, _device="/job:localhost/replica:0/task:0/cpu:0"](shuffle_batch)]]

Is this the wanted behaviour and should I handle this before calling the conversion?