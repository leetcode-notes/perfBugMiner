error looking for libcudart.so.7.0 instead of 7.5 when building from sources (r0.9) even though configured to use cuda 7.5

Summary
I've configured everything to use cuda 7.5 / cudnn 5.0.5. After building from source cc example is working fine with libcudart.so.7.5. However when I import tensorflow in python the import fails saying it's unable to load libcudart.so.7.0 - which doesn't and shouldn't exist on my system. I'm not sure why it's looking for that.
Environment info
Operating System: Linux 3.19.0-59-generic 14.04.1-Ubuntu
Installed version of CUDA and cuDNN: 7.5.18 & 5.0.5

memo@MSA-Blade:~$ ls -l /usr/local/cuda/lib64/libcud*
-rw-r--r-- 1 root root   322936 Aug 15  2015 /usr/local/cuda/lib64/libcudadevrt.a
lrwxrwxrwx 1 root root       16 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.7.5
lrwxrwxrwx 1 root root       19 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5 -> libcudart.so.7.5.18
-rwxr-xr-x 1 root root   383336 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5.18
-rw-r--r-- 1 root root   720192 Aug 15  2015 /usr/local/cuda/lib64/libcudart_static.a
-rwxr-xr-x 1 root root 59909104 Jun  7 10:25 /usr/local/cuda/lib64/libcudnn.so
-rwxr-xr-x 1 root root 59909104 Jun  7 10:25 /usr/local/cuda/lib64/libcudnn.so.5
-rwxr-xr-x 1 root root 59909104 Jun  7 10:25 /usr/local/cuda/lib64/libcudnn.so.5.0.5
-rw-r--r-- 1 root root 58775484 Jun  7 10:25 /usr/local/cuda/lib64/libcudnn_static.a

Note: nvcc is reporting v7.5.17 while installed is v7.5.18

memo@MSA-Blade:$ nvcc --version
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2015 NVIDIA Corporation
Built on Tue_Aug_11_14:27:32_CDT_2015
Cuda compilation tools, release 7.5, V7.5.17
memo@MSA-Blade:$ which nvcc
/usr/local/cuda/bin/nvcc
memo@MSA-Blade:$ ls -l /usr/local/cuda
lrwxrwxrwx 1 root root 8 Jun  7 11:07 /usr/local/cuda -> cuda-7.5
memo@MSA-Blade:$ head /usr/local/cuda/version.txt
CUDA Version 7.5.18

If installed from sources, provide the commit hash:
tried master: a0085c8
and r0.9: f05f72e
Steps to reproduce

uninstalled tensorflow 0.7 and purged cuda 7.0/cudnn 4.0. In fact purged all instances of cuda (and restarted) before each attempt
followed instructions exactly to install cuda 7.5 (from deb) and cudnn 5.0 (to /usr/local/cuda)
reboot
clone tensorflow repo
./configure with no cloud platform support, gpu support
build cc:tutorials_example_trainer (-c opt --config=cuda) -> builds and runs fine


memo@MSA-Blade:~/DEV/tensorflow$ bazel-bin/tensorflow/cc/tutorials_example_trainer --use_gpu
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so.7.5.18 locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so.5.0.5 locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so.7.5.18 locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcuda.so locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so.7.5.18 locally
I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:924] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
I tensorflow/core/common_runtime/gpu/gpu_init.cc:102] Found device 0 with properties:
name: GeForce GTX 970M
major: 5 minor: 2 memoryClockRate (GHz) 1.038
pciBusID 0000:01:00.0
Total memory: 3.00GiB
Free memory: 2.60GiB
I tensorflow/core/common_runtime/gpu/gpu_init.cc:126] DMA: 0
I tensorflow/core/common_runtime/gpu/gpu_init.cc:136] 0:   Y
I tensorflow/core/common_runtime/gpu/gpu_device.cc:807] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 970M, pci bus id: 0000:01:00.0)
I tensorflow/core/common_runtime/gpu/gpu_device.cc:807] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 970M, pci bus id: 0000:01:00.0)
I tensorflow/core/common_runtime/gpu/gpu_device.cc:807] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 970M, pci bus id: 0000:01:00.0)
I tensorflow/core/common_runtime/gpu/gpu_device.cc:807] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 970M, pci bus id: 0000:01:00.0)
I tensorflow/core/common_runtime/gpu/gpu_device.cc:807] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 970M, pci bus id: 0000:01:00.0)
I tensorflow/core/common_runtime/gpu/gpu_device.cc:807] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 970M, pci bus id: 0000:01:00.0)
I tensorflow/core/common_runtime/gpu/gpu_device.cc:807] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 970M, pci bus id: 0000:01:00.0)
I tensorflow/core/common_runtime/gpu/gpu_device.cc:807] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 970M, pci bus id: 0000:01:00.0)
I tensorflow/core/common_runtime/gpu/gpu_device.cc:807] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 970M, pci bus id: 0000:01:00.0)
I tensorflow/core/common_runtime/gpu/gpu_device.cc:807] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 970M, pci bus id: 0000:01:00.0)


build pip package (-c opt --config=cuda), wheel and sudo pip install -> FAILS ON IMPORT


memo@MSA-Blade:/DEV/tensorflow$ bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg
Tue Jun 7 13:08:59 PDT 2016 : === Using tmpdir: /tmp/tmp.wuLJ2u2tY7
/tmp/tmp.wuLJ2u2tY7 /DEV/tensorflow
Tue Jun 7 13:09:00 PDT 2016 : === Building wheel
/DEV/tensorflow
Tue Jun 7 13:09:09 PDT 2016 : === Output wheel file is in: /tmp/tensorflow_pkg
memo@MSA-Blade:/DEV/tensorflow$ ls -al /tmp/tensorflow_pkg/
total 47820
drwxrwxr-x  2 memo memo     4096 Jun  7 13:09 .
drwxrwxrwt 15 root root   118784 Jun  7 13:09 ..
-rw-rw-r--  1 memo memo 48839608 Jun  7 13:09 tensorflow-0.9.0rc0-py2-none-any.whl
memo@MSA-Blade:/DEV/tensorflow$ sudo pip install /tmp/tensorflow_pkg/tensorflow-0.9.0rc0-py2-none-any.whl
[sudo] password for memo:
Unpacking /tmp/tensorflow_pkg/tensorflow-0.9.0rc0-py2-none-any.whl
Requirement already satisfied (use --upgrade to upgrade): numpy>=1.8.2 in /usr/lib/python2.7/dist-packages (from tensorflow==0.9.0rc0)
Requirement already satisfied (use --upgrade to upgrade): protobuf==3.0.0b2 in /usr/local/lib/python2.7/dist-packages (from tensorflow==0.9.0rc0)
Requirement already satisfied (use --upgrade to upgrade): wheel in /usr/local/lib/python2.7/dist-packages (from tensorflow==0.9.0rc0)
Requirement already satisfied (use --upgrade to upgrade): six>=1.10.0 in /usr/local/lib/python2.7/dist-packages (from tensorflow==0.9.0rc0)
Installing collected packages: tensorflow
Successfully installed tensorflow
Cleaning up...
memo@MSA-Blade:/DEV/tensorflow$ cd ..
memo@MSA-Blade:~/DEV$ ipython
Python 2.7.11 |Anaconda 4.0.0 (64-bit)| (default, Dec  6 2015, 18:08:32)
Type "copyright", "credits" or "license" for more information.
IPython 4.1.2 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.
In [1]: import tensorflow
ImportError                               Traceback (most recent call last)
 in ()
----> 1 import tensorflow
/home/memo/anaconda2/lib/python2.7/site-packages/tensorflow/init.py in ()
21 from future import print_function
22
---> 23 from tensorflow.python import *
/home/memo/anaconda2/lib/python2.7/site-packages/tensorflow/python/init.py in ()
47
48 # Import things out of contrib
---> 49 from tensorflow import contrib
50
51 # Framework
/home/memo/anaconda2/lib/python2.7/site-packages/tensorflow/contrib/init.py in ()
21
22 # Add projects here, they will show up under tf.contrib.
---> 23 from tensorflow.contrib import layers
24 from tensorflow.contrib import util
/home/memo/anaconda2/lib/python2.7/site-packages/tensorflow/contrib/layers/init.py in ()
66 # pylint: disable=unused-import,wildcard-import
67 from tensorflow.contrib.layers.python.framework.tensor_util import *
---> 68 from tensorflow.contrib.layers.python.layers import *
/home/memo/anaconda2/lib/python2.7/site-packages/tensorflow/contrib/layers/python/layers/init.py in ()
20
21 # pylint: disable=wildcard-import
---> 22 from tensorflow.contrib.layers.python.layers.initializers import *
23 from tensorflow.contrib.layers.python.layers.layers import *
24 from tensorflow.contrib.layers.python.layers.regularizers import *
/home/memo/anaconda2/lib/python2.7/site-packages/tensorflow/contrib/layers/python/layers/initializers.py in ()
22
23 from tensorflow.python.framework import dtypes
---> 24 from tensorflow.python.ops import random_ops
25
26
/home/memo/anaconda2/lib/python2.7/site-packages/tensorflow/python/ops/random_ops.py in ()
21
22 from tensorflow.python.framework import dtypes
---> 23 from tensorflow.python.framework import ops
24 from tensorflow.python.framework import tensor_shape
25 from tensorflow.python.framework import tensor_util
/home/memo/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.py in ()
37 from tensorflow.python.framework import registry
38 from tensorflow.python.framework import tensor_shape
---> 39 from tensorflow.python.framework import versions
40 from tensorflow.python.util import compat
41 from tensorflow.python.platform import logging
/home/memo/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/versions.py in ()
20 from future import print_function
21
---> 22 from tensorflow.python import pywrap_tensorflow
23
24 version = pywrap_tensorflow.version
/home/memo/anaconda2/lib/python2.7/site-packages/tensorflow/python/pywrap_tensorflow.py in ()
26                 fp.close()
27             return _mod
---> 28     _pywrap_tensorflow = swig_import_helper()
29     del swig_import_helper
30 else:
/home/memo/anaconda2/lib/python2.7/site-packages/tensorflow/python/pywrap_tensorflow.py in swig_import_helper()
22         if fp is not None:
23             try:
---> 24                 _mod = imp.load_module('_pywrap_tensorflow', fp, pathname, description)
25             finally:
26                 fp.close()
ImportError: libcudart.so.7.0: cannot open shared object file: No such file or directory

What have you tried?

tried both master and r0.9 branches
for cuda and cudnn version numbers tried keeping them system default (/usr/local/cuda is symlinked to /usr/local/cuda-7.5) AND tried giving explicit version numbers (cuda: 7.5, 7.5.18; cudnn: 5, 5.0.5 )
If I purge Cuda 7.5 and only use cuda 7.0 / cudnn 4.0.7 it works fine.

Logs or other output that would be helpful