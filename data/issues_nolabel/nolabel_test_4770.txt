bazel-bin/tensorflow/cc/tutorials_example_trainer --use_gpu Failed With Error:could not insert 'nvidia_340_uvm': Invalid argument

I am installing tensorflow from source code since my GTX1080 need CUDA8.0. My installing steps are as following:

pre-installing: Ubuntu14.04 os, Nvidia driver of version numbered 367.48, CUDA8.0 by cuda_8.0.44_linux.run, cuDNN5.1, bazel and jdk8.
download tensorflow source from github, type yes for GPU support during running ./configure and these operations are successful .
But errors stop me to continue tensorflow installing:

zyl@zyl-PC$ bazel build -c opt --config=cuda  //tensorflow/cc:tutorials_example_trainer

- [ ] INFO: From Compiling tensorflow/core/kernels/tile_ops_gpu.cu.cc:
nvcc warning : option '--relaxed-constexpr' has been deprecated and replaced by option '--expt-relaxed-constexpr'.
nvcc warning : option '--relaxed-constexpr' has been deprecated and replaced by option '--expt-relaxed-constexpr'.
Target //tensorflow/cc:tutorials_example_trainer up-to-date:bazel-bin/tensorflow/cc/tutorials_example_trainer

- [ ] INFO: Elapsed time: 1233.946s, Critical Path: 1168.09s
zyl@zyl-PC$ bazel-bin/tensorflow/cc/tutorials_example_trainer --use_gpu
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcublas.so.8.0 locally
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcudnn.so.5 locally
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcufft.so.8.0 locally
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcurand.so.8.0 locally

- [ ] modprobe: ERROR: could not insert 'nvidia_340_uvm': Invalid argument
E tensorflow/stream_executor/cuda/cuda_driver.cc:491] failed call to cuInit: CUDA_ERROR_UNKNOWN
I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:153] retrieving CUDA diagnostic information for host: zyl-PC
I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:160] hostname: zyl-PC
I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:185] libcuda reported version is: 367.48.0
I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:356] driver version 
file contents: """NVRM version: NVIDIA UNIX x86_64 Kernel Module  367.48  Sat Sep  3 18:21:08 PDT 2016 
GCC version:  gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3)"""    
I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:189] kernel reported version is: 367.48.0
I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:293] kernel version seems to match DSO: 367.48.0

- [ ] F tensorflow/cc/tutorials/example_trainer.cc:129] Check failed:
::tensorflow::Status::OK() == (session->Run({{"x", x}}, 
{"y:0", "y_normalized:0"}, {}, &outputs)) 
(OK vs. Invalid argument: Cannot assign a device to node 'Cast': Could not satisfy explicit device specification '/gpu:0' 
because no devices matching that specification are registered in this process; 
available devices: /job:localhost/replica:0/task:0/cpu:0 

- [ ] [[Node:Cast = Cast[DstT=DT_FLOAT, SrcT=DT_INT32, _device="/gpu:0"](Const)]])
Aborted (core dumped)"


the tensorflow is failed to install from source code at the step of "$ bazel-bin/tensorflow/cc/tutorials_example_trainer --use_gpu" as discribed above. Obviously, both gpu and tensorflow would not be available.
Anyone who sucessed in installing tensorflow and cuda8.0 can help me to fix it?