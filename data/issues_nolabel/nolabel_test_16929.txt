Tensorflow Lite toco convert a quantized model to tflite format crash error

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): N
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 17.10
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): r1.5 / r1.6
Python version: python2.7 / python 3.6
Bazel version (if compiling from source): bazel release 0.9.0
GCC/Compiler version (if compiling from source): GCC/G++ 7.2.0,
CUDA/cuDNN version: none
GPU model and memory: none
Exact command to reproduce: detail description in below

Describe the problem
I use facenet framework which base on Inception_resnet_v1 to recognize face, and i use below command to quantize and convert a freeze graph pb file to tflite format:
quantize cmd:
bazel-bin/tensorflow/tools/graph_transforms/transform_graph 
--in_graph=/home/andy/datasets/facenet/facenet_model.pb 
--out_graph=/home/andy/datasets/facenet/facenet_model_quantized.pb 
--inputs=input:0 
--outputs=embeddings:0 
--transforms='strip_unused_nodes(type=float, shape="1,160,160,3")
remove_nodes(op=Identity, op=CheckNumerics)
fold_old_batch_norms
quantize_weights
strip_unused_nodes
sort_by_execution_order'
toco convert cmd:
bazel-bin/tensorflow/contrib/lite/toco/toco 
--input_format=TENSORFLOW_GRAPHDEF 
--input_file=/home/andy/datasets/facenet/facenet_model_quantized.pb 
--output_format=TFLITE 
--output_file=/home/andy/datasets/facenet/facenet_model_quantized.lite 
--inference_type=QUANTIZED_UINT8 
--inference_input_type=QUANTIZED_UINT8 
--input_arrays=input 
--output_arrays=embeddings 
--input_shapes=1,160,160,3
--mean_values=128 
--std_values=128 
--default_ranges_min=0 
--default_ranges_max=6
I sure facenet_model.pb and facenet_model_quantized.pb can be run normal, but when toco convert the quantized model to tensorflow lite format it crash below error:
2018-02-11 16:52:44.901519: I tensorflow/contrib/lite/toco/import_tensorflow.cc:1171] Converting unsupported operation: Dequantize 2018-02-11 16:52:44.901544: I tensorflow/contrib/lite/toco/import_tensorflow.cc:1171] Converting unsupported operation: Dequantize 2018-02-11 16:52:44.906789: I tensorflow/contrib/lite/toco/import_tensorflow.cc:1171] Converting unsupported operation: RandomUniform 2018-02-11 16:52:45.171561: I tensorflow/contrib/lite/toco/graph_transformations/graph_transformations.cc:39] Before Removing unused ops: 3003 operators, 5620 arrays (0 quantized) 2018-02-11 16:52:45.309297: I tensorflow/contrib/lite/toco/graph_transformations/graph_transformations.cc:39] After Removing unused ops pass 1: 2890 operators, 5394 arrays (0 quantized) 2018-02-11 16:52:45.486937: I tensorflow/contrib/lite/toco/graph_transformations/graph_transformations.cc:39] Before general graph transformations: 2890 operators, 5394 arrays (0 quantized) 2018-02-11 16:52:45.489630: F tensorflow/contrib/lite/toco/graph_transformations/resolve_tensorflow_switch.cc:48] Check failed: predicate_array.data_type == ArrayDataType::kBool Aborted (core dumped)
for resolve the issue i add some debug code before the line of resolve_tensorflow_switch.cc:48, it's like that:
LOG(INFO) << "###### predicate_name: " << LogName(*switch_op);
LOG(INFO) << "###### predicate_name: " << predicate_name;
switch (predicate_array.data_type) {
case ArrayDataType::kBool:
LOG(INFO) << "###### predicate_array.data_type kBool";
break;
case ArrayDataType::kFloat:
LOG(INFO) << "###### predicate_array.data_type kFloat";
break;
case ArrayDataType::kUint8:
LOG(INFO) << "###### predicate_array.data_type kUint8";
break;
case ArrayDataType::kInt32:
LOG(INFO) << "###### predicate_array.data_type kInt32";
break;
case ArrayDataType::kInt64:
LOG(INFO) << "###### predicate_array.data_type kInt64";
break;
case ArrayDataType::kNone:
LOG(INFO) << "###### predicate_array.data_type kNone";
break;
default:
LOG(INFO) << "###### predicate_array.data_type not know";
}
then, i rebuild the toco, and rerun the convert cmd, log show that:
2018-02-11 17:01:34.481749: I tensorflow/contrib/lite/toco/import_tensorflow.cc:1171] Converting unsupported operation: Dequantize 2018-02-11 17:01:34.486969: I tensorflow/contrib/lite/toco/import_tensorflow.cc:1171] Converting unsupported operation: RandomUniform 2018-02-11 17:01:34.752556: I tensorflow/contrib/lite/toco/graph_transformations/graph_transformations.cc:39] Before Removing unused ops: 3003 operators, 5620 arrays (0 quantized) 2018-02-11 17:01:34.888735: I tensorflow/contrib/lite/toco/graph_transformations/graph_transformations.cc:39] After Removing unused ops pass 1: 2890 operators, 5394 arrays (0 quantized) 2018-02-11 17:01:35.063875: I tensorflow/contrib/lite/toco/graph_transformations/graph_transformations.cc:39] Before general graph transformations: 2890 operators, 5394 arrays (0 quantized) 2018-02-11 17:01:35.066550: I tensorflow/contrib/lite/toco/graph_transformations/resolve_tensorflow_switch.cc:48] ###### predicate_name: {TensorFlowSwitch operator with output InceptionResnetV1/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_4} 2018-02-11 17:01:35.066558: I tensorflow/contrib/lite/toco/graph_transformations/resolve_tensorflow_switch.cc:49] ###### predicate_name: Const_1 2018-02-11 17:01:35.066562: I tensorflow/contrib/lite/toco/graph_transformations/resolve_tensorflow_switch.cc:67] ###### predicate_array.data_type kNone 2018-02-11 17:01:35.066565: F tensorflow/contrib/lite/toco/graph_transformations/resolve_tensorflow_switch.cc:72] Check failed: predicate_array.data_type == ArrayDataType::kBool Aborted (core dumped)
i don't know why the "predicate_name: Const_1" of op "InceptionResnetV1/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_4" it's data type is KNone, but the function ResolveTensorFlowSwitch::Run request it's data type should be KBool. The Inception_resnet_v1 Bottleneck is in a fully connect layer, and relation code show below:
`
end_points = {}
with tf.variable_scope(scope, 'InceptionResnetV1', [inputs], reuse=reuse):
    with slim.arg_scope([slim.batch_norm, slim.dropout],
                        is_training=is_training):
        with slim.arg_scope([slim.conv2d, slim.max_pool2d, slim.avg_pool2d],
                            stride=1, padding='SAME'):
  
            # 149 x 149 x 32
            net = slim.conv2d(inputs, 32, 3, stride=2, padding='VALID',
                              scope='Conv2d_1a_3x3')
            end_points['Conv2d_1a_3x3'] = net
            # 147 x 147 x 32
            net = slim.conv2d(net, 32, 3, padding='VALID',
                              scope='Conv2d_2a_3x3')
            end_points['Conv2d_2a_3x3'] = net
            # 147 x 147 x 64
            net = slim.conv2d(net, 64, 3, scope='Conv2d_2b_3x3')
            end_points['Conv2d_2b_3x3'] = net
            # 73 x 73 x 64
            net = slim.max_pool2d(net, 3, stride=2, padding='VALID',
                                  scope='MaxPool_3a_3x3')
            end_points['MaxPool_3a_3x3'] = net
            # 73 x 73 x 80
            net = slim.conv2d(net, 80, 1, padding='VALID',
                              scope='Conv2d_3b_1x1')
            end_points['Conv2d_3b_1x1'] = net
            # 71 x 71 x 192
            net = slim.conv2d(net, 192, 3, padding='VALID',
                              scope='Conv2d_4a_3x3')
            end_points['Conv2d_4a_3x3'] = net
            # 35 x 35 x 256
            net = slim.conv2d(net, 256, 3, stride=2, padding='VALID',
                              scope='Conv2d_4b_3x3')
            end_points['Conv2d_4b_3x3'] = net
            
            # 5 x Inception-resnet-A
            net = slim.repeat(net, 5, block35, scale=0.17)
            end_points['Mixed_5a'] = net
    
            # Reduction-A
            with tf.variable_scope('Mixed_6a'):
                net = reduction_a(net, 192, 192, 256, 384)
            end_points['Mixed_6a'] = net
            
            # 10 x Inception-Resnet-B
            net = slim.repeat(net, 10, block17, scale=0.10)
            end_points['Mixed_6b'] = net
            
            # Reduction-B
            with tf.variable_scope('Mixed_7a'):
                net = reduction_b(net)
            end_points['Mixed_7a'] = net
            
            # 5 x Inception-Resnet-C
            net = slim.repeat(net, 5, block8, scale=0.20)
            end_points['Mixed_8a'] = net
            
            net = block8(net, activation_fn=None)
            end_points['Mixed_8b'] = net
            
            with tf.variable_scope('Logits'):
                end_points['PrePool'] = net
                #pylint: disable=no-member
                net = slim.avg_pool2d(net, net.get_shape()[1:3], padding='VALID',
                                      scope='AvgPool_1a_8x8')
                net = slim.flatten(net)
      
                net = slim.dropout(net, dropout_keep_prob, is_training=is_training,
                                   scope='Dropout')
      
                end_points['PreLogitsFlatten'] = net
            
            net = slim.fully_connected(net, bottleneck_layer_size, activation_fn=None, 
                    scope='Bottleneck', reuse=False)

return net, end_points

`
how can i solve the issue, and which step of convert cmd is it wrong?
i hold someone can help me, thanks!