random crashes while serving multiple frozen models in parallel using go api

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):

Yes, I have written custom code

OS Platform and Distribution (e.g., Linux Ubuntu 16.04):

Linux x86_64 SLES12

TensorFlow installed from (source or binary):

Source, latest master at the moment

TensorFlow version (use command below):

('v1.3.0-rc1-2265-g6e7539b', '1.4.0-dev')
I also tried r1.3 with similar result.

Python version:

Python 2.7.9

Bazel version (if compiling from source):

Build label: 0.5.4
Build target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar
Build time: Fri Aug 25 10:00:00 2017 (1503655200)
Build timestamp: 1503655200
Build timestamp as int: 1503655200

CUDA/cuDNN version:

Not used.

GPU model and memory:

Not used.

Exact command to reproduce:

$ ./tfcrash --n_models 16 --n_images 100
An output of this program can be different. The bug has random nature. In some cases the process just segfaults. Typical output is:
$ ./tfcrash --n_models 16 --n_images 100
2017/09/18 16:45:43 setting 8 cpu
2017/09/18 16:45:43 launching 16 models
2017/09/18 16:45:43 feeding 100 images
2017/09/18 16:45:43 waiting
2017/09/18 16:45:51 session.Run() failed: Expects arg[0] to be uint8 but INVALID is provided
Or:
$ ./tfcrash
2017/09/18 16:57:54 setting 8 cpu
2017/09/18 16:57:54 launching 16 models
2017/09/18 16:57:54 feeding 100 images
2017/09/18 16:57:54 waiting
Segmentation fault (core dumped)
Describe the problem
I'm trying to serve predictions from multiple frozen models that I have trained and generated previously using python script. My programming language for serving predictions is golang. I have found that sometimes my process crashes randomly. Exact conditions needed to reproduce this behaviour are unknown. It is also unknown if this bug related to golang bindings or tensorflow itself.
I also tried different builds of tensorflow, all of them are affected so far, including one built with cuda support. I also noticed that setting lower numbers for --n_images and --n_models parameters decreases probability of bug reproduction. In my experience setting --n_models to 16 and up gives 100% probability of crash.
I tried both go-1.8.3 and go-1.9 with similar result.
Source code / logs
I wrote a short program (less than 100 lines in go) which is able to reproduce crash with >90% probability:
https://gist.github.com/a33c892b17d9ec1da1e40e4fb68fdcf9
The model file (type: .frozen.pb, size: 34Mb): https://drive.google.com/file/d/0B9jZHp3Hh0s2MnAxekRGYlVTVHM/