Update adding_an_op.md

I am proposing several changes to this file.  I am a new user to TF, and used this documentation extensively while trying to put a together my custom activation function, since I wanted to explore how different activation functions might affect NN training and performace.  I eventually figured out everything I needed to know, but it took weeks because this documentation is lacking in several areas, so I have a good feel for how this documentation can be improved to make life easier for future new users.  Changes 1 and 2 are pretty clear and I expect to not be controversial.  Change 3 you will probably need to think about, and might want to do further work to make things more clear.


correct example.cc (221-228):
I added a REGISTER_OP macro to the "example" code.  The previous absence of these lines was clearly an omission in the documentaion - the example code does not work without this line.  This is the least controversial change I am making.


explain how to use Bazel to compile a CUDA op (1256-1272:
I eventually figured out how to do this on my own, but it sure would have been useful had this information been in this documentation.


explaining how the gradient actually works in TF (1293-1301):
Now that I know the answer, I can read the documentation and sort of parse what it means, but I found this extremely confusing when I was reading it for the first (and tenth) time.  I have a masters in physics, so I understand calculus, but it wasn't until I had implemented backpropagation twice by hand and spent a bunch of time trying to imagine how TF must be working under the hood before I got this.  So I was tempted to delete this entire section and start over.  But I am not sure I can win this battle, because a major portion of what makes this confusing for me is the way TF uses the word gradient.  The thing that all of the TF documentation refers to as "gradient" I would much prefer to refer to as "error".  But I doubt I am going to get everybody to change everything.


So I have opted to just append another paragraph to this section, which I hope will explain things better.  It might be nice to update the mathematical notation a little bit, but since I am currently making these edits in a simple text editor I don't want to wade too deeply into trying to figure out the notation.

Putting it all together (1467-1778):
I was able to find pieces of example code while googling, but somehow I wasn't really able to find a complete tutorial that documented all of the steps start to finish of designing and using a custom activation function.  So I think it might be useful to post a complete example here which is just complicated enough to demonstrate all the parts needed to write a custom activation function working together.  But you might decide that this belongs elsewhere.