TensorBoard charts blank on Firefox

NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.
For general support from the community, see StackOverflow.
To make bugs and feature requests more easy to find and organize, we close issues that are deemed
out of scope for GitHub Issues and point people to StackOverflow.
For bugs or installation issues, please provide the following information.
The more information you provide, the more easily we will be able to offer
help and advice.
What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?
I have not found any related issues
Environment info
Operating System:
Ubuntu 16.04
Installed version of CUDA and cuDNN:
(please attach the output of ls -l /path/to/cuda/lib/libcud*):

rik@rik-MS-7971:~$ ls -l /usr/local/cuda/lib64/libcud*
-rw-r--r-- 1 root root   560184 Sep 23 09:09 /usr/local/cuda/lib64/libcudadevrt.a
lrwxrwxrwx 1 root root       16 Sep 23 09:09 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.8.0
lrwxrwxrwx 1 root root       19 Sep 23 09:09 /usr/local/cuda/lib64/libcudart.so.8.0 -> libcudart.so.8.0.27
-rwxr-xr-x 1 root root   394472 Sep 23 09:09 /usr/local/cuda/lib64/libcudart.so.8.0.27
-rw-r--r-- 1 root root   737516 Sep 23 09:09 /usr/local/cuda/lib64/libcudart_static.a
lrwxrwxrwx 1 rik  rik        13 Jul 27 01:55 /usr/local/cuda/lib64/libcudnn.so -> libcudnn.so.5
lrwxrwxrwx 1 rik  rik        17 Jul 27 01:55 /usr/local/cuda/lib64/libcudnn.so.5 -> libcudnn.so.5.1.5
-rwxrwxr-x 1 rik  rik  79337624 Sep 26 21:55 /usr/local/cuda/lib64/libcudnn.so.5.1.5
-rw-rw-r-- 1 rik  rik  69756172 Sep 26 21:55 /usr/local/cuda/lib64/libcudnn_static.a

If installed from binary pip package, provide:

A link to the pip package you installed:
The output from python -c "import tensorflow; print(tensorflow.__version__)".

rik@rik-MS-7971:~$ python -c "import tensorflow; print(tensorflow.__version__)"
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcublas.so locally
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcudnn.so locally
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcufft.so locally
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcurand.so locally
0.11.0rc0

If installed from source, provide

The commit hash (git rev-parse HEAD)
The output of bazel version

If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)
What other attempted solutions have you tried?
Tried erasing files from logdir and re-running. Tried running mnist with summaries tutorial, this is also blank charts
Logs or other output that would be helpful
(If logs are large, please upload as attachment or provide link).

All, when running MNIST with Summaries example charts exist on events and distribution tabs, they are blank. Histograms and appear correct. Also, code is running slow compated to non-tensorboard version. Please help, Thanks. Below is output.
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcublas.so locally
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcudnn.so locally
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcufft.so locally
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcurand.so locally
Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.
Extracting /tmp/data/train-images-idx3-ubyte.gz
Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.
Extracting /tmp/data/train-labels-idx1-ubyte.gz
Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.
Extracting /tmp/data/t10k-images-idx3-ubyte.gz
Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.
Extracting /tmp/data/t10k-labels-idx1-ubyte.gz
I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:925] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
I tensorflow/core/common_runtime/gpu/gpu_device.cc:951] Found device 0 with properties: 
name: GeForce GTX 1080
major: 6 minor: 1 memoryClockRate (GHz) 1.797
pciBusID 0000:01:00.0
Total memory: 7.92GiB
Free memory: 7.36GiB
I tensorflow/core/common_runtime/gpu/gpu_device.cc:972] DMA: 0 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:982] 0:   Y 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:1041] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:01:00.0)
Accuracy at step 0: 0.0802
Accuracy at step 10: 0.6788
Accuracy at step 20: 0.8217
Accuracy at step 30: 0.8495
Accuracy at step 40: 0.8734
Accuracy at step 50: 0.8794
Accuracy at step 60: 0.8847
Accuracy at step 70: 0.8863
Accuracy at step 80: 0.8898
Accuracy at step 90: 0.8939
I tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcupti.so locally
Adding run metadata for 99
Accuracy at step 100: 0.9015
Accuracy at step 110: 0.9132
Accuracy at step 120: 0.9163
Accuracy at step 130: 0.9197
Accuracy at step 140: 0.9252
Accuracy at step 150: 0.9182
Accuracy at step 160: 0.9283
Accuracy at step 170: 0.9243
Accuracy at step 180: 0.9231
Accuracy at step 190: 0.9266
Adding run metadata for 199
Accuracy at step 200: 0.9327
Accuracy at step 210: 0.9336
Accuracy at step 220: 0.9329
Accuracy at step 230: 0.9311
Accuracy at step 240: 0.9308
Accuracy at step 250: 0.9214
Accuracy at step 260: 0.9324
Accuracy at step 270: 0.9393
Accuracy at step 280: 0.9327
Accuracy at step 290: 0.9401
Adding run metadata for 299
Accuracy at step 300: 0.9442
Accuracy at step 310: 0.9405
Accuracy at step 320: 0.9424
Accuracy at step 330: 0.9425
Accuracy at step 340: 0.9468
Accuracy at step 350: 0.9461
Accuracy at step 360: 0.9427
Accuracy at step 370: 0.9434
Accuracy at step 380: 0.9474
Accuracy at step 390: 0.9449
Adding run metadata for 399
Accuracy at step 400: 0.9443
Accuracy at step 410: 0.9449
Accuracy at step 420: 0.9474
Accuracy at step 430: 0.9455
Accuracy at step 440: 0.952
Accuracy at step 450: 0.9505
Accuracy at step 460: 0.9525
Accuracy at step 470: 0.9493
Accuracy at step 480: 0.9489
Accuracy at step 490: 0.9515
Adding run metadata for 499
Accuracy at step 500: 0.9517
Accuracy at step 510: 0.9515
Accuracy at step 520: 0.9499
Accuracy at step 530: 0.9539
Accuracy at step 540: 0.9548
Accuracy at step 550: 0.9573
Accuracy at step 560: 0.9548
Accuracy at step 570: 0.9569
Accuracy at step 580: 0.9552
Accuracy at step 590: 0.9548
Adding run metadata for 599
Accuracy at step 600: 0.9551
Accuracy at step 610: 0.9535
Accuracy at step 620: 0.96
Accuracy at step 630: 0.9599
Accuracy at step 640: 0.9603
Accuracy at step 650: 0.9616
Accuracy at step 660: 0.9617
Accuracy at step 670: 0.9623
Accuracy at step 680: 0.9613
Accuracy at step 690: 0.9614
Adding run metadata for 699
Accuracy at step 700: 0.9592
Accuracy at step 710: 0.9614
Accuracy at step 720: 0.9595
Accuracy at step 730: 0.9646
Accuracy at step 740: 0.9636
Accuracy at step 750: 0.964
Accuracy at step 760: 0.9656
Accuracy at step 770: 0.9616
Accuracy at step 780: 0.9631
Accuracy at step 790: 0.964
Adding run metadata for 799
Accuracy at step 800: 0.9637
Accuracy at step 810: 0.9637
Accuracy at step 820: 0.9653
Accuracy at step 830: 0.9636
Accuracy at step 840: 0.9615
Accuracy at step 850: 0.9654
Accuracy at step 860: 0.9668
Accuracy at step 870: 0.9653
Accuracy at step 880: 0.965
Accuracy at step 890: 0.9645
Adding run metadata for 899
Accuracy at step 900: 0.9664
Accuracy at step 910: 0.967
Accuracy at step 920: 0.9658
Accuracy at step 930: 0.9664
Accuracy at step 940: 0.9671
Accuracy at step 950: 0.967
Accuracy at step 960: 0.9663
Accuracy at step 970: 0.968
Accuracy at step 980: 0.9679
Accuracy at step 990: 0.9666
Adding run metadata for 999