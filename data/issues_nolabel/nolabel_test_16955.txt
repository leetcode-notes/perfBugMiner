Row wise lookup table in Tensorflow

Currently I have a matrix in which each row is a lookup table. Corresponding to it I have a coded matrix with the same number of rows as the lookup table. e.g.

LookupTable (matrix size 100, 32)


CodedMatrix (matrix size 100, 1000)

So the lookup table values match to the corresponding row of the coded matrix. The code matrix contains numbers from 0 to 31 which have a corresponding value in the Lookup table for that specific row.
The final output of this should be

DecodedMatrix(matrix size 100, 1000)

In which each value of the row is replaced with it's corresponding lookup output.
Currently in numpy I use a for loop, because at the end I sum up the decoded matrix along the row axis for the final output. The code looks like this
   out = sum([C[L] for C,L in zip(CodedMatrix, LookupTable)])

which is a still inefficient. But in Tensorflow I use
 nRows = tf.constant(100, name="nRows")
 n     = tf.Variable(tf.constant(0))

 def cond(n, out):
     return n < nRows

 def body(n, out):  
     out = out + tf.gather(LookupTable[m,:], CodedMatrix[m,:])
     return n+1, out

 out = tf.while_loop(cond, body, [n, out])[1]

This execution takes a lot of time, because each time a new tensor is created and using the loop isn't very efficient.
Is there a way to do this without using while loop? Does tf.gather have any setup to do lookup like this?
Have I written custom code - Yes
OS Platform and Distribution - Mac OS X High Sierra
TensorFlow installed from - Source
TensorFlow version - 1.5.0-rc0
Bazel version - 0.5.4
CUDA/cuDNN version - N/A
GPU model and memory - N/A
Exact command to reproduce - Provided aboce