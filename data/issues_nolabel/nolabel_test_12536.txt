Eager execution API strided slice problem.

@alextp there seems to be a problem with eagerly executing strided slice ops. The problem seems to be in the shape inference component and is non-deterministic. If you add the following code in the eager/c_api_test.cc file and run the test multiple times, you'll notice that sometimes it succeeds and sometimes it fails, randomly. More specifically, I get errors related to the strides input tensor, but I think this may have to do with how the memory is managed for eager tensors:
TFE_TensorHandle* TestBeginTensorHandle() {
  int64_t dims[] = {2};
  int data[] = {1, 0};
  TF_Tensor* t = TF_AllocateTensor(
      TF_INT32, &dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));
  memcpy(TF_TensorData(t), &data[0], TF_TensorByteSize(t));
  TFE_TensorHandle* th = TFE_NewTensorHandle(t);
  TF_DeleteTensor(t);
  return th;
}

TFE_TensorHandle* TestEndTensorHandle() {
  int64_t dims[] = {2};
  int data[] = {2, 1};
  TF_Tensor* t = TF_AllocateTensor(
      TF_INT32, &dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));
  memcpy(TF_TensorData(t), &data[0], TF_TensorByteSize(t));
  TFE_TensorHandle* th = TFE_NewTensorHandle(t);
  TF_DeleteTensor(t);
  return th;
}

TFE_TensorHandle* TestStridesTensorHandle() {
  int64_t dims[] = {2};
  int data[] = {1};
  TF_Tensor* t = TF_AllocateTensor(
      TF_INT32, &dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));
  memcpy(TF_TensorData(t), &data[0], TF_TensorByteSize(t));
  TFE_TensorHandle* th = TFE_NewTensorHandle(t);
  TF_DeleteTensor(t);
  return th;
}

TEST(CAPI, ExecuteStridedSlice) {
  TF_Status* status = TF_NewStatus();
  TF_SessionOptions* opts = TF_NewSessionOptions();
  TFE_Context* ctx = TFE_NewContext(opts, status);
  CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);
  TF_DeleteSessionOptions(opts);

  TFE_TensorHandle* a = TestMatrixTensorHandle();
  TFE_TensorHandle* begin = TestBeginTensorHandle();
  TFE_TensorHandle* end = TestEndTensorHandle();
  TFE_TensorHandle* strides = TestStridesTensorHandle();
  TFE_Op* op = TFE_NewOp(ctx, "StridedSlice", status);
  CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);
  TFE_OpAddInput(op, a, status);
  CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);
  TFE_OpAddInput(op, begin, status);
  CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);
  TFE_OpAddInput(op, end, status);
  CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);
  TFE_OpAddInput(op, strides, status);
  CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);
  TFE_OpSetAttrType(op, "T", TFE_TensorHandleDataType(a));
  TFE_OpSetAttrType(op, "Index", TFE_TensorHandleDataType(begin));
  TFE_OpSetAttrInt(op, "begin_mask", 0);
  TFE_OpSetAttrInt(op, "end_mask", 0);
  TFE_OpSetAttrInt(op, "ellipsis_mask", 0);
  TFE_OpSetAttrInt(op, "new_axis_mask", 0);
  TFE_OpSetAttrInt(op, "shrink_axis_mask", 3);

  TFE_TensorHandle* retvals[2] = {nullptr};
  int num_retvals = 2;  // Should be reduced to 1 by the TFE_Execute call.
  TFE_Execute(op, &retvals[0], &num_retvals, status);
  EXPECT_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);
  TFE_DeleteOp(op);
  TFE_DeleteTensorHandle(a);
  TFE_DeleteTensorHandle(begin);
  TFE_DeleteTensorHandle(end);
  TFE_DeleteTensorHandle(strides);
  TFE_DeleteContext(ctx, status);
  ASSERT_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);
  ASSERT_EQ(1, num_retvals);

  TF_Tensor* t = TFE_TensorHandleResolve(retvals[0], status);
  TFE_DeleteTensorHandle(retvals[0]);
  ASSERT_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);
  float result[1] = {0};
  EXPECT_EQ(sizeof(result), TF_TensorByteSize(t));
  memcpy(&result[0], TF_TensorData(t), TF_TensorByteSize(t));
  TF_DeleteTensor(t);
  EXPECT_EQ(3, result[0]);
  TF_DeleteStatus(status);
}