thread pool does not execute all remaining tasks on shutdown

ThreadPool claims to finish all remaining work on shutdown. This is not the case. If remaining tasks submit new tasks, the new tasks do not get executed. This happens because the sentinel tasks are fetched before the newly submitted real tasks.
ThreadPool must either execute all pending work, or execute nothing on shutdown. It does not make sense to execute half of work.
Here is a repro:
static void BM_ParallelDivide(int iters, const char* impl) {
  THREAD_POOL_IMPL_NAME = impl;
  for (int i = 0; i < iters; i++) {
    const int kTasks = 10;
    const int kLevels = 22;
    std::atomic<unsigned> count(kTasks * (1 << kLevels));
    mutex done_lock;
    condition_variable done;
    bool done_flag = false;
    std::function<void(int)> work;
    ThreadPool pool(Env::Default(), "test", kNumThreads);
    work = [&pool, &work, &count, &done_lock, &done, &done_flag](int level) {
      if (level-- > 0) {
        pool.Schedule([&work, level]() { work(level); });
        pool.Schedule([&work, level]() { work(level); });
        return;
      }
      delay();
    };
    for (int t = 0; t < kTasks; ++t) {
      pool.Schedule([&work]() {
        work(kLevels);
      });
    }
  }
}