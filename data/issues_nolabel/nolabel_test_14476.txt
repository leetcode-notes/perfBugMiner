IOS camera example load map_data  from in_pix is incorrect!

//    for (int y = 0; y < wanted_input_height; ++y) {
//        float *out_row = out + (y * wanted_input_width * wanted_input_channels); //0+height
//        for (int x = 0; x < wanted_input_width; ++x) {
//            const int in_x = (y * image_width) / wanted_input_width;
//            const int in_y = (x * image_height) / wanted_input_height;
//            tensorflow::uint8 *in_pixel =
//            in + (in_y * image_width * image_channels) + (in_x * image_channels);
//            float *out_pixel = out_row + (x * wanted_input_channels);
//            for (int c = 0; c < wanted_input_channels; ++c) {
//                out_pixel[c] = (in_pixel[c] - input_mean) / input_std;
//            }
//        }
//    }
fixed code ï¼šrotoate 90 and resized
for (int y = 0; y < wanted_input_width; ++y) {
float *out_row = out + (y * wanted_input_width * wanted_input_channels);
for (int x = 0; x < wanted_input_height; ++x) {
const int in_x = (y * image_width) / wanted_input_width;
const int in_y =image_height - (x * image_height) / wanted_input_height;
tensorflow::uint8 *in_pixel =
in + (in_y * image_width * image_channels) + (in_x * image_channels);
float *out_pixel = out_row + (x * wanted_input_channels);
for (int c = 0; c < wanted_input_channels; ++c) {
out_pixel[c] = (in_pixel[c] - input_mean) / input_std;
}
}
}