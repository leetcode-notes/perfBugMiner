`variable_scope` use `auxiliary_name_scope` to control whether to create new name scope

Now variable_scope always create a new name scope (side-effect?) when invoked. The behavior will result in name scope collision mentioned in #13429 . Hence we proposed to add a parameter auxiliary_name_scope to control whether to create new name scope or not.
If accepted, we can reenter variable_scope and its original name scope without side-effect:
with tf.variable_scope(s, auxiliary_name_scope=False) as ss:
     with tf.name_scope(ss.original_name_scope) as n:
          # do something
How to test

 add unit tests
 pass all tests.