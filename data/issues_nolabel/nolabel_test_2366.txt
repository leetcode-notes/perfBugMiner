Functional ops don't accept Python lists as input.

See error reported in this Stack Overflow question:

import tensorflow as tf
elems = [1, 2, 3, 4, 5, 6]
squares = tf.map_fn(lambda x: x * x, elems)
Running this gives this error:
/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/tensor_util.pyc in make_tensor_proto(values, dtype, shape)
    323   else:
    324     if values is None:
--> 325       raise ValueError("None values not supported.")
    326     # if dtype is provided, forces numpy array to be the type
    327     # provided if possible.

ValueError: None values not supported.


The functions in functional_ops.py each expect their elems inputs to have a dtype property. As a side-issue, they convert their input to a tensor multiple times (implicitly on use), which could create a wasteful number of constants if the input is a numpy array.