tensorflor cond(pred, fn1, fn2) evaluate fn1 and fn2 together regardless of pred

import tensorflow as tf
import numpy as np

isTrain = tf.placeholder(tf.bool)
user_input = tf.placeholder(tf.float32)

with tf.device('/cpu:0'):
    alpha = tf.Variable(tf.zeros([1]))
    beta = tf.Variable(tf.zeros([1]))

    c = tf.Variable(tf.zeros([1]))

    alpha_incre = alpha.assign(alpha + 1)
    beta_incre = beta.assign(beta + 1)

    def train():
        with tf.control_dependencies([ alpha_incre ]):
            return c.assign(user_input + user_input)

    def test():
        with tf.control_dependencies([ beta_incre ]):
            return c.assign(user_input)

    result = tf.cond(isTrain,
        train,
        test
    )

init = tf.initialize_all_variables()
sess = tf.Session()
sess.run(init)

aa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: True })
print("Train", aa)
aa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: False })
print("Test", aa)

Environment info
ubuntu 14.04
If installed from binary pip package, provide:
tensorflow 0.7.1
Steps to reproduce

run the code example, expecting to see

output

iteratio 1: to see alpha = 1, beta = 1
iteratio 2: to see alpha = 2, beta = 2

expected

iteratio 1: to see alpha = 1, beta = 0
iteratio 2: to see alpha = 1, beta = 1

What have you tried?

Changing the code structure slightly will provide the expected output

import tensorflow as tf
import numpy as np

isTrain = tf.placeholder(tf.bool)
user_input = tf.placeholder(tf.float32)

with tf.device('/cpu:0'):
    alpha = tf.Variable(tf.zeros([1]))
    beta = tf.Variable(tf.zeros([1]))

    c = tf.Variable(tf.zeros([1]))

    alpha_incre = alpha.assign(alpha + 1)
    beta_incre = beta.assign(beta + 1)

    def train():
        with tf.control_dependencies([ alpha.assign(alpha + 1) ]):
            return c.assign(user_input + user_input)

    def test():
        with tf.control_dependencies([ beta.assign(beta + 1) ]):
            return c.assign(user_input)

    result = tf.cond(isTrain,
        train,
        test
    )

init = tf.initialize_all_variables()
sess = tf.Session()
sess.run(init)

aa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: True })
print("Train", aa)
aa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: False })
print("Test", aa)