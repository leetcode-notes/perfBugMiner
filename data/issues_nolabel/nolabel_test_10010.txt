[Feature]: Bazel - Building TensorFlow with Polly-enabled-LLVM.

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 14.04
TensorFlow installed from (source or binary): Source
TensorFlow version (use command below): ('v1.0.0-1783-g4c3bb1a', '1.0.0')
Bazel version (if compiling from source): 0.4.5
CUDA/cuDNN version: -
GPU model and memory: -
Exact command to reproduce: bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package

TensorFlow build:
Built from source.
$ git rev-parse HEAD
a33022c1470ce1334766b0cad38d9e91c17a2e5d

Description:
This is a feature request.
As part of my Google Summer of Code project, I am trying to build TensorFlow with Polly-enabled LLVM. To do this, I have been trying to port Opt and Polly to bazel. I tried placing this dummy rule at the end of the llvm.BUILD file.
cc_library(
    name = "opt",
    srcs = glob([
        "tools/opt/*.c",
        "tools/opt/*.cpp",
        "tools/opt/*.h",
    ]),     
    hdrs = glob([
        "tools/opt/*.h",
    ]),     
    copts = ["-Iexternal/llvm/tools/opt","-Iexternal/llvm/include"],
    deps = [
        ":intrinsics_gen",
    ],
)

But this does not seem to work. All the other targets defined in the file are building:
tensorflow/bazel-bin/external/llvm/_objs# ls
aarch64_asm_printer   arm_asm_printer   bit_reader            execution_engine  mc                 objc_arc              powerpc_info   transform_utils   x86_utils
aarch64_code_gen      arm_code_gen      bit_writer            global_i_sel      mc_disassembler    object                profile_data   vectorize
aarch64_desc          arm_desc          code_gen              inst_combine      mc_parser          orc_jit               runtime_dyld   x86_asm_printer
aarch64_disassembler  arm_disassembler  core                  instrumentation   nvptx_asm_printer  powerpc_asm_printer   scalar         x86_code_gen
aarch64_info          arm_info          debug_info_code_view  ipo               nvptx_code_gen     powerpc_code_gen      selection_dag  x86_desc
aarch64_utils         asm_parser        debug_info_msf        ir_reader         nvptx_desc         powerpc_desc          support        x86_disassembler
analysis              asm_printer       demangle              linker            nvptx_info         powerpc_disassembler  target         x86_info


I know that I have to define opt as a dependency in my build configuration. I can't see why this doesn't do the same.
Thanks.