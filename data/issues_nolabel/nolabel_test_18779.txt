Feature Request / Question: IP-Cam object detection (How-to)

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No, I've followed a tutorial and haven't touched the base setup of it. https://github.com/EdjeElectronics/TensorFlow-Object-Detection-API-Tutorial-Train-Multiple-Objects-Windows-10
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10
TensorFlow installed from (source or binary): Source
TensorFlow version (use command below): 1.5.0
Python version:  3.6
Bazel version (if compiling from source):  Couldn't get the capture script to return this
GCC/Compiler version (if compiling from source): b'unknown'
CUDA/cuDNN version: 9.0 / 7.05
GPU model and memory: Nvidia GeForce GTX 960M / 2Gb?
Exact command to reproduce: No idea

Describe the problem
Hello Tensorflow, my question is pretty straightforward and maybe was already answered somewhere, but I'm not finding the answer : )).. Hence, I turn to you. If there is already a clear guide out there on how to do it, could you point me in the right direction?
Given this script that launches the object detection with a webcam, how do I modify it to launch the detector by giving an IP address as input and receiving that video feed (and bounding boxes) as output? (Source in the last section).
I am aware we can always set an IP cam to be a webcam in the machine's webcam list, but I'd like to access the IP address directly. Can this be done? Is this already implemented?
Thanks in advance!
Source code / logs
import os
import cv2
import numpy as np
import tensorflow as tf
import sys
sys.path.append("..")
from utils import label_map_util
from utils import visualization_utils as vis_util
MODEL_NAME = 'inference_graph'
CWD_PATH = os.getcwd()
PATH_TO_CKPT = os.path.join(CWD_PATH,MODEL_NAME,'frozen_inference_graph.pb')
PATH_TO_LABELS = os.path.join(CWD_PATH,'training','labelmap.pbtxt')
NUM_CLASSES = 6
label_map = label_map_util.load_labelmap(PATH_TO_LABELS)
categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=True)
category_index = label_map_util.create_category_index(categories)
detection_graph = tf.Graph()
with detection_graph.as_default():
od_graph_def = tf.GraphDef()
with tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:
serialized_graph = fid.read()
od_graph_def.ParseFromString(serialized_graph)
tf.import_graph_def(od_graph_def, name='')
sess = tf.Session(graph=detection_graph)

image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')
detection_boxes = detection_graph.get_tensor_by_name('detection_boxes:0')
detection_scores = detection_graph.get_tensor_by_name('detection_scores:0')
detection_classes = detection_graph.get_tensor_by_name('detection_classes:0')
num_detections = detection_graph.get_tensor_by_name('num_detections:0')
video = cv2.VideoCapture(0)
ret = video.set(3,1280)
ret = video.set(4,720)
while(True):
ret, frame = video.read()
frame_expanded = np.expand_dims(frame, axis=0)


(boxes, scores, classes, num) = sess.run(
    [detection_boxes, detection_scores, detection_classes, num_detections],
    feed_dict={image_tensor: frame_expanded})


vis_util.visualize_boxes_and_labels_on_image_array(
    frame,
    np.squeeze(boxes),
    np.squeeze(classes).astype(np.int32),
    np.squeeze(scores),
    category_index,
    use_normalized_coordinates=True,
    line_thickness=8,
    min_score_thresh=0.85)


cv2.imshow('Object detector', frame)

if cv2.waitKey(1) == ord('q'):
    break

video.release()
cv2.destroyAllWindows()