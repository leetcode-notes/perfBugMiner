tf.image.central_crop returns zero dimension shaped tensors

I have written custom code.
OS platform
c++ (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
Tensorflow version
1.1.0-rc2
GPU model
Wed May 31 11:49:29 2017
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 367.57                 Driver Version: 367.57                    |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  Quadro K2200        On   | 0000:04:00.0      On |                  N/A |
| 42%   37C    P8     1W /  39W |    422MiB /  4032MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+

+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID  Type  Process name                               Usage      |
|=============================================================================|
|    0      6147    G   /usr/lib/xorg/Xorg                             213MiB |
|    0     16477    G   cinnamon                                        81MiB |
+-----------------------------------------------------------------------------+
Problem definition:
Given an image of shape (240, 320, 3), and a central_fraction of 0.33
tf.image.central_crop returns an image of shape (0, 0, 3), which is wrong.
Moreover, such tensors of zero dimension results in the cryptic error
could not set cudnn tensor descriptor: CUDNN_STATUS_BAD_PARAM
when these zero sized tensors are passed to downstream ops.
Source code to reproduce the problem:
import numpy as np
import tensorflow as tf

img_shape = (240, 320, 3)

img_ph = tf.placeholder(shape=img_shape, dtype=tf.uint8)
central_fraction = 0.33
crop_op = tf.image.central_crop(img_ph, central_fraction)

with tf.Session() as sess:
  img = np.zeros((240, 320, 3), dtype=np.uint8)
  feed_dict = {img_ph: img}
  cropped = sess.run(crop_op, feed_dict=feed_dict)
  print("cropped shape: {}".format(cropped.shape))