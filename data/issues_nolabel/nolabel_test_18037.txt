tf.sparse_tensor_dense_matmul makes small errors with tf.float32 matrices on GPU

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes, simple short code
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): both Ubuntu 14.04 / Centos 7
TensorFlow installed from (source or binary): pip binary on Ubuntu, source  on Centos
TensorFlow version (use command below): 1.4.1
Python version: 3.5.2
Bazel version (if compiling from source): release 0.8.1
GCC/Compiler version (if compiling from source): 4.8.5
CUDA/cuDNN version: 6.0.21
GPU model and memory: GTX 750 / GTX 1080
Exact command to reproduce: tf.sparse_tensor_dense_matmul

Describe the problem

Given a sparse tensor sp and a dense tensor mat, both of tf.float32,
Compute thier product with tf.sparse_tensor_dense_matmul(sp, mat),
The product varies slightly.

Source code / logs
import tensorflow as tf
import numpy as np

s = tf.Session()

num = 10
dim = 10
total_out = 100

indices = [
    [1, 0],
    [2, 0],
    [3, 0],
    [5, 0], [5, 1], [5, 2],
    [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 7],
    [7, 0], [7, 1], [7, 2], [7, 7], [7, 8],
    [8, 0],
    [9, 0], [9, 1], [9, 2], [9, 7]
]
values = np.array([1.0] * len(indices), np.float32)
feature = tf.SparseTensor(indices, values, [tf.cast(num, tf.int64), tf.cast(dim, tf.int64)])

dense = tf.sparse_tensor_to_dense(feature, validate_indices=False)
mat = tf.contrib.stateless.stateless_random_uniform([dim, total_out], seed=[1, 2], dtype=tf.float32)
prod = tf.sparse_tensor_dense_matmul(feature, mat)
# prod2 = tf.sparse_matmul(dense, mat, False, True, True, False, name='cross_sum')

T = ['dense', 'mat', 'prod']
results = s.run([dense, mat, prod])

comp0 = []
comp1 = []
for i, r in enumerate(results):
    try:
        comp0.append(np.sum(np.load('npy_{}.npy'.format(T[i]))) - np.sum(r))
        comp1.append(np.load('npy_{}.npy'.format(T[i])) - r)
    except:
        np.save('npy_{}.npy'.format(T[i]), r)
for i in range(len(comp0)):
    print(T[i])
    print(comp0[i])
    print(comp1[i])
    print('\n')
Run the code several times, you will see that the product will vary slightly. like this:
dense
0.0
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]


mat
0.0
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
  0. 0. 0. 0.]
...
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
  0. 0. 0. 0.]]


prod
0.0
[[ 0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   2.3841858e-07 -4.7683716e-07  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
  -4.7683716e-07  0.0000000e+00  0.0000000e+00  0.0000000e+00
   2.3841858e-07  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  4.7683716e-07  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00 -2.3841858e-07
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  4.7683716e-07  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  2.3841858e-07  2.3841858e-07  0.0000000e+00
   0.0000000e+00  2.3841858e-07  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  2.3841858e-07
  -2.3841858e-07  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
  -2.3841858e-07  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00 -2.3841858e-07  0.0000000e+00
  -2.3841858e-07  4.7683716e-07  0.0000000e+00  0.0000000e+00
   0.0000000e+00 -2.3841858e-07  2.3841858e-07  0.0000000e+00
   2.3841858e-07  0.0000000e+00  4.7683716e-07  2.3841858e-07
   0.0000000e+00  4.7683716e-07  2.3841858e-07  4.7683716e-07
   0.0000000e+00  0.0000000e+00  0.0000000e+00  2.3841858e-07
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00]
 [ 0.0000000e+00  0.0000000e+00  0.0000000e+00  2.3841858e-07
   2.3841858e-07  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  2.3841858e-07  0.0000000e+00
   0.0000000e+00 -2.3841858e-07  2.3841858e-07  0.0000000e+00
   0.0000000e+00 -2.3841858e-07  0.0000000e+00 -2.3841858e-07
   0.0000000e+00  2.3841858e-07  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00 -2.3841858e-07
   0.0000000e+00  0.0000000e+00  0.0000000e+00  4.7683716e-07
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  2.3841858e-07  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00 -2.3841858e-07  0.0000000e+00  0.0000000e+00
   0.0000000e+00 -4.7683716e-07  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  2.3841858e-07]
 [ 0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00
   0.0000000e+00  0.0000000e+00  0.0000000e+00  0.0000000e+00]
...
]

This only happens on GPU with float32. It should be a bug I guess.