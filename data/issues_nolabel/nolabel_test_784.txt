TensorBoard cannot feed to placeholder x-input on MNIST (for merged only)

I am running a slightly different version of mnist+relog because I recently installed TF on my computer and it does not have access to Internet (and I wanted to do the Image processing part myself).
It runs completely fine without TensorBoard and gives me 0.9166 accuracy on Test set which is not too bad for simple relog on unrolled images.
However when I add in the for loop the part where you feed feed_dist to merged (which is the fusion of all the summaries) I got the following error message:
InvalidArgumentError: You must feed a value for placeholder tensor 'x-input_4' with dtype float
     [[Node: x-input_4 = Placeholder[dtype=DT_FLOAT, shape=[], _device="/job:localhost/replica:0/task:0/cpu:0"]()]]
     [[Node: x-input_7/_23 = _Recv[client_terminated=false, recv_device="/job:localhost/replica:0/task:0/gpu:0", send_device="/job:localhost/replica:0/task:0/cpu:0", send_device_incarnation=1, tensor_name="edge_152_x-input_7", tensor_type=DT_FLOAT, _device="/job:localhost/replica:0/task:0/gpu:0"]()]]
Caused by op u'x-input_4', defined at:
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/spyderlib/widgets/externalshell/start_ipython_kernel.py", line 188, in <module>
    __ipythonkernel__.start()
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/IPython/kernel/zmq/kernelapp.py", line 374, in start
    ioloop.IOLoop.instance().start()
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/zmq/eventloop/ioloop.py", line 151, in start
    super(ZMQIOLoop, self).start()
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/tornado/ioloop.py", line 840, in start
    handler_func(fd_obj, events)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/tornado/stack_context.py", line 275, in null_wrapper
    return fn(*args, **kwargs)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/zmq/eventloop/zmqstream.py", line 433, in _handle_events
    self._handle_recv()
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/zmq/eventloop/zmqstream.py", line 465, in _handle_recv
    self._run_callback(callback, msg)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/zmq/eventloop/zmqstream.py", line 407, in _run_callback
    callback(*args, **kwargs)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/tornado/stack_context.py", line 275, in null_wrapper
    return fn(*args, **kwargs)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/IPython/kernel/zmq/kernelbase.py", line 252, in dispatcher
    return self.dispatch_shell(stream, msg)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/IPython/kernel/zmq/kernelbase.py", line 213, in dispatch_shell
    handler(stream, idents, msg)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/IPython/kernel/zmq/kernelbase.py", line 362, in execute_request
    user_expressions, allow_stdin)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/IPython/kernel/zmq/ipkernel.py", line 181, in do_execute
    shell.run_cell(code, store_history=store_history, silent=silent)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/IPython/core/interactiveshell.py", line 2868, in run_cell
    interactivity=interactivity, compiler=compiler, result=result)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/IPython/core/interactiveshell.py", line 2978, in run_ast_nodes
    if self.run_code(code, result):
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/IPython/core/interactiveshell.py", line 3032, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-48-28d84e6d5ef3>", line 1, in <module>
    runfile('/home/jeandut/mnist_jean_tf.py', wdir='/home/jeandut')
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/spyderlib/widgets/externalshell/sitecustomize.py", line 682, in runfile
    execfile(filename, namespace)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/spyderlib/widgets/externalshell/sitecustomize.py", line 78, in execfile
    builtins.execfile(filename, *where)
  File "/home/jeandut/mnist_jean_tf.py", line 64, in <module>
    x=tf.placeholder(tf.float32, [None, 784],name="x-input")
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/array_ops.py", line 673, in placeholder
    name=name)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/gen_array_ops.py", line 463, in _placeholder
    name=name)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/op_def_library.py", line 664, in apply_op
    op_def=op_def)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/ops.py", line 1834, in create_op
    original_op=self._default_original_op, op_def=op_def)
  File "/home/jeandut/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/ops.py", line 1043, in __init__
    self._traceback = _extract_stack()

It is therefore :

me badly implementing tensorboard part (but as I copied almost exactly what you did in the mnist tutorial I cannot find where it the bug is)
a bug in my installation of tensorflow somehow...
something else

My code:
# -*- coding: utf-8 -*-
"""
Created on Thu Jan 14 13:06:44 2016

@author: jeandut
"""
#from tensorflow.examples.tutorials.mnist import input_data
#mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)

import tensorflow as tf
import os
import random
import numpy as np
from array import array
import struct
import matplotlib.pyplot as plt
import time

#I imported myself the decompressed -ubyte files from mnist cause I do not have internet they are at the path I wrote replace with appropriate path to reproduce
os.chdir('/home/jeandut/Bureau/Step1/')

with open("train-labels.idx1-ubyte") as file:
    magic, size = struct.unpack(">II",file.read(8))
    train_labels_data=np.asarray(array("B",file.read()))
with open("t10k-labels.idx1-ubyte") as file:
    magic, size = struct.unpack(">II",file.read(8))
    test_labels_data=np.asarray(array("B",file.read()))
with open("train-images.idx3-ubyte") as file:
    magic, size, rows, cols =struct.unpack(">IIII",file.read(16))
    train_images_data=np.reshape(np.asarray(array("B",file.read())),(size,rows,cols))
with open("t10k-images.idx3-ubyte") as file:
    magic, size, rows, cols =struct.unpack(">IIII",file.read(16))
    test_images_data=np.reshape(np.asarray(array("B",file.read())),(size,rows,cols))





for i in range(10):
   plt.imshow(train_images_data[i,:])
   plt.show()
   print(train_labels_data[i])


train_images=np.reshape(train_images_data,(60000,28*28)).astype(np.float32)*1/255
test_images=np.reshape(test_images_data,(10000,28*28)).astype(np.float32)*1/255

train_labels=np.zeros((60000,10),dtype=np.float32)
test_labels=np.zeros((10000,10),dtype=np.float32)

for i in range(60000):
    a=train_labels_data[i]
    train_labels[i,a]=1.

for j in range(10000):
    b=test_labels_data[j]
    test_labels[j,b]=1.



sess=tf.Session()


x=tf.placeholder(tf.float32, [None, 784],name="x-input")
W=tf.Variable(tf.zeros([784, 10]),name="weights")
b=tf.Variable(tf.zeros([10]),name="bias")


with tf.name_scope("Wx_b") as scope:
    y=tf.nn.softmax(tf.matmul(x,W) + b)


w_hist=tf.histogram_summary("weights",W)
b_hist=tf.histogram_summary("bias",b)
y_hist=tf.histogram_summary("y",y)


y_ =tf.placeholder(tf.float32, [None, 10], name="y-input")

y_hist=tf.histogram_summary("y",y)
with tf.name_scope("xent") as scope:

    cross_entropy= -tf.reduce_sum(y_*tf.log(y))
    ce_summ=tf.scalar_summary("cross_entropy", cross_entropy)


with tf.name_scope("train") as scope:
    train_step=tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)


with tf.name_scope("train") as scope:
    correct_prediction =tf.equal(tf.argmax(y,1), tf.argmax(y_,1))


    accuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
    accuracy_summary=tf.scalar_summary("accuracy",accuracy)

merged=tf.merge_all_summaries()
writer=tf.train.SummaryWriter("tmp/mnist_logs",sess.graph_def)






init=tf.initialize_all_variables()
sess.run(init)


for i in range(1000):
    if i % 10 == 0:
        feed={x:test_images, y_: test_labels}
        result=sess.run([merged, accuracy],feed_dict=feed)
        summary_str=result[0]
        acc=result[1]
        writer.add_summary(summary_str, i)
        print("Accuracy at step %s: %s" % (i,acc))
    else:
        index=np.random.randint(60000-1,size=100)
        batch_xs, batch_ys = train_images[index,:], train_labels[index]
        sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})





print(sess.run(accuracy, feed_dict={x: train_images, y_: train_labels}))




I posted the question on stack but nobody seems to be able to solve it ! Please help !