tf.one_hot indices out of bound

Hi.
I have ran into some nasty indexing bugs, which weren't caught by TF. I investigated and found the following behaviour:
>>> sess=tf.Session()
>>> sess.run(tf.one_hot(tf.constant(3), 4))
array([ 0.,  0.,  0.,  1.], dtype=float32)
>>> sess.run(tf.one_hot(tf.constant(0), 4))
array([ 1.,  0.,  0.,  0.], dtype=float32)
>>> sess.run(tf.one_hot(tf.constant(4), 4))
array([ 0.,  0.,  0.,  0.], dtype=float32)
>>> sess.run(tf.one_hot(tf.constant(-1), 4))
array([ 0.,  0.,  0.,  0.], dtype=float32)
Both overflow and underflow result in a zeroed array. Should this be caught, and errors be thrown? If not, why and when would this zeroed behaviour make sense? Or is it costly to check and throw assertions?