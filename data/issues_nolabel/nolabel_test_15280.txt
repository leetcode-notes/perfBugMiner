Missing dlcose()/FreeLibrary() after dlopen()/LoadLibrary()

Have I written custom code: N/A
OS Platform and Distribution: N/A
TensorFlow installed from: N/A
TensorFlow version: N/A
Bazel version: N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: N/A
Problem description:
A. Looking at code below, there are couple of issues:
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/nnapi/NeuralNetworksShim.h#L34-L59
1.There is no dlcose() call after dlopen() and dysym() in the code above.
2.There can be two successful getLibraryHandle() calls without dlclose() in loadFunction().
B. More generally, the code below shows there is no interface to unload DLL either.

  
    
      tensorflow/tensorflow/core/platform/env.h
    
    
        Lines 254 to 280
      in
      359d6f9
    
    
    
    

        
          
           // Pass "library_filename" to a platform-specific mechanism for dynamically 
        

        
          
           // loading a library.  The rules for determining the exact location of the 
        

        
          
           // library are platform-specific and are not documented here. 
        

        
          
           // 
        

        
          
           // On success, returns a handle to the library in "*handle" and returns 
        

        
          
           // OK from the function. 
        

        
          
           // Otherwise returns nullptr in "*handle" and an error status from the 
        

        
          
           // function. 
        

        
          
           virtual Status LoadLibrary(const char* library_filename, void** handle) = 0; 
        

        
          
            
        

        
          
           // \brief Get a pointer to a symbol from a dynamic library. 
        

        
          
           // 
        

        
          
           // "handle" should be a pointer returned from a previous call to LoadLibrary. 
        

        
          
           // On success, store a pointer to the located symbol in "*symbol" and return 
        

        
          
           // OK from the function. Otherwise, returns nullptr in "*symbol" and an error 
        

        
          
           // status from the function. 
        

        
          
           virtual Status GetSymbolFromLibrary(void* handle, const char* symbol_name, 
        

        
          
                                               void** symbol) = 0; 
        

        
          
            
        

        
          
           // \brief build the name of dynamic library. 
        

        
          
           // 
        

        
          
           // "name" should be name of the library. 
        

        
          
           // "version" should be the version of the library or NULL 
        

        
          
           // returns the name that LoadLibrary() can use 
        

        
          
           virtual string FormatLibraryFileName(const string& name, 
        

        
          
               const string& version) = 0;