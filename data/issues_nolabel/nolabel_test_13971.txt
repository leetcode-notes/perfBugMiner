is there a way to restore and predict without doing "dummy training"

We are trying text_classification.py example of tensorflow  and separated the training and prediction parts of the code and trained the model using model_dir and tried to predict using the same model_dir.
Model is being saved but when we comment the training code and try to predict something, we get the following error:
InvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [10,50] rhs shape= [5386,50]
[[Node: save/Assign = Assign[T=DT_FLOAT, _class=["loc:"], use_locking=true, validate_shape=true, _device="/job:localhost/replica:0/task:0/cpu:0"](EmbedSequence/embeddings, save/RestoreV2)]]
Where: 5386 and 10 are words count in training and prediction data.
But when we uncomment the preparation of train_input_fn without using it anywhere in the code , without training the model but using the same model_dir then prediction works fine.
train_input_fn = tf.estimator.inputs.numpy_input_fn(
x={WORDS_FEATURE: x_train},
y=y_train,
batch_size=len(x_train),
num_epochs=None,
shuffle=True)
We are wondering what exactly is being done by this function which actually overcome the error without training the model (using the function at all) ?
We have gone through many posts but following post looks more relevant where someone said that prediction can't be done without doing at least some training (though the model was already trained and restored using model_dir ):  #3340

System information

Tried both Python 2.7.6 / Python 3.4.3:
TF Version :  1.3.0:
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)" :  ('v1.1.0-rc0-61-g1ec6ed5', '1.1.0')