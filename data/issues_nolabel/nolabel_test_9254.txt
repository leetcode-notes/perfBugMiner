Reading each filter response from a 4-D Tensor

`class MyLayer(Layer):
    def __init__(self, output_dim, **kwargs):
        self.output_dim = output_dim
        super(MyLayer, self).__init__(**kwargs)

 def build(self, input_shape):
        # Create a trainable weight variable for this layer.
        self.kernel = self.add_weight(shape=(input_shape[1], self.output_dim),
                                      initializer='uniform',
                                      trainable=True)
        super(MyLayer, self).build(input_shape)  # Be sure to call this somewhere!

    def call(self, x):
        s = x.get_shape()
        r = K.eval(x)
        print(r)
       # Convert to 64 (25 * 25) tensors.
       # Need to flatten each of these 64 tensors.
       # write some functions on these 64 tensors.
       return <tensor [?,64]>`

x is of shape [?,25,25,64]
I need 64 tensors of [?,25,25]
Will keras.layers.Flatten() work in the second step.
Can a Tensor be converted to an numpy array?
Please help me on this.
Note: I am using Functional APIs for Keras.