Resolve the libcudnn library to its SONAME, when possible,

and build the binary with that SONAME, which is supposed to be
ABI-compatible.
When we build our pip packages, we will now build with precisely
the version of the SONAME that we intend to support with the
binary packages.  This is the solution recommended by @3XX0.
Tested by installing cudnn 5.1.3 RC and seeing that the source code
modifications show the use of version "5" (the SONAME version
pointed to by libcudnn.so symlink).
In addition, installing the pip package shows:



import tensorflow as tf
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so.5 locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally