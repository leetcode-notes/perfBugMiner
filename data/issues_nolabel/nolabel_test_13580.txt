Equeued values to Queue get chopped-off if the Queue isn't instantiated properly.

Describe the problem
In QueueBase._check_enqueue_dtypes, the following code is run:
tensors = [] for i, (val, dtype) in enumerate(zip(vals, self._dtypes)): tensors.append(ops.convert_to_tensor(val, dtype=dtype, name="component_%d" % i))
The problem is if the user feeds a list of tensors as val (the input) which is longer than the _dtypes-construction argument of QueueBase.
If the user hasn't specified a length of _dtypes, e.g if he constructs a Queue like this:
tf.FIFOQueue(100,dtypes=tf.int64)
The FIFOQueue will have a default length 1. This means that the zip-function in the code above will essentialy cut-off any data that is longer than 1 (or whatever length _dtypes is).
I think an exception should be thrown if the user tries to enqueue a list of tensors that is of unexpected length.
Source code / logs
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/data_flow_ops.py
Line 270, 271, 272 and 273