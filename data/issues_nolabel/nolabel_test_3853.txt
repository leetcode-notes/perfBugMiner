Options for sparse gradients?

Does compute_gradients() support outputs in sparse form? I'm working on a large-scale linear model with sparse inputs. It's quite inefficient to use gradients as dense Tensor, especially in distributed training.
It seems that apply_gradients() of some optimisers supports gradient inputs as IndexedSlices type. But currently I've not found a clear way to convert gradients into this form.
I've try sth like below to get X indices from mini-batch inputs, and then feed into IndexedSlices with gradient slices. But it doesn't seem to be good because tf.unique does not make x_indices sorted.
new_grads_and_vars = []
x_indices, _ = tf.unique(tf.reshape(tf.slice(X.indices, [0, 1], [-1, 1]), shape=[-1]))  # <- not sorted
for grad, var in grads_and_vars:
   grad_vals = tf.gather(grad, indices=x_indices)
   grad_slice = tf.IndexedSlices(indices=x_indices, values=grad_vals)
   new_grads_and_vars.append((grad_slice, var))
grads_and_vars = new_grads_and_vars

Any ideas? Thx.