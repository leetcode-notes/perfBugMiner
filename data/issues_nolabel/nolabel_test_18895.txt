'concave points_mean' is not a valid scope name

I am running my models in Google's Colaboratory Cloud Platform and I never confronted this error message.
Python Version (Colaboratory Notebook): Python3
Hardware Accelerator: GPU
(before creating this issue I did my research but found no useful content)
My code has something like this,
periods = 10
steps_per_period = steps / periods
  
# Create linear_classifier object and configure it.
my_optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)
my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, 5.0)
linear_classifier = tf.estimator.LinearClassifier(
    feature_columns = construct_feature_columns(training_examples),
    optimizer = my_optimizer
)

and inside a for loop, I am training my model like this,
for period in range(0, periods):
    linear_classifier.train(
        input_fn = training_input_fn,
        steps = steps_per_period
    )

The error below:
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-44-b9598a3db7f4> in <module>()
      6     training_targets = training_targets,
      7     validation_examples = validation_examples,
----> 8     validation_targets = validation_targets
      9 )

<ipython-input-43-0ca23946204e> in train_linear_classfication_model(learning_rate, steps, batch_size, training_examples, training_targets, validation_examples, validation_targets)
     43     linear_classifier.train(
     44         input_fn = training_input_fn,
---> 45         steps = steps_per_period
     46     )
     47 

/usr/local/lib/python3.6/dist-packages/tensorflow/python/estimator/estimator.py in train(self, input_fn, hooks, steps, max_steps, saving_listeners)
    353 
    354     saving_listeners = _check_listeners_type(saving_listeners)
--> 355     loss = self._train_model(input_fn, hooks, saving_listeners)
    356     logging.info('Loss for final step: %s.', loss)
    357     return self

/usr/local/lib/python3.6/dist-packages/tensorflow/python/estimator/estimator.py in _train_model(self, input_fn, hooks, saving_listeners)
    822       worker_hooks.extend(input_hooks)
    823       estimator_spec = self._call_model_fn(
--> 824           features, labels, model_fn_lib.ModeKeys.TRAIN, self.config)
    825 
    826       if self._warm_start_settings:

/usr/local/lib/python3.6/dist-packages/tensorflow/python/estimator/estimator.py in _call_model_fn(self, features, labels, mode, config)
    803 
    804     logging.info('Calling model_fn.')
--> 805     model_fn_results = self._model_fn(features=features, **kwargs)
    806     logging.info('Done calling model_fn.')
    807 

/usr/local/lib/python3.6/dist-packages/tensorflow/python/estimator/canned/linear.py in _model_fn(features, labels, mode, config)
    316           optimizer=optimizer,
    317           partitioner=partitioner,
--> 318           config=config)
    319 
    320     super(LinearClassifier, self).__init__(

/usr/local/lib/python3.6/dist-packages/tensorflow/python/estimator/canned/linear.py in _linear_model_fn(features, labels, mode, head, feature_columns, optimizer, partitioner, config)
    156     logit_fn = _linear_logit_fn_builder(
    157         units=head.logits_dimension, feature_columns=feature_columns)
--> 158     logits = logit_fn(features=features)
    159 
    160     def _train_op_fn(loss):

/usr/local/lib/python3.6/dist-packages/tensorflow/python/estimator/canned/linear.py in linear_logit_fn(features)
     97         feature_columns=feature_columns,
     98         units=units,
---> 99         cols_to_vars=cols_to_vars)
    100     bias = cols_to_vars.pop('bias')
    101     if units > 1:

/usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column.py in linear_model(features, feature_columns, units, sparse_combiner, weight_collections, trainable, cols_to_vars)
    423     for column in sorted(feature_columns, key=lambda x: x.name):
    424       with variable_scope.variable_scope(
--> 425           None, default_name=column._var_scope_name):  # pylint: disable=protected-access
    426         ordered_columns.append(column)
    427         weighted_sum = _create_weighted_sum(

/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py in __enter__(self)
   1901 
   1902     try:
-> 1903       return self._enter_scope_uncached()
   1904     except:
   1905       if self._graph_context_manager is not None:

/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py in _enter_scope_uncached(self)
   2001           self._default_name)
   2002       try:
-> 2003         current_name_scope_name = current_name_scope.__enter__()
   2004       except:
   2005         current_name_scope.__exit__(*sys.exc_info())

/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in __enter__(self)
   5773       try:
   5774         self._name_scope = g.name_scope(self._name)
-> 5775         return self._name_scope.__enter__()
   5776       except:
   5777         self._g_manager.__exit__(*sys.exc_info())

/usr/lib/python3.6/contextlib.py in __enter__(self)
     79     def __enter__(self):
     80         try:
---> 81             return next(self.gen)
     82         except StopIteration:
     83             raise RuntimeError("generator didn't yield") from None

/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in name_scope(self, name)
   3977         # (viz. '-', '\', '/', and '_').
   3978         if not _VALID_SCOPE_NAME_REGEX.match(name):
-> 3979           raise ValueError("'%s' is not a valid scope name" % name)
   3980       else:
   3981         # Scopes created in the root must match the more restrictive

ValueError: 'concave points_mean' is not a valid scope name

Update: I tried variables like steps_per_period as global scope and reran the model, but still the same issue persisting.