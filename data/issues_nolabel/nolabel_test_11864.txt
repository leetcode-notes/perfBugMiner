tf.nn.conv2d produces incorrect results

conv2d doesn't seem to produce results that are correct when compared with a C++ implementation and MATLAB's conv2. These errors are most pronounced when importing parameters from an external model. The same network in tf produces an accuracy of 60% while the original network has an accuracy of 97%. To verify that the problem indeed is in tf's conv2d, I used the following simple example:
MATLAB code
k2=reshape(1:9,[3,3])'
k2=repmat(k2,[1,1,3])
x2=reshape(1:16,[4,4])'
x2=repmat(x2,[1,1,3])
c=conv2(x2(:,:,1),k2(:,:,1),'same') + conv2(x2(:,:,2),k2(:,:,2),'same')+ conv2(x2(:,:,3),k2(:,:,3),'same')
output:
87 186 249 225
297 576 711 594
621 1116 1251 990
789 1338 1455 1095
Python TF code
import tensorflow as tf
import numpy as np
k=np.reshape(range(1,10),[3,3,1,1])
k=np.repeat(k,3,2).astype('float16')
x=np.reshape(range(1,17),[1,4,4,1])
x=np.repeat(x,3,3).astype('float16')
dev_X = tf.Variable(x,dtype=tf.float16)
dev_K = tf.Variable(k,dtype=tf.float16)
dev_C=tf.nn.conv2d(dev_X, dev_K, strides=[1, 1, 1, 1], padding='SAME')
session=tf.Session();
session.run(tf.global_variables_initializer());
print(session.run(dev_C)[0,:,:,0])
output:
[[ 333. 534. 651. 435.]
[ 693. 1044. 1179. 756.]
[ 1089. 1584. 1719. 1080.]
[ 591. 822. 885. 525.]]
What exactly is different in tf's implementation of convolution? Is this a bug?