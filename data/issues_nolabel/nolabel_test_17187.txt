TensorFlow - cuInit: CUDA_ERROR_NO_DEVICE

Hi, I was using TensorFlow with GPU support these past few months and it worked without any issues. I have installed cuda v8.0 and also have the cudNN library.  Recently, I started using TensorFlow for a project and noticed that it isn't computing on the GPU, and is using the GPU instead. I'm running TensorFlow 1.2.1 on Windows 10, with CUDA v8.0.
Here is the code that I ran on the Python Interpreter:
import tensorflow as tf
sess=tf.Session()
Here's the message on the command prompt:
`>>> import tensorflow as tf



sess=tf.Session()
2018-02-22 13:24:51.069445: W c:\tf_jenkins\home\workspace\release-win\m\windows-gpu\py\35\tensorflow\core\platform\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations.
2018-02-22 13:24:51.079084: W c:\tf_jenkins\home\workspace\release-win\m\windows-gpu\py\35\tensorflow\core\platform\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE2 instructions, but these are available on your machine and could speed up CPU computations.
2018-02-22 13:24:51.085961: W c:\tf_jenkins\home\workspace\release-win\m\windows-gpu\py\35\tensorflow\core\platform\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.
2018-02-22 13:24:51.092933: W c:\tf_jenkins\home\workspace\release-win\m\windows-gpu\py\35\tensorflow\core\platform\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2018-02-22 13:24:51.102940: W c:\tf_jenkins\home\workspace\release-win\m\windows-gpu\py\35\tensorflow\core\platform\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2018-02-22 13:24:51.110151: W c:\tf_jenkins\home\workspace\release-win\m\windows-gpu\py\35\tensorflow\core\platform\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2018-02-22 13:24:51.116103: W c:\tf_jenkins\home\workspace\release-win\m\windows-gpu\py\35\tensorflow\core\platform\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.
2018-02-22 13:24:51.123166: W c:\tf_jenkins\home\workspace\release-win\m\windows-gpu\py\35\tensorflow\core\platform\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.
2018-02-22 13:24:51.705468: E c:\tf_jenkins\home\workspace\release-win\m\windows-gpu\py\35\tensorflow\stream_executor\cuda\cuda_driver.cc:406] failed call to cuInit: CUDA_ERROR_NO_DEVICE
2018-02-22 13:24:51.717633: I c:\tf_jenkins\home\workspace\release-win\m\windows-gpu\py\35\tensorflow\stream_executor\cuda\cuda_diagnostics.cc:158] retrieving CUDA diagnostic information for host: Cipher
2018-02-22 13:24:51.728408: I c:\tf_jenkins\home\workspace\release-win\m\windows-gpu\py\35\tensorflow\stream_executor\cuda\cuda_diagnostics.cc:165] hostname: Cipher`



I already tried a bunch of solutions such as changing CUDA_VISIBLE_DEVICES=0, and even adding cudnn to my PATH variables
I have not used TensorFlow in this example to write any custom code. I am running Windows 10, running TensorFlow 1.2 with GPU support, which I installed from the TensorFlow website. The GPU version is supported by CUDA v8.0. I have an NVIDIA 920M with a memory of 4GB.