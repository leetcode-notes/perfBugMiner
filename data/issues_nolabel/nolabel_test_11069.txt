Fix for contrib.layers test that was raising an IndexError

Following the discussion at #11049
Running the testSparsePartialFlatten test would occasionally raise the following error:
ERROR: testSparsePartialFlatten (__main__.PartialFlattenTest)
Test `_inner_flatten` on `SparseTensor`s.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/var/lib/jenkins/workspace/tensorflow-pull-requests-cpu-python3/bazel-ci_build-cache/.cache/bazel/_bazel_jenkins/eab0d61a99b6696edb3d2aff87b585e8/execroot/workspace/bazel-out/local-py3-opt/bin/bazel_pip/tensorflow/contrib/layers/layers_test.runfiles/org_tensorflow/bazel_pip/tensorflow/contrib/layers/python/layers/layers_test.py", line 1434, in testSparsePartialFlatten
    expected_indices, expected_values, _ = _sparsify(reshaped_random_)
  File "/var/lib/jenkins/workspace/tensorflow-pull-requests-cpu-python3/bazel-ci_build-cache/.cache/bazel/_bazel_jenkins/eab0d61a99b6696edb3d2aff87b585e8/execroot/workspace/bazel-out/local-py3-opt/bin/bazel_pip/tensorflow/contrib/layers/layers_test.runfiles/org_tensorflow/bazel_pip/tensorflow/contrib/layers/python/layers/layers_test.py", line 1399, in _sparsify
    values = array[non_zero]
IndexError: index 3 is out of bounds for axis 1 with size 3

This seems to be due to inconsistent behaviour from numpy.nonzero when operating on an array of over 4 dimensions. Reducing the size of the array in the test seems to eliminate the problem.
Note: As the problem would only arise in some test runs, and not others. It's important that this commit be tested several times to ensure elimination of the issue.