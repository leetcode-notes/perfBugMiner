Saver() not saving as .ckpt file

I'm trying to save and restore a model. From all the support I have found here & here Saver.save() is supposed to save a model file of type .ckpt & then Saver.restore() is supposed to used that file name coupled with the directory it is in. However, my code does not save the files as .ckpt files, it just saves them as binary files. I could be wrong on that. My reasoning is that when I call Saver.restore() it returns None.
The files are being saved as model.ckpt-10 and then model.ckpt-20 and so on. I have the checkpoint text file. I've tried using that as well, but no luck.
saver = tf.train.Saver()
TRAIN_FLAG = 1

# Launch the graph
with tf.Session() as sess:
    sess.run(init)
    # writer = tf.train.SummaryWriter("/tmp/logs", sess.graph_def)
    if TRAIN_FLAG:
        from tensorflow.contrib.learn.python.learn.datasets.scroll import scroll_data
        data = scroll_data.read_data('/home/kendall/Desktop/')
        step = 1
        flag = 0
        while flag == 0:
            batch_y, batch_x = data.train.next_batch(batch_size)
            batch_x = batch_x.reshape((batch_size, n_input))
            batch_y = batch_y.reshape((batch_size, n_classes))
            # Run optimization op (backprop)
            sess.run(optimizer, feed_dict={x: batch_x, y: batch_y})
            if step % display_step == 0:
                flag = 1
                save_path = "model.ckpt"
                saver.save(sess, save_path, global_step=step)
                # Calculate batch accuracy
                acc = sess.run(accuracy, feed_dict={x: batch_x, y: batch_y})
                # Calculate batch loss
                loss = sess.run(cost, feed_dict={x: batch_x, y: batch_y})
                print "Iter " + str(step*batch_size) + ", Minibatch Loss= " + \
                      "{:.6f}".format(loss) + ", Training Accuracy= " + \
                      "{:.5f}".format(acc)
            step += 1
        print "Optimization Finished!"
else:
    pdb.set_trace()
    ckpt = tf.train.get_checkpoint_state("/home/kendall/Academic/Summer\ 2016/Programs/", "my-model-7001")
    saver.restore(sess, ckpt.model_checkpoint_path)
    im = Image.open('/home/kendall/Desktop/HA900_frames/frame0635.tif')
    batch_x = np.array(im)
    prediction = sess.run(optimizer, feed_dict={x: batch_x})
    print prediction