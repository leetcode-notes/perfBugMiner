Feature request: non-blocking enqueue operations

As for version 1.2, queue operations involving enqueuing can block if a queue is full or empty. This is very useful for designing input threads feeding the queue from static datasets as it suspends the thread until it can proceed doing its work. However, this behavior might not be desirable or acceptable if instead the data being fed comes from an asynchronous and continuously changing live source at a best effort basis, because blocking the thread implies missing the continuity of the source.
For example, let's say we have a distributed reinforcement learning environment where an external game plays asynchronously and a thread tries its best to read the most recent state of the game and input the actions to take. As a result, this thread keeps producing training batches that are enqueued in a PaddingFIFOQueue, which are consumed by a separate trainer.
In this case, if for any reason the trainer takes too long or has an un expected peak in the number of training batches it receives, the queue will fill and the producer thread(s) will block. Since the source of data (the external game) keeps playing, this means that the next time the producer threads unblock they will probably have lost temporal coherency on the game. In this case, dropping a training batch would be more desirable than blocking the thread until such batch can be enqueued.
For this reason, I'd like to propose the following feature: a new optional argument to the enqueuing methods (enqueue and enqueue_many) that allows to immediately return when the queue is full instead of blocking the thread. This argument would default to the existing behavior (e.g., 'non_blocking=False'), so no code updates are required.
Signaling if/how many elements were successfully enqueued or failed to do so is likely a desirable output of a non-blocking enqueue operation. However, implementing it might not be trivial without altering the function return signature. If we find this is something we should provide, it might be better to instead of adding a new argument simply add new non-blocking versions of the enqueue ops that return a (op, num_elements_discarded) tuple.
Any comments or suggestions are most welcome.