Peculiar behavior with tf.self_adjoint_eig

Hi,
I've come across a really peculiar bug that I think is actually a sign of a much larger problem, but what that is, I have no idea.  The following code:
x = np.random.randn(10, 10)

x = (x+x.T)/2

X = tf.placeholder(dtype=tf.float32, shape=[10, 10])

E, V = tf.self_adjoint_eig(X)

with tf.Session() as sess:
    e, v = sess.run([E, V], feed_dict={X: x})

    print(e.shape)

throws the error:
raise TypeError("'Tensor' object is not iterable.")

but curiously:
x = np.random.randn(10, 10)

x = (x+x.T)/2

X = tf.placeholder(dtype=tf.float32, shape=[10, 10])

E = tf.self_adjoint_eig(X)

with tf.Session() as sess:
    e = sess.run(E, feed_dict={X: x})

    print(e.shape)

returns (11, 10), and I have no idea how that's even possible, since the docs say that tf.self_adjoint_eig returns two tensors.  While investigating this, I discovered that a lot of my install (from pip) differs substantially from what's documented here even though I have the latest version (tensorflow==0.10.0rc0 from pip freeze).  In particular, tf.self_adjoint_eig is not defined in linalg_ops.py, and I can't find where it's being called from.  Any ideas?
Thanks,
Shawn
Update:
I just found it where it's called from.  According to the comment in gen_linalg_ops.py:
  The result is a M+1 x M matrix whose first row is the eigenvalues, and
  subsequent rows are eigenvectors.

This is different than the API docs.  One or the other (from a usefulness standpoint, probably the code) should be changed.
Further Update:
This actually might be an install problem as mentioned above.  The code here calls self_adjoint_eig_v2 which doesn't exist in the latest install.  Why is that?