Compilation Error when building tensorflow with opencl, with computecpp(SYCL)

Environment info
Operating System: Ubuntu 16.10 64bit
Hardware: i7-2600k + R9 290X
computecpp 0.1.3
tensorflow branch r1.1
python 3.5
git rev-parse HEAD
36a47f2bdcbbdf302da6f292ceee366ebd9640d2


Bazel Version
Build label: 0.4.5
Build target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar
Build time: Thu Mar 16 12:19:38 2017 (1489666778)
Build timestamp: 1489666778
Build timestamp as int: 1489666778


If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)
Compilation with
bazel build -c opt --config=sycl //tensorflow/tools/pip_package:build_pip_package

results in this Error
ERROR: /home/flo/Workspace/tensorflow/tensorflow/contrib/tensor_forest/BUILD:97:1: C++ compilation of rule '//tensorflow/contrib/tensor_forest:python/ops/_tensor_forest_ops.so' failed: computecpp failed: error executing command external/local_config_sycl/crosstool/computecpp -Wall -msse3 -g0 -O2 -DNDEBUG '-std=c++11' -MD -MF ... (remaining 56 argument(s) skipped): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1.
In file included from tensorflow/contrib/tensor_forest/kernels/count_extremely_random_stats_op.cc:20:
In file included from /usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/unordered_map:41:
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:471:67: error: pack expansion contains parameter packs '_Elements' and '_UElements' that have different lengths (1 vs. 3)
      return __and_<is_constructible<_Elements, const _UElements&>...>::value;
                                     ~~~~~~~~~        ~~~~~~~~~~  ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:664:21: note: in instantiation of function template specialization 'std::_TC<true, std::tuple<int, int, int> &&>::_ConstructibleTuple<int, int, int>' requested here```
                    _ConstructibleTuple<_UElements...>()
                    ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:670:19: note: while substituting prior template arguments into non-type template parameter [with _UElements = <int, int, int>, _Dummy = void]
        constexpr tuple(const tuple<_UElements...>& __in)
                  ^~~~~
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:1400:36: note: while substituting deduced template arguments into function template 'tuple' [with _UElements = <int, int, int>, _Dummy = (no value), $2 = (no value)]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
                                   ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/bits/hashtable_policy.h:621:16: note: in instantiation of function template specialization 'std::forward_as_tuple<std::tuple<int, int, int> >' requested here
                                      std::forward_as_tuple(std::move(__k)),
                                           ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/bits/unordered_map.h:908:16: note: in instantiation of member function 'std::__detail::_Map_base<std::tuple<int, int, int>, std::pair<const std::tuple<int, int, int>, float>, std::allocator<std::pair<const std::tuple<int, int, int>, float> >, std::__detail::_Select1st, std::equal_to<std::tuple<int, int, int> >, tensorflow::CountExtremelyRandomStats::TupleIntHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[]' requested here
      { return _M_h[std::move(__k)]; }
               ^
tensorflow/contrib/tensor_forest/kernels/count_extremely_random_stats_op.cc:421:22: note: in instantiation of member function 'std::unordered_map<std::tuple<int, int, int>, float, tensorflow::CountExtremelyRandomStats::TupleIntHash, std::equal_to<std::tuple<int, int, int> >, std::allocator<std::pair<const std::tuple<int, int, int>, float> > >::operator[]' requested here
          split_delta[make_tuple(accumulator, split, column)] += w;
                     ^
In file included from tensorflow/contrib/tensor_forest/kernels/count_extremely_random_stats_op.cc:20:
In file included from /usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/unordered_map:41:
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:477:65: error: pack expansion contains parameter packs '_UElements' and '_Elements' that have different lengths (3 vs. 1)
      return __and_<is_convertible<const _UElements&, _Elements>...>::value;
                                         ~~~~~~~~~~   ~~~~~~~~~ ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:666:21: note: in instantiation of function template specialization 'std::_TC<true, std::tuple<int, int, int> &&>::_ImplicitlyConvertibleTuple<int, int, int>' requested here
                    _ImplicitlyConvertibleTuple<_UElements...>()
                    ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:670:19: note: while substituting prior template arguments into non-type template parameter [with _UElements = <int, int, int>, _Dummy = void]
        constexpr tuple(const tuple<_UElements...>& __in)
                  ^~~~~
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:1400:36: note: while substituting deduced template arguments into function template 'tuple' [with _UElements = <int, int, int>, _Dummy = (no value), $2 = (no value)]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
                                   ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/bits/hashtable_policy.h:621:16: note: in instantiation of function template specialization 'std::forward_as_tuple<std::tuple<int, int, int> >' requested here
                                      std::forward_as_tuple(std::move(__k)),
                                           ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/bits/unordered_map.h:908:16: note: in instantiation of member function 'std::__detail::_Map_base<std::tuple<int, int, int>, std::pair<const std::tuple<int, int, int>, float>, std::allocator<std::pair<const std::tuple<int, int, int>, float> >, std::__detail::_Select1st, std::equal_to<std::tuple<int, int, int> >, tensorflow::CountExtremelyRandomStats::TupleIntHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[]' requested here
      { return _M_h[std::move(__k)]; }
               ^
tensorflow/contrib/tensor_forest/kernels/count_extremely_random_stats_op.cc:421:22: note: in instantiation of member function 'std::unordered_map<std::tuple<int, int, int>, float, tensorflow::CountExtremelyRandomStats::TupleIntHash, std::equal_to<std::tuple<int, int, int> >, std::allocator<std::pair<const std::tuple<int, int, int>, float> > >::operator[]' requested here
          split_delta[make_tuple(accumulator, split, column)] += w;
                     ^
In file included from tensorflow/contrib/tensor_forest/kernels/count_extremely_random_stats_op.cc:20:
In file included from /usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/unordered_map:41:
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:483:62: error: pack expansion contains parameter packs '_Elements' and '_UElements' that have different lengths (1 vs. 3)
      return __and_<is_constructible<_Elements, _UElements&&>...>::value;
                                     ~~~~~~~~~  ~~~~~~~~~~   ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:688:21: note: in instantiation of function template specialization 'std::_TC<true, std::tuple<int, int, int> &&>::_MoveConstructibleTuple<int, int, int>' requested here
                    _MoveConstructibleTuple<_UElements...>()
                    ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:694:19: note: while substituting prior template arguments into non-type template parameter [with _UElements = <int, int, int>, _Dummy = void]
        constexpr tuple(tuple<_UElements...>&& __in)
                  ^~~~~
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:1400:36: note: while substituting deduced template arguments into function template 'tuple' [with _UElements = <int, int, int>, _Dummy = (no value), $2 = (no value)]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
                                   ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/bits/hashtable_policy.h:621:16: note: in instantiation of function template specialization 'std::forward_as_tuple<std::tuple<int, int, int> >' requested here
                                      std::forward_as_tuple(std::move(__k)),
                                           ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/bits/unordered_map.h:908:16: note: in instantiation of member function 'std::__detail::_Map_base<std::tuple<int, int, int>, std::pair<const std::tuple<int, int, int>, float>, std::allocator<std::pair<const std::tuple<int, int, int>, float> >, std::__detail::_Select1st, std::equal_to<std::tuple<int, int, int> >, tensorflow::CountExtremelyRandomStats::TupleIntHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[]' requested here
      { return _M_h[std::move(__k)]; }
               ^
tensorflow/contrib/tensor_forest/kernels/count_extremely_random_stats_op.cc:421:22: note: in instantiation of member function 'std::unordered_map<std::tuple<int, int, int>, float, tensorflow::CountExtremelyRandomStats::TupleIntHash, std::equal_to<std::tuple<int, int, int> >, std::allocator<std::pair<const std::tuple<int, int, int>, float> > >::operator[]' requested here
          split_delta[make_tuple(accumulator, split, column)] += w;
                     ^
In file included from tensorflow/contrib/tensor_forest/kernels/count_extremely_random_stats_op.cc:20:
In file included from /usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/unordered_map:41:
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:489:60: error: pack expansion contains parameter packs '_UElements' and '_Elements' that have different lengths (3 vs. 1)
      return __and_<is_convertible<_UElements&&, _Elements>...>::value;
                                   ~~~~~~~~~~    ~~~~~~~~~ ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:690:21: note: in instantiation of function template specialization 'std::_TC<true, std::tuple<int, int, int> &&>::_ImplicitlyMoveConvertibleTuple<int, int, int>' requested here
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                    ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:694:19: note: while substituting prior template arguments into non-type template parameter [with _UElements = <int, int, int>, _Dummy = void]
        constexpr tuple(tuple<_UElements...>&& __in)
                  ^~~~~
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/tuple:1400:36: note: while substituting deduced template arguments into function template 'tuple' [with _UElements = <int, int, int>, _Dummy = (no value), $2 = (no value)]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
                                   ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/bits/hashtable_policy.h:621:16: note: in instantiation of function template specialization 'std::forward_as_tuple<std::tuple<int, int, int> >' requested here
                                      std::forward_as_tuple(std::move(__k)),
                                           ^
/usr/lib/gcc/x86_64-linux-gnu/6.2.0/../../../../include/c++/6.2.0/bits/unordered_map.h:908:16: note: in instantiation of member function 'std::__detail::_Map_base<std::tuple<int, int, int>, std::pair<const std::tuple<int, int, int>, float>, std::allocator<std::pair<const std::tuple<int, int, int>, float> >, std::__detail::_Select1st, std::equal_to<std::tuple<int, int, int> >, tensorflow::CountExtremelyRandomStats::TupleIntHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[]' requested here
      { return _M_h[std::move(__k)]; }
               ^
tensorflow/contrib/tensor_forest/kernels/count_extremely_random_stats_op.cc:421:22: note: in instantiation of member function 'std::unordered_map<std::tuple<int, int, int>, float, tensorflow::CountExtremelyRandomStats::TupleIntHash, std::equal_to<std::tuple<int, int, int> >, std::allocator<std::pair<const std::tuple<int, int, int>, float> > >::operator[]' requested here
          split_delta[make_tuple(accumulator, split, column)] += w;
                     ^
4 errors generated.
Target //tensorflow/tools/pip_package:build_pip_package failed to build
Use --verbose_failures to see the command lines of failed build steps.
INFO: Elapsed time: 853.100s, Critical Path: 837.41s

What other attempted solutions have you tried?
Tried different compilers(clang,gcc) and a older version of computecpp
Is this a issue with Tensorflow or ComputeCPP, Can someone reproduce that behaviour ?
Regards Flo