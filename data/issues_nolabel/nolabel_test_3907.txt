Feature Request: Sparse Variables

I want to train a sparse model like this:
Param=tf.Variable(tf.SparceTensor(indices,values,shape))
cost=some_function_of_Params

tf.Variable(tf.SparseTensor) generates error:
Expected binary or unicode string, got <tensorflow.python.framework.ops.SparseTensor object at 0x7f994788a550>
My solution was to use dense matrices as variables, mask the gradients and then apply them (mask is a tensor containing zeros and ones):
init=a_dense_matrix

param=tf.variable(init)

cost=some_function_of_param

mask=a_dense_matrix_shaped_just_like_param

mask=tf.constant(mask)

optimizer=tf.GradientDescentOptimizer(learning_rate=0.01)

grad=optimizer.compute_gradients(cost)

masked_grad=tf.mul(grad,mask)

update_rule=optimizer.apply_gradients(masked_grad)

This however includes lots of redundant gradient computations and zero_masking multiplications. Doing updates on sparse variables instead of dense variables can speedup the training. Is there a plan to make it possible that sparse tensors could be used as variables in the graph?