Contrintuitive get_variable dtype checks

When reusing variables get_variable checks if dtypes are consistent, but it seems to compare the wrong dtypes.
Example:
a = tf.get_variable('a', initializer=tf.zeros(2, tf.int32))
with tf.variable_scope('', reuse=True):
  tf.get_variable('a', initializer=tf.zeros(2, tf.int32)) # raises ValueError
  tf.get_variable('a', initializer=tf.zeros(2, tf.int16)) # raises ValueError

b = tf.get_variable('b', initializer=tf.zeros(2))
with tf.variable_scope('', reuse=True):
  tf.get_variable('b', initializer=tf.zeros(2, tf.int32)) # works

Here the TF will compare dtype of existing variable a (tf.int32) against the dtype of the next get_variable call, which is tf.float32 (which is the default value for dtype argument of get_variable).
The resulting situations where get_variable raises ValueError seems counterintuitive.