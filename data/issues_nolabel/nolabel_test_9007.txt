Takes more than 2min to load a small model.

NOTE: Issues that are not bugs or feature requests will be closed. Please ask usage questions on StackOverflow.
You must complete this information or else your issue will be closed

Have I written custom code (as opposed to using a stock example script provided in TensorFlow)?: Y
TensorFlow installed from (source or binary)?:  Installing with native pip
TensorFlow version:   libcurand.so.8.0 locally 1.0.1
Bazel version (if compiling from source):
CUDA/cuDNN version:
GPU Model and Memory:
Exact command to reproduce:

Describe the problem clearly
After shows following, the program waiting for more than 2min to load a small model.
I tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0
I tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1070, pci bus id: 0000:01:00.0)
And at the end it shows like this:
I tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0
I tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1070, pci bus id: 0000:01:00.0)
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1070, pci bus id: 0000:01:00.0)
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1070, pci bus id: 0000:01:00.0)
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1070, pci bus id: 0000:01:00.0)
model loaded!
Source Code / Logs
`
If you have already created the dataset:
if os.path.exists('train_data.npy'):
train_data = np.load('train_data.npy')
else:
train_data = create_train_data()
if os.path.exists('test_data.npy'):
test_data = np.load('test_data.npy')
else:
test_data = process_test_data()
Convlotion model----------------
convnet = input_data(shape=[None, IMG_SIZE, IMG_SIZE, 1], name='input')
----------------
convnet = conv_2d(convnet, 32, 5, activation='relu')
convnet = max_pool_2d(convnet, 5)
----------------
convnet = conv_2d(convnet, 64, 5, activation='relu')
convnet = max_pool_2d(convnet, 5)
----------------
convnet = conv_2d(convnet, 32, 5, activation='relu')
convnet = max_pool_2d(convnet, 5)
----------------
convnet = conv_2d(convnet, 64, 5, activation='relu')
convnet = max_pool_2d(convnet, 5)
----------------
convnet = conv_2d(convnet, 32, 5, activation='relu')
convnet = max_pool_2d(convnet, 5)
----------------
convnet = conv_2d(convnet, 64, 5, activation='relu')
convnet = max_pool_2d(convnet, 5)
----------------
convnet = fully_connected(convnet, 1024, activation='relu')
convnet = dropout(convnet, 0.8)
----------------
convnet = fully_connected(convnet, 512, activation='relu')
convnet = dropout(convnet, 0.6)
----------------
convnet = fully_connected(convnet, 2, activation='softmax')
convnet = regression(convnet, optimizer='adam', learning_rate=LR, loss='categorical_crossentropy', name='targets')
----------------
model = tflearn.DNN(convnet, tensorboard_dir='log')
if os.path.exists('{}.meta'.format(MODEL_NAME)):
model.load(MODEL_NAME)
print('model loaded!')
else:
print "Nothing loaded"
train = train_data[:-500]
test = train_data[-500:]
print train
`