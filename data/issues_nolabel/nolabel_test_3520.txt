verify_tensor_all_finite does not handle list of tensors of different shape

tf.verify_tensor_all_finite works on lists of tensors that have the same shape.
but it does not seem to work on lists of tensors that have different shapes.
Environment info
Operating System: Mac OSX 10.10.5
Installed version of CUDA and cuDNN: None
If installed from binary pip package, provide: 0.9.0rc0
Steps to reproduce
import tensorflow as tf

sess = tf.Session()

x0 = tf.Variable(tf.random_normal([1], dtype=tf.float32))
x1 = tf.Variable(tf.random_normal([1], dtype=tf.float32))
x2 = tf.Variable(tf.random_normal([3], dtype=tf.float32))

sess.run(tf.initialize_all_variables())

# works
assert_ops = [tf.verify_tensor_all_finite(x1, msg='')]
with tf.control_dependencies(assert_ops):
    y = tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))
print(y.eval(session=sess))

# works
assert_ops = [tf.verify_tensor_all_finite(x1, msg=''),
              tf.verify_tensor_all_finite(x2, msg='')]
with tf.control_dependencies(assert_ops):
    y = tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))
print(y.eval(session=sess))

# works (x0 and x1 have same shape)
assert_ops = [tf.verify_tensor_all_finite([x0, x1], msg='')]
with tf.control_dependencies(assert_ops):
    y = tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))
print(y.eval(session=sess))

# fails (x0 and x2 have different shapes)
assert_ops = [tf.verify_tensor_all_finite([x0, x2], msg='')]
with tf.control_dependencies(assert_ops):
    y = tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))
print(y.eval(session=sess))