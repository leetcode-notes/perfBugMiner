Centos: C++, No OpKernel was registered to support Op 'RandomUniform' with these attrs.

OS Platform : Cestos7
python:2.7
gcc:4.8
TensorFlow installed from source
tf version : ('v1.4.0-19-ga52c8d9', '1.4.1')
Bazel version:N/A
CUDA Version 8.0.61
CUDNN_MAJOR : 6
GPU model and memory: 22912MiB*4
Invalid argument: No OpKernel was registered to support Op 'RandomUniform' with these attrs.  Registered devices: [CPU], Registered kernels:

[[Node: loss/transitions/Initializer/random_uniform/RandomUniform = RandomUniformT=DT_INT32, _class=["loc:@loss/transitions"], _output_shapes=[[71,71]], dtype=DT_FLOAT, seed=0, seed2=0]]
the C++ code is :
int main(int argc, char* argv[]) {

	std::cout << "test start----.\n";
	Session* session;
	Status status = NewSession(SessionOptions(), &session);
	if (!status.ok()) {
		std::cout << status.ToString() << "\n";
		return 1;
	}
	std::cout << "Session successfully created..\n";


	//GraphDef graph_def;
	//status = ReadBinaryProto(Env::Default(), "../demo/deep_model/freeze_graph.pb", &graph_def);
	//
	MetaGraphDef graph_def;
	status = ReadBinaryProto(Env::Default(), "../src/checkpoints/model-1.meta", &graph_def);
	if (!status.ok()) {
		std::cout << "readerror=" << status.ToString() << std::endl;
		return 0;
	} 
	else {
		std::cout << "Load graph protobuf successfully" << std::endl;
	}


	//status = session->Create(graph_def);
	status = session->Create(graph_def.graph_def());
	if (!status.ok()) {
  		std::cout << std::endl << std::endl << "error:"<< status.ToString() << std::endl;
	} 
	else {
  		std::cout << "Add graph to session successfully" << std::endl;
	}

	tensorflow::Tensor checkpointTensor(DT_STRING, tensorflow::TensorShape());
	checkpointTensor.scalar<string>()() = "../src/checkpoints/model-1";
   
	status = session->Run(
		{{ graph_def.saver_def().filename_tensor_name(), checkpointTensor }},
        	{},
        	{graph_def.saver_def().restore_op_name()},
       		nullptr);
	if (!status.ok()) {
		std::cout << "run1:" << status.ToString() << std::endl;
		return 0;
	}
	std::cout << "ok" << std::endl;

	session->Close();
	
}