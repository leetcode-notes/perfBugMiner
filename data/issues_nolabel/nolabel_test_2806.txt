Building TF with custom GCC requires hardcoded ld,nm and as

Hi! I am using Fedora 23 to build TensorFlow with GPU support.
GPU support requires a specific GCC version, 4.9 for successful compilation. Since this version is not available from the Fedora Package repositories, it has to be compiled from source. Unfortunately, there are a few obstacles using this version with bazel.
One of those is the following:
After configuring TensorFlow with the self-compiled GCC, and running bazel, the compilation stops with the following message:
gcc: error trying to exec 'as': execvp: No such file or directory
or
gcc: error trying to exec 'nm': execvp: No such file or directory
or
gcc: error trying to exec 'ld': execvp: No such file or directory
To work around this, one can compile GCC by hardcoding the paths to those tools, by adding this to the configuration line of GCC:
--with-ld=/bin/ld --with-nm=/bin/nm --with-as=/usr/bin/as
This does seem rather strange, however, because those programs are on the path, and the custom GCC without bazel is capable of producing working binaries just fine. I feel that in a well-working build system, this kind of hacks should not be necessary.
This is probably a bazel bug, but since I am compiling TensorFlow with it and I cannot be sure that it's not a TF issue, I am creating this here.
Please ping bazel devs as required.