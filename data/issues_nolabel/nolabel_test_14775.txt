tf.set_random_seed doesn't work after any operations have been constructed

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
Yes, just switching the order of this:

tf.set_random_seed(1234)
a = tf.random_uniform([1])
b = tf.random_normal([1])

to this:
a = tf.random_uniform([1])
b = tf.random_normal([1])
tf.set_random_seed(1234)

in this example:
https://www.tensorflow.org/api_docs/python/tf/set_random_seed
No longer sets the seed.

OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
TensorFlow installed from (source or binary):

Binary via pip

TensorFlow version (use command below):

$ python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
v1.3.0-rc2-20-g0787eee 1.3.0


Python version:

$ python --version
Python 3.6.1



Bazel version (if compiling from source):
n/a


GCC/Compiler version (if compiling from source):
n/a


CUDA/cuDNN version:
n/a


GPU model and memory:
n/a


Exact command to reproduce:
python tf-test.py


where tf-test is below:
You can collect some of this information using our environment capture script:
https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh
You can obtain the TensorFlow version with
python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
Describe the problem
If we would like to deterministically run a tensorflow graph, we want to be able to pass in the seed without rebuilding the graph from scratch (which is slow in our interactive application).
Also, this ordering constraint makes it tricky to debug what's going on and no mention is given to the fact that the seed is read in the op creation not execution in the documentation as far as I can tell.
Source code / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.
As written on example page:
$ python tf-test.py 
Session 1
2017-11-21 15:38:24.133822: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-11-21 15:38:24.133854: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
[ 0.96046877]
[ 0.83621562]
[ 0.4987599]
[ 0.54880583]
Session 2
[ 0.96046877]
[ 0.83621562]
[ 0.4987599]
[ 0.54880583]



With set_random_seed after:
$ python tf-test.py 
Session 1
2017-11-21 15:41:57.602615: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-11-21 15:41:57.602638: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
[ 0.53137994]
[ 0.32236636]
[ 1.07008374]
[ 0.49122357]
Session 2
[ 0.07862437]
[ 0.18420935]
[ 0.76287955]
[ 0.47924194]

Full tf-test.py:
import tensorflow as tf

a = tf.random_uniform([1])
b = tf.random_normal([1])

tf.set_random_seed(1234)

# Repeatedly running this block with the same graph will generate the same
# sequences of 'a' and 'b'.
print("Session 1")
with tf.Session() as sess1:
  print(sess1.run(a))  # generates 'A1'
  print(sess1.run(a))  # generates 'A2'
  print(sess1.run(b))  # generates 'B1'
  print(sess1.run(b))  # generates 'B2'

print("Session 2")
with tf.Session() as sess2:
  print(sess2.run(a))  # generates 'A1'
  print(sess2.run(a))  # generates 'A2'
  print(sess2.run(b))  # generates 'B1'
  print(sess2.run(b))  # generates 'B2'