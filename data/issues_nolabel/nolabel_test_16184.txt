Tensorflow and libcuda.so.1

Tensorflow 1.4.1
OS:  CentOS 6/7  (we use customized gcc 4.9.2 build for CentOS 6)
We have a number of computational servers.  Some are with GPU but some are not.  For the ease of maintenance, we build tensorflow from source code (bazel build) and install the modules under
/usr/local/... that all computational servers mount to the same /usr/local by means of NFS.
In the past (Tensorflow 1.0.0), the module could be built without linking with libcuda.so.1.  When a computational server without GPU runs tensorflow, it could run as CPU mode without problems.  When the computational server with GPU runs tensorflow, it could detect the GPU and load up libcuda.so.1 (and libcudart.so and libcudnn.so) by using dso_loader.  This works great for supporting both GPU and non-GPU servers while sharing the same module.
But I think that since 1.2.1 (at least, still 1.4.1), it seems that linking libcuda.so.1 is mandatory.  This is bad when non-GPU server would fail loading the module (missing libcuda.so.1), unless we explicitly putting libcuda.so.1 under /usr/lib64 (but this is a non-GPU server...!).
Wonder if it is possible to make use of the old method of dso_loader instead of linking libcuda.so.1 for bazel building.  Thanks.