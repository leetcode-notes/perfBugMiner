map_fn produces inconsistent results when using numpy vs. tf constants

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Nope
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04
TensorFlow installed from (source or binary): Binary
TensorFlow version (use command below): 1.5
Python version: 3.5.2
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version: CUDA 9, cudnn 7
GPU model and memory: Quadro M1200 4GB
Exact command to reproduce: See below

Describe the problem
According to the map_fn docs, second example https://www.tensorflow.org/api_docs/python/tf/map_fn
elems = (np.array([1, 2, 3]), np.array([-1, 1, -1]))
alternate = map_fn(lambda x: x[0] * x[1], elems, dtype=tf.int64)
## alternate == [-1, 2, -3]

I ran this
elems = (np.array([1, 2, 3]), np.array([-1, 1, -1]))
output = tf.map_fn(lambda x: x[0] * x[1], elems, dtype=tf.int64)
sess = tf.Session()
print(sess.run(output))

which returns [-1 2 -3] as expected
But if I run
elems = tf.constant(((1, 2, 3), (-1, 1, -1)), dtype=tf.int64)
output = tf.map_fn(lambda x: x[0] * x[1], elems, dtype=tf.int64)
sess = tf.Session()
print(sess.run(output))

The output is [2 -1], which is not what I expected since the input is the same numbers with the same shape.
The output should be the same? Is there something special going on with numpy arrays?
Interesting read: https://stackoverflow.com/questions/45905601/how-does-tf-map-fn-work