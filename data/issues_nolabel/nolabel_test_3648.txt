SKFlow - RNN - Tuple does not have dtype

GitHub issues are for bugs / installation problems / feature requests.
For general support from the community, see StackOverflow.
To make bugs and feature requests more easy to find and organize, we close issues that are deemed
out of scope for GitHub Issues and point people to StackOverflow.
For bugs or installation issues, please provide the following information.
The more information you provide, the more easily we will be able to offer
help and advice.
Environment info
Operating System: gcr docker image running in Ubuntu 16.04
Steps to reproduce
Contact me via private message or twitter (@data4bots) and I can give you access to my Python Notebook to replicate full issue and let you see the entire thing.
What have you tried?

Not really sure where to begin with this one, it seems pretty odd on the surface to me.  I'll be digging in and taking suggestions.

Logs or other output that would be helpful
(If logs are large, please upload as attachment).
$$$$$$$$$
$ Output $
$$$$$$$$$
AttributeErrorTraceback (most recent call last)
 in ()
22                         continue_training=True)
23
---> 24 classifier.fit(zip(_train)[0], zip(_test)[1])
/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/base.pyc in fit(self, X, y, monitor, logdir)
216         self._data_feeder = setup_train_data_feeder(X, y,
217                                                     self.n_classes,
--> 218                                                     self.batch_size)
219
220         if monitor is None:
/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/io/data_feeder.pyc in setup_train_data_feeder(X, y, n_classes, batch_size)
97                              "streaming learning to work.")
98         data_feeder_cls = StreamingDataFeeder
---> 99     return data_feeder_cls(X, y, n_classes, batch_size)
100
101
/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/io/data_feeder.pyc in init(self, X, y, n_classes, batch_size, random_state)
187
188     def init(self, X, y, n_classes, batch_size, random_state=None):
--> 189         x_dtype = np.int64 if X.dtype == np.int64 else np.float32
190         y_dtype = np.int64 if n_classes > 1 else np.float32
191         self.X = check_array(X, dtype=x_dtype)
AttributeError: 'tuple' object has no attribute 'dtype'
$$$$$$$$$$$$$$$
$ Data Snapshot $
$$$$$$$$$$$$$$$
Labeled
[array([128, 128, 128, ..., 128, 128, 128], dtype=uint8) 1]
[array([128, 128, 128, ..., 128, 128, 128], dtype=uint8) 3]
[array([128, 128, 128, ..., 128, 128, 128], dtype=uint8) 3]
[array([128, 128, 128, ..., 128, 128, 128], dtype=uint8) 2]
Split using zip(_data)[0] to grab the list of arrays and zip(_data)[1] to grab the labels
$$$$$$$$$$$$
$ Some Code $
$$$$$$$$$$$$$
indices = np.random.permutation(data)
valid_cnt = int(len(data) * 0.25)
test, train = indices[:valid_cnt], indices[valid_cnt:]
def listify(x):
return [x]
num_classes = 3
Hyper Params
state_size = 3
num_layers = 4
steps = 100
learningRate = 0.01
One line model
classifier = skflow.TensorFlowRNNClassifier(
rnn_size=state_size,
n_classes = num_classes,
cell_type='rnn',
input_op_fn = listify,
num_layers = num_layers,
steps = steps,
optimizer = 'Adam',
learning_rate = learningRate,
continue_training=True)
classifier.fit(zip(_train)[0], zip(_test)[1])
$$$$$$$$$$$$
$ Final Notes $
$$$$$$$$$$$$
I'm just learning this thing, so bear with it.  Let me know what I can do to help.  Again, get hold of me and I'll open up the Jupyter notebook to you.