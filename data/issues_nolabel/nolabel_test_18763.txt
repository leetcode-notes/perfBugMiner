Multiple Classes fails in Eager Mode ("tf.keras.Model")

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
No
Bazel version:
N/A
CUDA/cuDNN version:
N/A
GPU model and memory:
N/A
OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
Tried on MacOS using tensorflow as well as Linux Ubuntu 16.04 using tensorflow-gpu
TensorFlow installed from (source or binary):
Installed utilizing pip
TensorFlow version (use command below):
1.7
Python version:
3.6
Exact command to reproduce:

import tensorflow as tf  
import tensorflow.contrib.eager as tfe  

tfe.enable_eager_execution()

class CustomLayer(tf.keras.Model):
    def __init__(self):
        super(CustomLayer, self).__init__()
        print("blah")

class CustomNetwork(tf.keras.Model):
    def __init__(self):
        super(CustomNetwork, self).__init__()
        self.custom_layers = CustomLayer()

    def forward(self, x, y=None):
        x = self.custom_layers(x)

CustomNetwork().forward(tf.convert_to_tensor([1]))

Describe the problem
Trying to utilize multiple classes fails in tensorflow eager mode utilizing "tf.keras.Model". If I change "tf.keras.Model" to "tfe.Network" it works - keep in mind I am utilizing tensorflow 1.7.  The error I get running the above code results in the error below:
Source code / logs
blah
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-12-9afa9b91ddef> in <module>()
----> 1 CustomNetwork().forward(tf.convert_to_tensor([1]))

<ipython-input-11-484119102aec> in forward(self, x, y)
      5 
      6     def forward(self, x, y=None):
----> 7         x = self.custom_layers(x)

~/anaconda3/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/engine/base_layer.py in __call__(self, inputs, **kwargs)
    237     """
    238     # Actually call the layer (optionally building it).
--> 239     output = super(Layer, self).__call__(inputs, **kwargs)
    240     if context.executing_eagerly():
    241       return output

~/anaconda3/lib/python3.6/site-packages/tensorflow/python/layers/base.py in __call__(self, inputs, *args, **kwargs)
    712 
    713         if not in_deferred_mode:
--> 714           outputs = self.call(inputs, *args, **kwargs)
    715           if outputs is None:
    716             raise ValueError('A layer\'s `call` method should return a Tensor '

~/anaconda3/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/engine/network.py in call(self, inputs, training, mask)
    635     outputs, _ = self._run_internal_graph(inputs,
    636                                           training=training,
--> 637                                           mask=masks)
    638     return outputs
    639 

~/anaconda3/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/engine/network.py in _run_internal_graph(self, inputs, training, mask)
    770     # does not return a list the same size as `call`
    771     tensor_map = {}
--> 772     for x, y, mask in zip(self.inputs, inputs, masks):
    773       tensor_map[str(id(x))] = (y, mask)
    774 

TypeError: zip argument #1 must support iteration