The reuse flag of tf.variable_scope doesn't work with tf.contrib.layers ?

For example, I defined a simple network
import tensorflow as tf
import tensorflow.contrib.layers as tcl

def model(x, reuse=None):
    with tf.variable_scope('foo', reuse=reuse) as scope:
        tcl.conv2d(x, 3, 3, 1)
And then, I try to call the model function twice without setting reuse=True for second call
x1 = tf.placeholder(tf.float32, (10,10,3))
x2 = tf.placeholder(tf.float32, (10,10,3))
model(x1)
model(x2)
When using with tf.get_variable(), this will cause a error. However, it's not the case for tf.contrib.layers?
I tried to print out all the nodes in the graph with following codes
for n in tf.get_default_graph().as_graph_def().node:
    print(n.name)
I got this result:
Placeholder
Placeholder_1
foo/Conv/weights/Initializer/random_uniform/shape
foo/Conv/weights/Initializer/random_uniform/min
foo/Conv/weights/Initializer/random_uniform/max
foo/Conv/weights/Initializer/random_uniform/RandomUniform
foo/Conv/weights/Initializer/random_uniform/sub
foo/Conv/weights/Initializer/random_uniform/mul
foo/Conv/weights/Initializer/random_uniform
foo/Conv/weights
foo/Conv/weights/Assign
foo/Conv/weights/read
foo/Conv/biases/Initializer/Const
foo/Conv/biases
foo/Conv/biases/Assign
foo/Conv/biases/read
foo/Conv/convolution/Shape
foo/Conv/convolution/dilation_rate
foo/Conv/convolution/ExpandDims/dim
foo/Conv/convolution/ExpandDims
foo/Conv/convolution/ExpandDims_1/dim
foo/Conv/convolution/ExpandDims_1
foo/Conv/convolution/Conv2D
foo/Conv/convolution/Squeeze
foo/Conv/BiasAdd
foo/Conv/Relu
foo_1/Conv/convolution/Shape
foo_1/Conv/convolution/dilation_rate
foo_1/Conv/convolution/ExpandDims/dim
foo_1/Conv/convolution/ExpandDims
foo_1/Conv/convolution/ExpandDims_1/dim
foo_1/Conv/convolution/ExpandDims_1
foo_1/Conv/convolution/Conv2D
foo_1/Conv/convolution/Squeeze
foo_1/Conv/BiasAdd
foo_1/Conv/Relu

It seems that there is only one copy of weights, instead of two.
So, even if reuse is not set to True, the weights can still be shared ?
Is this the correct behavior?
Or did I miss anything?
I'm using Python3, Tensorflow 1.0.1, Ubuntu 16.04.