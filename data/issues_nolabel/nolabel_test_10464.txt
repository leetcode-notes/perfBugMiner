Expected dimension in the range [-1, 1), but got 1

the error
InvalidArgumentError                      Traceback (most recent call last)
C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tensorflow\python\client\session.py in _do_call(self, fn, *args)
1021     try:
-> 1022       return fn(*args)
1023     except errors.OpError as e:
C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tensorflow\python\client\session.py in _run_fn(session, feed_dict, fetch_list, target_list, options, run_metadata)
1003                                  feed_dict, fetch_list, target_list,
-> 1004                                  status, run_metadata)
1005
C:\Users\Owner\Anaconda3\envs\tensorflow\lib\contextlib.py in exit(self, type, value, traceback)
65             try:
---> 66                 next(self.gen)
67             except StopIteration:
C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tensorflow\python\framework\errors_impl.py in raise_exception_on_not_ok_status()
465           compat.as_text(pywrap_tensorflow.TF_Message(status)),
--> 466           pywrap_tensorflow.TF_GetCode(status))
467   finally:
InvalidArgumentError: Expected dimension in the range [-1, 1), but got 1
[[Node: ArgMax_1 = ArgMax[T=DT_INT32, Tidx=DT_INT32, _device="/job:localhost/replica:0/task:0/cpu:0"](_recv_Placeholder_2_0, ArgMax_1/dimension)]]
During handling of the above exception, another exception occurred:
InvalidArgumentError                      Traceback (most recent call last)
 in ()
1 batch_xs, batch_ys = dm.loadbatch(151,"data/NoneNematic/validate/NoneNematic",0)
----> 2 print(sess.run(accuracy, feed_dict={x: batch_xs, z_: batch_ys}))
C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tensorflow\python\client\session.py in run(self, fetches, feed_dict, options, run_metadata)
765     try:
766       result = self._run(None, fetches, feed_dict, options_ptr,
--> 767                          run_metadata_ptr)
768       if run_metadata:
769         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)
C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tensorflow\python\client\session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)
963     if final_fetches or final_targets:
964       results = self._do_run(handle, final_targets, final_fetches,
--> 965                              feed_dict_string, options, run_metadata)
966     else:
967       results = []
C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tensorflow\python\client\session.py in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)
1013     if handle is None:
1014       return self._do_call(_run_fn, self._session, feed_dict, fetch_list,
-> 1015                            target_list, options, run_metadata)
1016     else:
1017       return self._do_call(_prun_fn, self._session, handle, feed_dict,
C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tensorflow\python\client\session.py in _do_call(self, fn, *args)
1033         except KeyError:
1034           pass
-> 1035       raise type(e)(node_def, op, message)
1036
1037   def _extend_graph(self):
InvalidArgumentError: Expected dimension in the range [-1, 1), but got 1
[[Node: ArgMax_1 = ArgMax[T=DT_INT32, Tidx=DT_INT32, _device="/job:localhost/replica:0/task:0/cpu:0"](_recv_Placeholder_2_0, ArgMax_1/dimension)]]
Caused by op 'ArgMax_1', defined at:
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\runpy.py", line 193, in _run_module_as_main
"main", mod_spec)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\runpy.py", line 85, in _run_code
exec(code, run_globals)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\ipykernel_launcher.py", line 16, in 
app.launch_new_instance()
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\traitlets\config\application.py", line 658, in launch_instance
app.start()
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\ipykernel\kernelapp.py", line 477, in start
ioloop.IOLoop.instance().start()
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\zmq\eventloop\ioloop.py", line 177, in start
super(ZMQIOLoop, self).start()
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tornado\ioloop.py", line 887, in start
handler_func(fd_obj, events)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tornado\stack_context.py", line 275, in null_wrapper
return fn(*args, **kwargs)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\zmq\eventloop\zmqstream.py", line 440, in _handle_events
self._handle_recv()
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\zmq\eventloop\zmqstream.py", line 472, in _handle_recv
self._run_callback(callback, msg)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\zmq\eventloop\zmqstream.py", line 414, in run_callback
callback(*args, **kwargs)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tornado\stack_context.py", line 275, in null_wrapper
return fn(*args, **kwargs)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\ipykernel\kernelbase.py", line 283, in dispatcher
return self.dispatch_shell(stream, msg)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\ipykernel\kernelbase.py", line 235, in dispatch_shell
handler(stream, idents, msg)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\ipykernel\kernelbase.py", line 399, in execute_request
user_expressions, allow_stdin)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\ipykernel\ipkernel.py", line 196, in do_execute
res = shell.run_cell(code, store_history=store_history, silent=silent)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\ipykernel\zmqshell.py", line 533, in run_cell
return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\IPython\core\interactiveshell.py", line 2717, in run_cell
interactivity=interactivity, compiler=compiler, result=result)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\IPython\core\interactiveshell.py", line 2821, in run_ast_nodes
if self.run_code(code, result):
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\IPython\core\interactiveshell.py", line 2881, in run_code
exec(code_obj, self.user_global_ns, self.user_ns)
File "", line 1, in 
correct_prediction = tf.equal(tf.argmax(z,1), tf.argmax(z,1))
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tensorflow\python\ops\math_ops.py", line 173, in argmax
return gen_math_ops.arg_max(input, axis, name)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tensorflow\python\ops\gen_math_ops.py", line 168, in arg_max
name=name)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tensorflow\python\framework\op_def_library.py", line 763, in apply_op
op_def=op_def)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tensorflow\python\framework\ops.py", line 2327, in create_op
original_op=self._default_original_op, op_def=op_def)
File "C:\Users\Owner\Anaconda3\envs\tensorflow\lib\site-packages\tensorflow\python\framework\ops.py", line 1226, in init
self._traceback = _extract_stack()
InvalidArgumentError (see above for traceback): Expected dimension in the range [-1, 1), but got 1
[[Node: ArgMax_1 = ArgMax[T=DT_INT32, Tidx=DT_INT32, _device="/job:localhost/replica:0/task:0/cpu:0"](_recv_Placeholder_2_0, ArgMax_1/dimension)]]
the code
STM Data intermediate brain
Import dataset and tensorflow
In [ ]:
import tensorflow as tf
import math
In [ ]:
import datamaker as dm
import matplotlib.pyplot as plt
import numpy as np
Define the Model
In [ ]:
Nhidden=1024
IMAGE_SIZE = 30
IMAGE_PIXELS = IMAGE_SIZE * IMAGE_SIZE
NUM_CLASSES = 2
In [ ]:
x = tf.placeholder(tf.float32, [None, IMAGE_PIXELS])
In [ ]:
W = tf.Variable(tf.zeros([IMAGE_PIXELS, Nhidden]))
b = tf.Variable(tf.zeros([Nhidden]))
In [ ]:
y = tf.nn.relu(tf.matmul(x, W) + b)
In [ ]:
V = tf.Variable(tf.zeros([Nhidden,NUM_CLASSES]))
a = tf.Variable(tf.zeros([NUM_CLASSES]))
In [ ]:
z = tf.nn.softmax(tf.matmul(y,V)+a)
In [ ]:
y_ = tf.placeholder(tf.float32, [None, Nhidden])
In [ ]:
z_ = tf.placeholder(tf.int32, [100])
Define the cost/loss function and training algorithm
In [ ]:
#cross_entropy1 = tf.nn.softmax_cross_entropy_with_logits(labels=y_,logits=tf.matmul(x, W) + b)
In [ ]:
#train_step1 = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy1)
In [ ]:
cross_entropy = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=z_,logits=tf.matmul(y,V)+a)
In [ ]:
loss = tf.reduce_mean(cross_entropy)
In [ ]:
train_step = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
Train the model
In [ ]:
sess = tf.InteractiveSession()
In [ ]:
tf.global_variables_initializer().run()
In [ ]:
for b in range(94):
batch_xs, batch_ys = dm.loadbatch(b,"data/NoneNematic/train/NoneNematic",0)
sess.run(train_step, feed_dict={x: batch_xs, z_: batch_ys})
In [ ]:
for b in range(100):
batch_xs, batch_ys = dm.loadbatch(b,"data/Nematic/train/Nematic",1)
sess.run(train_step, feed_dict={x: batch_xs, z_: batch_ys})
Evaluate the model
In [ ]:
correct_prediction = tf.equal(tf.argmax(z,1), tf.argmax(z_,1))
In [ ]:
t
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.int32))
In [ ]:
batch_xs, batch_ys = dm.loadbatch(151,"data/NoneNematic/validate/NoneNematic",0)
print(sess.run(accuracy, feed_dict={x: batch_xs, z_: batch_ys}))
In [ ]:
accuracy.eval({x: batch_xs, z_: batch_ys})
print("Accuracy:", accuracy.eval({x: batch_xs, z_: batch_ys}))
In [ ]:
print(sess.run(z, feed_dict={x:batch_xs}))
print(sess.run(z, feed_dict={x:batch_xs}))