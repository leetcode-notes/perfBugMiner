classifier.predict can't stop if input_fn return a sample tuple

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): y
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04
TensorFlow installed from (source or binary): source
TensorFlow version (use command below): 1.8
Python version: 3.6
Bazel version: N/A
CUDA/cuDNN version: N/A
GPU model and memory: N/A
Exact command to reproduce: N/A

In [7]: import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)
v1.8.0-0-g93bc2e2072 1.8.0
Describe the problem
If input_fn return a sample tuple, it won't stop and predict again and again
result = classifier.predict(lambda: (ev_data,))
But, if input_fn return a tf.data.Dataset, it work well.
result = classifier.predict(lambda: eval_input_fn(ev_data, labels=None, batch_size=1))
After debug, i found a while loop can't stop in here while not mon_sess.should_stop()
But it seem like tuple is supported
So, the return of input_fn must be tf.data.Dataset type? Or, should I give it a end-of-input exceptionby myself?
Source code / logs
Here is my code
import tensorflow as tf


def eval_input_fn(features, labels, batch_size):
    """An input function for evaluation or prediction"""
    features = dict(features)
    if labels is None:
        # No labels, use only features.
        inputs = features
    else:
        inputs = (features, labels)

    # Convert the inputs to a Dataset.
    dataset = tf.data.Dataset.from_tensor_slices(inputs)

    # Batch the examples
    assert batch_size is not None, "batch_size must not be None"
    dataset = dataset.batch(batch_size)

    # Return the dataset.
    return dataset


train_x = {'x1': [0, 1, 0, 1], 'x2': [0, 0, 1, 1]}
label = [0, 1, 1, 0]

ev_data = {'x1': [0.5, 0.5, 0.5, 1], 'x2': [0.5, 0, 1, 1]}

train_steps = 1000
my_feature_columns = []
for key in train_x.keys():
    my_feature_columns.append(tf.feature_column.numeric_column(key=key))

classifier = tf.estimator.DNNClassifier(
    feature_columns=my_feature_columns,
    hidden_units=[4, 4],
    n_classes=2)

classifier.train(lambda: (train_x, label), steps=train_steps)

result = classifier.predict(lambda: eval_input_fn(ev_data, labels=None, batch_size=1))
# result = classifier.predict(lambda: (ev_data,)) # it won't stop
for r in result:
    print(r)
If I return tf.data.Dataset, here is output:
INFO:tensorflow:Using default config.
WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpyu6blxd6
INFO:tensorflow:Using config: {'_model_dir': '/tmp/tmpyu6blxd6', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': None, '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x7f5c9dfcdd30>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}
INFO:tensorflow:Calling model_fn.
INFO:tensorflow:Done calling model_fn.
INFO:tensorflow:Create CheckpointSaverHook.
INFO:tensorflow:Graph was finalized.
INFO:tensorflow:Running local_init_op.
INFO:tensorflow:Done running local_init_op.
INFO:tensorflow:Saving checkpoints for 1 into /tmp/tmpyu6blxd6/model.ckpt.
INFO:tensorflow:loss = 2.571034, step = 1
INFO:tensorflow:global_step/sec: 792.849
INFO:tensorflow:loss = 1.2854626, step = 101 (0.126 sec)
INFO:tensorflow:global_step/sec: 1621.83
INFO:tensorflow:loss = 0.58735335, step = 201 (0.062 sec)
INFO:tensorflow:global_step/sec: 1585.9
INFO:tensorflow:loss = 0.37925595, step = 301 (0.063 sec)
INFO:tensorflow:global_step/sec: 1579.13
INFO:tensorflow:loss = 0.286068, step = 401 (0.063 sec)
INFO:tensorflow:global_step/sec: 1656.07
INFO:tensorflow:loss = 0.23221238, step = 501 (0.060 sec)
INFO:tensorflow:global_step/sec: 1624.02
INFO:tensorflow:loss = 0.1968127, step = 601 (0.062 sec)
INFO:tensorflow:global_step/sec: 1565.82
INFO:tensorflow:loss = 0.1710473, step = 701 (0.064 sec)
INFO:tensorflow:global_step/sec: 1619.16
INFO:tensorflow:loss = 0.15148035, step = 801 (0.062 sec)
INFO:tensorflow:global_step/sec: 1600.48
INFO:tensorflow:loss = 0.13629705, step = 901 (0.063 sec)
INFO:tensorflow:Saving checkpoints for 1000 into /tmp/tmpyu6blxd6/model.ckpt.
INFO:tensorflow:Loss for final step: 0.12395525.
INFO:tensorflow:Calling model_fn.
INFO:tensorflow:Done calling model_fn.
INFO:tensorflow:Graph was finalized.
INFO:tensorflow:Restoring parameters from /tmp/tmpyu6blxd6/model.ckpt-1000
INFO:tensorflow:Running local_init_op.
INFO:tensorflow:Done running local_init_op.
{'logits': array([-2.8130803], dtype=float32), 'logistic': array([0.05662142], dtype=float32), 'probabilities': array([0.94337857, 0.05662142], dtype=float32), 'class_ids': array([0]), 'classes': array([b'0'], dtype=object)}
{'logits': array([2.2674427], dtype=float32), 'logistic': array([0.90614456], dtype=float32), 'probabilities': array([0.09385548, 0.90614456], dtype=float32), 'class_ids': array([1]), 'classes': array([b'1'], dtype=object)}
{'logits': array([1.0914161], dtype=float32), 'logistic': array([0.7486483], dtype=float32), 'probabilities': array([0.2513517, 0.7486483], dtype=float32), 'class_ids': array([1]), 'classes': array([b'1'], dtype=object)}
{'logits': array([-2.8130803], dtype=float32), 'logistic': array([0.05662142], dtype=float32), 'probabilities': array([0.94337857, 0.05662142], dtype=float32), 'class_ids': array([0]), 'classes': array([b'0'], dtype=object)}

But if I return a sample tuple, the output whould stop like this:
...
...
...
INFO:tensorflow:Done running local_init_op.
{'logits': array([-2.8130803], dtype=float32), 'logistic': array([0.05662142], dtype=float32), 'probabilities': array([0.94337857, 0.05662142], dtype=float32), 'class_ids': array([0]), 'classes': array([b'0'], dtype=object)}
{'logits': array([2.2674427], dtype=float32), 'logistic': array([0.90614456], dtype=float32), 'probabilities': array([0.09385548, 0.90614456], dtype=float32), 'class_ids': array([1]), 'classes': array([b'1'], dtype=object)}
{'logits': array([1.0914161], dtype=float32), 'logistic': array([0.7486483], dtype=float32), 'probabilities': array([0.2513517, 0.7486483], dtype=float32), 'class_ids': array([1]), 'classes': array([b'1'], dtype=object)}
{'logits': array([-2.8130803], dtype=float32), 'logistic': array([0.05662142], dtype=float32), 'probabilities': array([0.94337857, 0.05662142], dtype=float32), 'class_ids': array([0]), 'classes': array([b'0'], dtype=object)}
{'logits': array([-2.8130803], dtype=float32), 'logistic': array([0.05662142], dtype=float32), 'probabilities': array([0.94337857, 0.05662142], dtype=float32), 'class_ids': array([0]), 'classes': array([b'0'], dtype=object)}
{'logits': array([2.2674427], dtype=float32), 'logistic': array([0.90614456], dtype=float32), 'probabilities': array([0.09385548, 0.90614456], dtype=float32), 'class_ids': array([1]), 'classes': array([b'1'], dtype=object)}
{'logits': array([1.0914161], dtype=float32), 'logistic': array([0.7486483], dtype=float32), 'probabilities': array([0.2513517, 0.7486483], dtype=float32), 'class_ids': array([1]), 'classes': array([b'1'], dtype=object)}
{'logits': array([-2.8130803], dtype=float32), 'logistic': array([0.05662142], dtype=float32), 'probabilities': array([0.94337857, 0.05662142], dtype=float32), 'class_ids': array([0]), 'classes': array([b'0'], dtype=object)}
{'logits': array([-2.8130803], dtype=float32), 'logistic': array([0.05662142], dtype=float32), 'probabilities': array([0.94337857, 0.05662142], dtype=float32), 'class_ids': array([0]), 'classes': array([b'0'], dtype=object)}
{'logits': array([2.2674427], dtype=float32), 'logistic': array([0.90614456], dtype=float32), 'probabilities': array([0.09385548, 0.90614456], dtype=float32), 'class_ids': array([1]), 'classes': array([b'1'], dtype=object)}
{'logits': array([1.0914161], dtype=float32), 'logistic': array([0.7486483], dtype=float32), 'probabilities': array([0.2513517, 0.7486483], dtype=float32), 'class_ids': array([1]), 'classes': array([b'1'], dtype=object)}
{'logits': array([-2.8130803], dtype=float32), 'logistic': array([0.05662142], dtype=float32), 'probabilities': array([0.94337857, 0.05662142], dtype=float32), 'class_ids': array([0]), 'classes': array([b'0'], dtype=object)}
.....more