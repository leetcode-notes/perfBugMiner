Tensors have values set to 0 if code is run on GPU.

Hello team,
I have a strange issue, which very well might be my own fault, but appreciate if somebody could comment on it.
TF 0.10 with CUDA 8
Running code like this on GPU (GeForce GTX Titan X) :
`import tensorflow as tf
import numpy as np
with tf.device("/gpu:0"):
a = tf.placeholder(tf.float32, shape=[2,2])
b = tf.placeholder(tf.float32, shape=[2,2])
r = tf.squared_difference(a, b)
t1 = np.asarray([[1,1],[1,-5]])
t2 = np.asarray([[2,3],[4,5]])
feed_dict = {a:t1, b:t2}
with tf.Session() as sess:
t1, t2, sd = sess.run([a,b,r], feed_dict=feed_dict)
print("a = {}\n b = {}\n sqared diff = {}".format(t1, t2, sd))`
Prints result like this
a = [[ 1. 1.] [ 1. -5.]] b = [[ 2. 3.] [ 4. 5.]] sqared diff = [[ 0. 0.] [ 0. 0.]]
While if I run the same code on CPU , the result is correct
a = [[ 1. 1.] [ 1. -5.]] b = [[ 2. 3.] [ 4. 5.]] sqared diff = [[ 1. 4.] [ 9. 100.]]
I'd expect squared_difference to be a perfect operation for GPU and as I tensors "a" and "b" are populated properly, it doesn't look like TF has issues getting those values into GPU
Appreciate any comments on this.
Operating System: 4.4.0-34-generic #53-Ubuntu
python -c "import tensorflow; print(tensorflow.__version__)" I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so.8.0 locally I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so.8.0 locally I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcuda.so.1 locally I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so.8.0 locally 0.10.0rc0.