Model checkpoint issue: serialization error for tf.string

TF version: 1.8
Installation: tensorflow/tensorflow:latest-gpu
OS details:
Distributor ID:	Ubuntu
Description:	Ubuntu 16.04.4 LTS
Release:	16.04
Codename:	xenial
AWS instance: p2.xlarge
GPU details:
[name: "/device:CPU:0"
device_type: "CPU"
memory_limit: 268435456
locality {
}
incarnation: 16086859869116902206
, name: "/device:GPU:0"
device_type: "GPU"
memory_limit: 11285974221
locality {
  bus_id: 1
  links {
  }
}
incarnation: 13890740079777279899
physical_device_desc: "device: 0, name: Tesla K80, pci bus id: 0000:00:1e.0, compute capability: 3.7"
]

Custom code:
use_model = hub.Module("http://tfhub.dev/google/universal-sentence-encoder/1", trainable=True);
sess.run(tf.global_variables_initializer());
sess.run(tf.tables_initializer());

def USEEmbedding(x):
    return use_model(tf.squeeze(tf.cast(x, tf.string)), 
                      signature="default", as_dict=True)["default"]
 
input_text = layers.Input(shape=(1,), dtype=tf.string)
embedding = layers.Lambda(USEEmbedding, output_shape=(512,))(input_text)
dense = layers.Dense(1024, activation='relu')(embedding)
bnorm = layers.BatchNormalization()(dense)
pred = layers.Dense(2000, activation='softmax')(bnorm)

model = Model(inputs=[input_text], outputs=pred)

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()

callbacks = [keras.callbacks.EarlyStopping(monitor='val_acc',
                                               min_delta=1e-3,
                                               patience=8,
                                               verbose=0,
                                               mode='auto'),
             keras.callbacks.ModelCheckpoint('../models/best-weights.h5',
                                                 monitor='val_acc',
                                                 verbose=1,
                                                 save_best_only=True,
                                                 mode='auto'),
             keras.callbacks.TensorBoard(log_dir='../tb-logs', histogram_freq=0,
                                         write_graph=True, write_images=False)]

train_text = [' '.join(t.split()[0:20]) for t in train_x.sentences.tolist()]
train_text = np.array(train_text, dtype=object)[:, np.newaxis]
valid_text = [' '.join(t.split()[0:20]) for t in valid_x.sentences.tolist()]
valid_text = np.array(valid_text, dtype=object)[:, np.newaxis]

model.fit(train_text , train['labels'].tolist(),
          validation_data=(valid_text, valid['labels'].tolist()),
          epochs=100, batch_size=256,
          callbacks=callbacks, shuffle=True)
Error:

TypeError                                 Traceback (most recent call last)
<ipython-input-81-e546b70750dc> in <module>()
      2           validation_data=(valid_text, valid['labels'].tolist()),
      3           epochs=100, batch_size=256,
----> 4           callbacks=callbacks, shuffle=True)

/usr/local/lib/python2.7/dist-packages/keras/engine/training.pyc in fit(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, **kwargs)
   1703                               initial_epoch=initial_epoch,
   1704                               steps_per_epoch=steps_per_epoch,
-> 1705                               validation_steps=validation_steps)
   1706 
   1707     def evaluate(self, x=None, y=None,

/usr/local/lib/python2.7/dist-packages/keras/engine/training.pyc in _fit_loop(self, f, ins, out_labels, batch_size, epochs, verbose, callbacks, val_f, val_ins, shuffle, callback_metrics, initial_epoch, steps_per_epoch, validation_steps)
   1254                             for l, o in zip(out_labels, val_outs):
   1255                                 epoch_logs['val_' + l] = o
-> 1256             callbacks.on_epoch_end(epoch, epoch_logs)
   1257             if callback_model.stop_training:
   1258                 break

/usr/local/lib/python2.7/dist-packages/keras/callbacks.pyc in on_epoch_end(self, epoch, logs)
     75         logs = logs or {}
     76         for callback in self.callbacks:
---> 77             callback.on_epoch_end(epoch, logs)
     78 
     79     def on_batch_begin(self, batch, logs=None):

/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/_impl/keras/callbacks.pyc in on_epoch_end(self, epoch, logs)
    466               self.model.save_weights(filepath, overwrite=True)
    467             else:
--> 468               self.model.save(filepath, overwrite=True)
    469           else:
    470             if self.verbose > 0:

/usr/local/lib/python2.7/dist-packages/keras/engine/topology.pyc in save(self, filepath, overwrite, include_optimizer)
   2589         """
   2590         from ..models import save_model
-> 2591         save_model(self, filepath, overwrite, include_optimizer)
   2592 
   2593     def save_weights(self, filepath, overwrite=True):

/usr/local/lib/python2.7/dist-packages/keras/models.pyc in save_model(model, filepath, overwrite, include_optimizer)
    125             'class_name': model.__class__.__name__,
    126             'config': model.get_config()
--> 127         }, default=get_json_type).encode('utf8')
    128 
    129         model_weights_group = f.create_group('model_weights')

/usr/lib/python2.7/json/__init__.pyc in dumps(obj, skipkeys, ensure_ascii, check_circular, allow_nan, cls, indent, separators, encoding, default, sort_keys, **kw)
    249         check_circular=check_circular, allow_nan=allow_nan, indent=indent,
    250         separators=separators, encoding=encoding, default=default,
--> 251         sort_keys=sort_keys, **kw).encode(obj)
    252 
    253 

/usr/lib/python2.7/json/encoder.pyc in encode(self, o)
    205         # exceptions aren't as detailed.  The list call should be roughly
    206         # equivalent to the PySequence_Fast that ''.join() would do.
--> 207         chunks = self.iterencode(o, _one_shot=True)
    208         if not isinstance(chunks, (list, tuple)):
    209             chunks = list(chunks)

/usr/lib/python2.7/json/encoder.pyc in iterencode(self, o, _one_shot)
    268                 self.key_separator, self.item_separator, self.sort_keys,
    269                 self.skipkeys, _one_shot)
--> 270         return _iterencode(o, 0)
    271 
    272 def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,

/usr/local/lib/python2.7/dist-packages/keras/models.pyc in get_json_type(obj)
    102             return obj.__name__
    103 
--> 104         raise TypeError('Not JSON Serializable:', obj)
    105 
    106     from . import __version__ as keras_version

TypeError: ('Not JSON Serializable:', tf.string)