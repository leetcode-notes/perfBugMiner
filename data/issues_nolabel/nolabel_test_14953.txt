Tensor roll op implementation

Closes #10761
Added a tf.manip.roll op that works similarly to numpy's np.roll. This was a feature requested in #10761 and was marked as contributions welcome.
Usage:
Rolls the elements of a tensor by the offsets of shift along the dimensions
of axis. Elements that roll passed the last position will wrap around
to the first.
For example:
# 't' is [0, 1, 2, 3, 4]
roll(t, shift=2, axis=0) ==> [3, 4, 0, 1, 2]
# shifting along multiple dimensions
# 't' is [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]
roll(t, shift=[1, -2], axis=[0, 1]) ==> [[7, 8, 9, 5, 6], [2, 3, 4, 0, 1]]
# shifting along the same axis multiple times
# 't' is [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]
roll(t, shift=[2, -3], axis=[1, 1]) ==> [[1, 2, 3, 4, 0], [6, 7, 8, 9, 5]]

shift: shift[i] specifies the number of places by which elements are shifted
along the dimension specified by axis[i]. Negative shifts will roll the
elements in the opposite direction.
axis: axis[i] specifies the dimension that the shift shift[i] should occur.
if the same axis is referenced more than once, the total shift for that axis
will be the sum of all the shifts that belong to that axis.
output: Has the same shape and size as the input. The elements are shifted by
the offsets of shift along the dimensions of axis.
Unit tests:
[==========] Running 24 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 24 tests from RollOpTest
[ RUN      ] RollOpTest.ScalarIndices
[       OK ] RollOpTest.ScalarIndices (5 ms)
[ RUN      ] RollOpTest.ScalarIndices_NoMemcpy
[       OK ] RollOpTest.ScalarIndices_NoMemcpy (0 ms)
[ RUN      ] RollOpTest.ScalarIndices_Complex
[       OK ] RollOpTest.ScalarIndices_Complex (0 ms)
[ RUN      ] RollOpTest.Simple_TwoD32
[       OK ] RollOpTest.Simple_TwoD32 (0 ms)
[ RUN      ] RollOpTest.Simple_TwoD32_NoMemcpy
[       OK ] RollOpTest.Simple_TwoD32_NoMemcpy (0 ms)
[ RUN      ] RollOpTest.Simple_ThreeD32
[       OK ] RollOpTest.Simple_ThreeD32 (1 ms)
[ RUN      ] RollOpTest.Simple_ThreeD32_NoMemcpy
[       OK ] RollOpTest.Simple_ThreeD32_NoMemcpy (0 ms)
[ RUN      ] RollOpTest.Simple_TwoD64
[       OK ] RollOpTest.Simple_TwoD64 (0 ms)
[ RUN      ] RollOpTest.Simple_TwoD64_NoMemcpy
[       OK ] RollOpTest.Simple_TwoD64_NoMemcpy (0 ms)
[ RUN      ] RollOpTest.Simple_ThreeD64
[       OK ] RollOpTest.Simple_ThreeD64 (0 ms)
[ RUN      ] RollOpTest.Simple_ThreeD64_NoMemcpy
[       OK ] RollOpTest.Simple_ThreeD64_NoMemcpy (0 ms)
[ RUN      ] RollOpTest.ZeroShift_ThreeD32
[       OK ] RollOpTest.ZeroShift_ThreeD32 (0 ms)
[ RUN      ] RollOpTest.ZeroShift_ThreeD32_NoMemcpy
[       OK ] RollOpTest.ZeroShift_ThreeD32_NoMemcpy (0 ms)
[ RUN      ] RollOpTest.ZeroSize_ThreeD32
[       OK ] RollOpTest.ZeroSize_ThreeD32 (0 ms)
[ RUN      ] RollOpTest.ZeroSize_ThreeD32_NoMemcpy
[       OK ] RollOpTest.ZeroSize_ThreeD32_NoMemcpy (0 ms)
[ RUN      ] RollOpTest.OneSize_ThreeD32
[       OK ] RollOpTest.OneSize_ThreeD32 (1 ms)
[ RUN      ] RollOpTest.OneSize_ThreeD32_NoMemcpy
[       OK ] RollOpTest.OneSize_ThreeD32_NoMemcpy (0 ms)
[ RUN      ] RollOpTest.DuplicateShifts_TwoD32
[       OK ] RollOpTest.DuplicateShifts_TwoD32 (0 ms)
[ RUN      ] RollOpTest.DuplicateShifts_TwoD32_NoMemcpy
[       OK ] RollOpTest.DuplicateShifts_TwoD32_NoMemcpy (0 ms)
[ RUN      ] RollOpTest.Error_InputMustBeVectorOrHigher
[       OK ] RollOpTest.Error_InputMustBeVectorOrHigher (0 ms)
[ RUN      ] RollOpTest.Error_AxisMustBeScalarOrVector
[       OK ] RollOpTest.Error_AxisMustBeScalarOrVector (0 ms)
[ RUN      ] RollOpTest.Error_ShiftMustBeScalarOrVector
[       OK ] RollOpTest.Error_ShiftMustBeScalarOrVector (0 ms)
[ RUN      ] RollOpTest.Error_ShiftAndAxisMustBeSameSize
[       OK ] RollOpTest.Error_ShiftAndAxisMustBeSameSize (0 ms)
[ RUN      ] RollOpTest.Error_AxisOutOfRange
[       OK ] RollOpTest.Error_AxisOutOfRange (0 ms)
[----------] 24 tests from RollOpTest (7 ms total)

[----------] Global test environment tear-down
[==========] 24 tests from 1 test case ran. (8 ms total)
[  PASSED  ] 24 tests.

//tensorflow/python/kernel_tests:manip_ops_test                          PASSED in 0.9s

Benchmarks:
Running main() from test_main.cc
Benchmark                     Time(ns) Iterations
-------------------------------------------------
BM_cpu_roll_outer/256/256        46739      16065	 5608.7MB/s 1402.2M items/s
BM_cpu_roll_outer/512/512       124247       5135	 8439.5MB/s 2109.9M items/s
BM_cpu_roll_outer/1024/1024     638245       1149	 6571.6MB/s 1642.9M items/s
BM_cpu_roll_outer/2048/2048    5261260        100	 3188.8MB/s 797.2M items/s
BM_cpu_roll_all/256/256         135631       5353	 1932.8MB/s 483.2M items/s
BM_cpu_roll_all/512/512         286927       2263	 3654.5MB/s 913.6M items/s
BM_cpu_roll_all/1024/1024       981417        727	 4273.7MB/s 1068.4M items/s
BM_cpu_roll_all/2048/2048      4549074        149	 3688.1MB/s 922.0M items/s

I had made a pull request for this before but accidentally closed it