Unable to build C++ example by bazel on windows 10

System information

Have I written custom code: No
OS Platform and Distribution: Windows 10 64Bit
TensorFlow installed from: binary
TensorFlow version: master
Python version: 3.6.1
Bazel version (if compiling from source): 0.5.4, binary

in windows powershell:
>>protoc --version
libprotoc 3.4.0
>>bazel version
Build label: 0.5.4
Build target: bazel-out/msvc_x64-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar
Build time: Fri Aug 25 09:59:45 2017 (1503655185)
Build timestamp: 1503655185
Build timestamp as int: 1503655185

Describe the problem
I want to learn tensorflow C++ api and build a example from this page, but I get the following error:
ERROR: E:/projects/deeplearning/tensorflow/tensorflow/cc/example/BUILD:1:1: error loading package 'tensorflow/core': Encountered error while reading extension file 'protobuf.bzl': no such package '@protobuf_archive//': Traceback (most recent call last):
        File "E:/projects/deeplearning/tensorflow/tensorflow/workspace.bzl", line 122
                _apply_patch(repo_ctx, repo_ctx.attr.patch_file)
        File "E:/projects/deeplearning/tensorflow/tensorflow/workspace.bzl", line 103, in _apply_patch
                fail("patch command is not found, ple...")
patch command is not found, please install it and referenced by '//tensorflow/cc/example:example'.
ERROR: Analysis of target '//tensorflow/cc/example:example' failed; build aborted.
INFO: Elapsed time: 13.336s
ERROR: Build failed. Not running target.

I have already run pacman -Syuu --noconfirm patch in msys2.exe.
bazel works well in simple c++ example.
Source code / logs
in C:/msys64/usr/bin/bash.exe:
$ patch --version
GNU patch 2.7.5
Copyright (C) 2003, 2009-2012 Free Software Foundation, Inc.
Copyright (C) 1988 Larry Wall

License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Larry Wall and Paul Eggert

in windows powershell:
PS E:\Projects\deeplearning\tensorflow> python configure.py
You have bazel 0.5.4 installed.
Please specify the location of python. [Default is C:\Users\yanyan\Anaconda3\python.exe]:


Found possible Python library paths:
  C:\Users\yanyan\Anaconda3\lib\site-packages
Please input the desired Python library path to use.  Default is [C:\Users\yanyan\Anaconda3\lib\site-packages]

Do you wish to build TensorFlow with XLA JIT support? [y/N]: y
XLA JIT support will be enabled for TensorFlow.

Do you wish to build TensorFlow with GDR support? [y/N]: y
GDR support will be enabled for TensorFlow.

Do you wish to build TensorFlow with VERBS support? [y/N]: y
VERBS support will be enabled for TensorFlow.

Do you wish to build TensorFlow with CUDA support? [y/N]: y
CUDA support will be enabled for TensorFlow.

Please specify the CUDA SDK version you want to use, e.g. 7.0. [Leave empty to default to CUDA 8.0]:


Please specify the location where CUDA 8.0 toolkit is installed. Refer to README.md for more details. [Default is C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0]:


Please specify the cuDNN version you want to use. [Leave empty to default to cuDNN 6.0]:


Please specify the location where cuDNN 6 library is installed. Refer to README.md for more details. [Default is C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0]:


Please specify a list of comma-separated Cuda compute capabilities you want to build with.
You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.
Please note that each additional compute capability significantly increases your build time and binary size. [Default is: 3.5,5.2]


Do you wish to build TensorFlow with MPI support? [y/N]: n
No MPI support will be enabled for TensorFlow.

Please specify optimization flags to use during compilation when bazel option "--config=opt" is specified [Default is -march=native]:


Add "--config=mkl" to your bazel command to build with MKL support.
Please note that MKL on MacOS or windows is still not supported.
If you would like to use a local MKL instead of downloading, please set the environment variable "TF_MKL_ROOT" every time before build.


PS E:\Projects\deeplearning\tensorflow> bazel run -c opt //tensorflow/cc/example:example
ERROR: E:/projects/deeplearning/tensorflow/tensorflow/cc/example/BUILD:1:1: error loading package 'tensorflow/core': Encountered error while reading extension file 'protobuf.bzl': no such package '@protobuf_archive//': Traceback (most recent call last):
        File "E:/projects/deeplearning/tensorflow/tensorflow/workspace.bzl", line 122
                _apply_patch(repo_ctx, repo_ctx.attr.patch_file)
        File "E:/projects/deeplearning/tensorflow/tensorflow/workspace.bzl", line 103, in _apply_patch
                fail("patch command is not found, ple...")
patch command is not found, please install it and referenced by '//tensorflow/cc/example:example'.
ERROR: Analysis of target '//tensorflow/cc/example:example' failed; build aborted.
INFO: Elapsed time: 15.968s
ERROR: Build failed. Not running target.