Improving tf.cond

Currently tf.cond requires a function for each branch, which makes no difference semantically but serves as an optimization hint. Such requirement becomes quite inconvenient in some cases, for example,
def build_graph(p1, p2):
    a = a_fn() # Redundant when p1 and p2 are both false.
    b1 = tf.cond(p1, lambda: a, b1_fn)
    b2 = tf.cond(p2, lambda: a, b2_fn)
    return b1, b2

# An alternative
def build_graph(p1, p2):
    # Redundant computation when p1 and p2 are both true.
    b1 = tf.cond(p1, a_fn, b1_fn)
    b2 = tf.cond(p2, a_fn, b2_fn)
    return b1, b2

Though possible, it is not so straightforward to transform the above graph into an efficient one. In fact, we don't really need the optimization hint. Once target nodes are known, the exact execution condition for each node can be readily calculated. Furthermore, these conditions can be implemented using existing Switch and Merge ops. I have made a prototype to illustrate the idea at #9189.