Segmentation fault after calling tf.contrib.distributions `sample().eval()` several times

I ran the following code and after calling sample().eval() several times (like 15 times), the program will crash.
import tensorflow as tf
mu = [1, 2, 3.]
diag_stdev = [4, 5, 6.]
dist = tf.contrib.distributions.MultivariateNormalDiag(mu, diag_stdev)
sess = tf.InteractiveSession()
dist.sample().eval()
dist.sample().eval()
...
I don't know if this is a bug in memory management, just reporting it. I tried to run this short code several times, and the program all crashed after calling sample() several times.
I am using TensorFlow 1.0.1, ubuntu 14.04, cuDNN 5.1. CUDA 8.0.
I am running the code in ipython
$ ipython
Python 2.7.6 (default, Oct 26 2016, 20:30:19) 
Type "copyright", "credits" or "license" for more information.

IPython 5.1.0 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: import tensorflow as tf
I tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcublas.so.8.0 locally
I tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcudnn.so.5 locally
I tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcufft.so.8.0 locally
I tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcurand.so.8.0 locally

In [2]: tf.__version__
Out[2]: '1.0.1'

In [3]: import tensorflow as tf
   ...: mu = [1, 2, 3.]
   ...: diag_stdev = [4, 5, 6.]
   ...: dist = tf.contrib.distributions.MultivariateNormalDiag(mu, diag_stdev)
   ...: sess = tf.InteractiveSession()
   ...: dist.sample().eval()
   ...: 
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.
I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:910] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
I tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties: 
name: TITAN X (Pascal)
major: 6 minor: 1 memoryClockRate (GHz) 1.531
pciBusID 0000:01:00.0
Total memory: 11.90GiB
Free memory: 11.18GiB
I tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: TITAN X (Pascal), pci bus id: 0000:01:00.0)
Out[3]: array([-3.5554738 , -9.19613838,  0.99159908], dtype=float32)

In [4]: dist.sample().eval()
Out[4]: array([  3.23878694,  10.00256252,  -1.83450556], dtype=float32)

In [5]: dist.sample().eval()
Out[5]: array([-3.07549763,  2.88274646,  1.73206449], dtype=float32)

In [6]: dist.sample().eval()
Out[6]: array([-6.32968855,  5.16116142,  3.4088428 ], dtype=float32)

In [7]: dist.sample().eval()
Out[7]: array([-10.45146465,   8.00740719,  12.19320011], dtype=float32)

In [8]: dist.sample().eval()
Out[8]: array([ 2.50515604, -0.90315008,  8.30728722], dtype=float32)

In [9]: dist.sample().eval()
Out[9]: array([ 1.11648369,  2.883286  ,  5.3753109 ], dtype=float32)

In [10]: dist.sample().eval()
Out[10]: array([ 1.42068732, -1.55020142,  7.90944004], dtype=float32)

In [11]: dist.sample().eval()
Out[11]: array([-2.47698998,  5.00640774,  9.55048275], dtype=float32)

In [12]: dist.sample().eval()
Out[12]: array([-2.72261739,  8.12374115,  6.6374836 ], dtype=float32)

In [13]: dist.sample().eval()
Out[13]: array([-5.90653419,  2.76514864,  1.68261075], dtype=float32)

In [14]: dist.sample().eval()
Segmentation fault (core dumped)