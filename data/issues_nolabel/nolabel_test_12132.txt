slim.separable_conv2d is too slow

System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): custom, yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 14.04
TensorFlow installed from (source or binary): from pip
TensorFlow version (use command below): ('v1.2.0-5-g435cdfc', '1.2.1')
Python version: python2.7
Bazel version (if compiling from source): -
CUDA/cuDNN version: CPU version, no CUDA
GPU model and memory: CPU version, no CUDA
Exact command to reproduce:

Describe the problem
the depthwise+pointwise structure is faster than the traditional convolution layer theoretically, but the implemetation of tensorflow make it slower. it doesn't make sense.
here is part of my network defination:
#net = slim.conv2d(net, 32, [3, 3], scope='conv1-2')
#end_points['conv1-2'] = net
net = slim.separable_conv2d(net,None,[3,3],depth_multiplier=1,stride=1,rate=1,normalizer_fn=slim.batch_norm,scope='conv1-2-depthwise')
end_points['conv1-2-depthwise'] = net
net = slim.conv2d(net, depth(32), [1, 1], stride=1, normalizer_fn=slim.batch_norm, scope='conv1-2-pointwise')
end_points['conv1-2-pointwise'] = net
net = slim.max_pool2d(net, [2, 2], 2, scope='pool1')
end_points['pool1'] = net # 58*58

#net = slim.conv2d(net, 48, [3, 3], padding='VALID', scope='conv2')
#end_points['conv2'] = net
net = slim.separable_conv2d(net,None,[3,3],depth_multiplier=1,stride=1,rate=1,normalizer_fn=slim.batch_norm,scope='conv2-depthwise')
end_points['conv2-depthwise'] = net
net = slim.conv2d(net, depth(48), [1, 1], stride=1, normalizer_fn=slim.batch_norm, scope='conv2-pointwise')
end_points['conv2-pointwise'] = net

net = slim.max_pool2d(net, [2, 2], 2, scope='pool2')
end_points['pool2'] = net # 28*28

i just change the network defination
from:
net = slim.conv2d(net, 32, [3, 3], scope='conv1-2')
end_points['conv1-2'] = net
to:
net = slim.separable_conv2d(net,None,[3,3],depth_multiplier=1,stride=1,
rate=1,normalizer_fn=slim.batch_norm,scope='conv1-2-depthwise')
end_points['conv1-2-depthwise'] = net
net = slim.conv2d(net, depth(32), [1, 1], stride=1, normalizer_fn=slim.batch_norm,
scope='conv1-2-pointwise')
end_points['conv1-2-pointwise'] = net
i do not think i am doing something wrong. so where the problem is?