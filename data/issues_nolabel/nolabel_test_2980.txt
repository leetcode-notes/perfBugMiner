Setting CUDA_VISIBLE_DEVICES="" crashes TensorFlow on Mac

Something changed in the last 3 days so thatÂ setting CUDA_VISIBLE_DEVICES to "" makes TensorFlow crash on Mac with SIGSERV
Exception Type:        EXC_BAD_ACCESS (SIGSEGV)
Exception Codes:       KERN_INVALID_ADDRESS at 0x0000000000000000
Exception Note:        EXC_CORPSE_NOTIFY

VM Regions Near 0:
--> 
    __TEXT                 0000000107d49000-0000000107d4a000 [    4K] r-x/rwx SM=COW  /System/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python

Thread 0 Crashed:: Dispatch queue: com.apple.main-thread
0   libsystem_c.dylib               0x00007fff97ebc152 strlen + 18
1   _pywrap_tensorflow.so           0x000000010c9e7a2c perftools::gputools::cuda::Diagnostician::FindKernelDriverVersion() + 204
2   _pywrap_tensorflow.so           0x000000010c9e7220 perftools::gputools::cuda::Diagnostician::LogDriverVersionInformation() + 512
3   _pywrap_tensorflow.so           0x000000010c9e6f8f perftools::gputools::cuda::Diagnostician::LogDiagnosticInformation() + 671
4   _pywrap_tensorflow.so           0x000000010c9f7d69 perftools::gputools::cuda::CUDADriver::Init() + 569
5   _pywrap_tensorflow.so           0x000000010ca0e56f perftools::gputools::cuda::CudaPlatform::VisibleDeviceCount() const + 15
6   _pywrap_tensorflow.so           0x000000010c79d1f5 tensorflow::GPUMachineManager() + 261
7   _pywrap_tensorflow.so           0x000000010c79ac4e tensorflow::BaseGPUDeviceFactory::GetValidDeviceIds(std::__1::vector<int, std::__1::allocator<int> >*) + 46
8   _pywrap_tensorflow.so           0x000000010c79aa79 tensorflow::BaseGPUDeviceFactory::CreateDevices(tensorflow::SessionOptions const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<tensorflow::Device*, std::__1::allocator<tensorflow::Device*> >*) + 345
9   _pywrap_tensorflow.so           0x000000010c91d1b5 tensorflow::DeviceFactory::AddDevices(tensorflow::SessionOptions const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<tensorflow::Device*, std::__1::allocator<tensorflow::Device*> >*) + 245
10  _pywrap_tensorflow.so           0x000000010b5a7175 _wrap_DeviceFactory_AddDevices(_object*, _object*) + 133
11 

On main window I see following
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.dylib locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.dylib locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.dylib locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcuda.1.dylib locally
I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.dylib locally
E tensorflow/stream_executor/cuda/cuda_driver.cc:491] failed call to cuInit: CUDA_ERROR_NO_DEVICE


I used to be able to do this, also, if I run NVidia's deviceQuery that comes with CUDA drivers, it fails without a SIGSERV
cd /usr/local/cuda/samples
sudo make -C 1_Utilities/deviceQuery
./bin/x86_64/darwin/release/deviceQuery

./bin/x86_64/darwin/release/deviceQuery Starting...
 CUDA Device Query (Runtime API) version (CUDART static linking)

cudaGetDeviceCount returned 38
-> no CUDA-capable device is detected
Result = FAIL