ImportError: No module named 'tensorflow.contrib.ios_examples.benchmark.benchmark.xcodeproj'

I am trying to create exe file for python application built on tkinter(8.6), python(3.6), keras(0.14), tensorflow(1.5),  cx_Freeze(5.1). All the package installs  were done through pip.
Windows 7-64 bit
I'm using command:- python setup.py build
Below is my setup.py file:-
import cx_Freeze
import sys
import matplotlib
import os
import pandas
import tkinter.filedialog
import keras
import sklearn
import numpy
import tensorflow
import openpyxl
import datetime
base = None
os.environ['TCL_LIBRARY'] = r'C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\tcl\tcl8.6'
os.environ['TK_LIBRARY'] = r'C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\tcl\tk8.6'
if sys.platform == 'win32':
base = "Win32GUI"
from glob import glob
#data_files = [("Microsoft.VC120.CRT", glob(r'C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\redist\x64\Microsoft.VC120.CRT*.*'))]
executables = [cx_Freeze.Executable("app-3.py",base=base)]
cx_Freeze.setup(
name = "foreacast",
#options = {"build_exe": {"packages":["tkinter","matplotlib"],"include_files":["numpy"]}}
options = { "build_exe": {"packages":["cx_Freeze","datetime","openpyxl","tkinter","numpy","matplotlib","pandas","tkinter.filedialog","keras","sklearn","tensorflow"] }},
version = "0.1",
description = "test",
#data_files=data_files,
executables = executables)
Below is input file- app-3.py
#from tkinter import Tk, Label, Button, Frame
import tkinter as tk
from tkinter.filedialog import askopenfilename
import os
import tkinter.messagebox
import numpy as np
import xlrd
import datetime
import matplotlib.pyplot as plt
import pandas as pd
import keras
from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense
from keras.layers import Dropout
from keras import optimizers
from sklearn.preprocessing import MinMaxScaler
from numpy.random import seed
import tensorflow as tf
from tensorflow import set_random_seed
from openpyxl import load_workbook
Here, we are creating our class, Window, and inheriting from the Frame
class. Frame is a class from the tkinter module. (see Lib/tkinter/init)
class Window(tk.Frame):
# Define settings upon initialization. Here you can specify
def __init__(self, master=None):
    
    # parameters that you want to send through the Frame class. 
    tk.Frame.__init__(self, master,background="#66b3ff")   

    #reference to the master widget, which is the tk window                 
    self.master = master

    #with that, we want to then run init_window, which doesn't yet exist
    self.init_window()

    self.master.minsize(width=1400, height=900)
    self.master.maxsize(width=1400, height=900)
    self.master.configure(background="#8cb3d9")
#Creation of init_window
def close_window():
    root.destroy()
    
def init_window(self):

    # changing the title of our master widget      
    self.master.title("Call Volume Forecasting")

    tk.Label(root, text="Call Volume Forecasting",font = "Helvetica 28 bold italic",bg = "#3333ff",fg = "white",width=20).grid(row=0,column=0,columnspan=4,padx=400, pady=20,sticky=tk.W)
    
    self.CheckAdvisor=tk.IntVar()
    self.CheckShareholder=tk.IntVar()
    self.CheckRetirement=tk.IntVar()
    self.CheckFast=tk.IntVar()
    self.CheckVIP=tk.IntVar()
    self.CheckCGF=tk.IntVar()
    self.CheckWT=tk.IntVar()
    self.CheckIOBRP=tk.IntVar()
    self.CheckFT=tk.IntVar()
    self.CheckNJBEST=tk.IntVar()
    self.CheckSelectAll=tk.IntVar()
    self.CheckType = tk.IntVar()
    self.input_file = ""
    
    tk.Button(root,text="Choose Input File",command=self.choose_input_file,font = "Helvetica 18 bold italic",bg = "#3333ff",fg = "white",width=15,height=1).grid(row=1, column = 0,columnspan=2, padx=200,pady=30,sticky=tk.W)
              
    self.input_file = tk.Text(root,width=80,height=2)
    self.input_file.grid(row=1, column=1,columnspan=3,padx=50,pady=20, sticky=tk.W)
    
    self.advisorstate = tk.Checkbutton(root, text="Advisor",  variable= self.CheckAdvisor,font = "Helvetica 18 bold italic",bg = "light grey",fg = "black",width=10,anchor=tk.W)
    self.advisorstate.grid(row=2, column = 0, padx=100, pady=30,sticky=tk.W)
    
    self.shareholderstate = tk.Checkbutton(root, text="Shareholder",variable= self.CheckShareholder, font = "Helvetica 18 bold italic",bg = "light grey",fg = "black",width=10,anchor=tk.W)
    self.shareholderstate.grid(row=3, column = 0, padx=100, pady=30,sticky=tk.W)
    
    self.retirementstate= tk.Checkbutton(root, text="Retirement",variable= self.CheckRetirement,font = "Helvetica 18 bold italic",bg = "light grey",fg = "black",width=10,anchor=tk.W)
    self.retirementstate.grid(row=4, column = 0, padx=100, pady=30,sticky=tk.W)
    
    self.faststate = tk.Checkbutton(root, text="Fast",variable=self.CheckFast,font = "Helvetica 18 bold italic",bg = "light grey",fg = "black",width=10,anchor=tk.W)
    self.faststate.grid(row=5, column = 0, padx=100, pady=30,sticky=tk.W)
    
    self.vipstate = tk.Checkbutton(root, text="VIP",variable=self.CheckVIP,font = "Helvetica 18 bold italic",bg = "light grey",fg = "black",width=10,anchor=tk.W)
    self.vipstate.grid(row=6, column = 0, padx=100, pady=30,sticky=tk.W)
    
    self.cgf = tk.Checkbutton(root, text="CGF",variable=self.CheckCGF,font = "Helvetica 18 bold italic",bg = "light grey",fg = "black",width=10,anchor=tk.W)
    self.cgf.grid(row=2, column = 1, padx=10, pady=30,sticky=tk.W)
    
    self.wt = tk.Checkbutton(root, text="WT",variable=self.CheckWT,font = "Helvetica 18 bold italic",bg = "light grey",fg = "black",width=10,anchor=tk.W)
    self.wt.grid(row=3, column = 1, padx=10, pady=30,sticky=tk.W)
    
    self.iobrp = tk.Checkbutton(root, text="IOBRP",variable=self.CheckIOBRP,font = "Helvetica 18 bold italic",bg = "light grey",fg = "black",width=10,anchor=tk.W)
    self.iobrp.grid(row=4, column = 1, padx=10, pady=30,sticky=tk.W)
    
    self.ft = tk.Checkbutton(root, text="FT 529",variable=self.CheckFT,font = "Helvetica 18 bold italic",bg = "light grey",fg = "black",width=10,anchor=tk.W)
    self.ft.grid(row=5, column = 1, padx=10, pady=30,sticky=tk.W)
    
    self.njbest = tk.Checkbutton(root, text="NJBEST",variable=self.CheckNJBEST,font = "Helvetica 18 bold italic",bg = "light grey",fg = "black",width=10,anchor=tk.W)
    self.njbest.grid(row=6, column = 1, padx=10, pady=30,sticky=tk.W)
    
    self.selectall = tk.Checkbutton(root, text="Select all skills",variable=self.CheckSelectAll,command=self.cb_check,font = "Helvetica 18 bold italic",bg = "light grey",fg = "black")
    self.selectall.grid(row=4, column = 2,padx=10,pady=30,sticky=tk.W)
    
    self.daily = tk.Radiobutton(root, text="Daily",variable=self.CheckType,value=1,font = "Helvetica 18 bold italic",width=10,bg="light grey",anchor=tk.W)
    self.daily.grid(row=3, column = 3, pady=30,sticky=tk.W)
    
    self.monthly = tk.Radiobutton(root, text="Monthly",variable=self.CheckType,value=2,font = "Helvetica 18 bold italic",width=10,bg="light grey",anchor=tk.W)
    self.monthly.grid(row=4, column = 3, pady=30,sticky=tk.W)
    
    self.both = tk.Radiobutton(root, text="Both",variable=self.CheckType,value=3,font = "Helvetica 18 bold italic",width=10,bg="light grey",anchor=tk.W)
    self.both.grid(row=5, column = 3, pady=30,sticky=tk.W)
    
    tk.Button(root, text="Build",font = "Helvetica 18 bold italic",bg = "#3333ff",fg = "white",width=10,height=1,command=self.build_models).grid(row=7, column = 0, padx=100,pady=30,sticky=tk.W)
    tk.Button(root, text="Forecast",font = "Helvetica 18 bold italic",bg = "#3333ff",fg = "white",width=10,height=1,command=self.forecast_models).grid(row=7, column = 1, padx=50,pady=30,sticky=tk.W)
    tk.Button(root, text="Clear",font = "Helvetica 18 bold italic",bg = "#3333ff",fg = "white",width=10,height=1,command = self.clear).grid(row=7, column = 2, padx=50,pady=30,sticky=tk.W)
    tk.Button(root, text="Exit",font = "Helvetica 18 bold italic",bg = "#3333ff",fg = "white",width=10,height=1,command = self.close).grid(row=7, column = 3, padx=50,pady=30,sticky=tk.W)         

def cb_check(self):
    if self.CheckSelectAll.get():
        self.advisorstate.config(state=tk.DISABLED)
        self.CheckAdvisor.set(0)
        self.shareholderstate.config(state=tk.DISABLED)
        self.CheckShareholder.set(0)
        self.retirementstate.config(state=tk.DISABLED)
        self.CheckRetirement.set(0)
        self.faststate.config(state=tk.DISABLED)
        self.CheckFast.set(0)
        self.vipstate.config(state=tk.DISABLED)
        self.CheckVIP.set(0)
        self.cgf.config(state=tk.DISABLED)
        self.CheckCGF.set(0)
        self.wt.config(state=tk.DISABLED)
        self.CheckWT.set(0)
        self.iobrp.config(state=tk.DISABLED)
        self.CheckIOBRP.set(0)
        self.ft.config(state=tk.DISABLED)
        self.CheckFT.set(0)
        self.njbest.config(state=tk.DISABLED)
        self.CheckNJBEST.set(0)
    else:
        self.advisorstate.config(state=tk.NORMAL)
        self.shareholderstate.config(state=tk.NORMAL)
        self.retirementstate.config(state=tk.NORMAL)
        self.faststate.config(state=tk.NORMAL)
        self.vipstate.config(state=tk.NORMAL)
        self.cgf.config(state=tk.NORMAL)
        self.wt.config(state=tk.NORMAL)
        self.iobrp.config(state=tk.NORMAL)
        self.ft.config(state=tk.NORMAL)
        self.njbest.config(state=tk.NORMAL)

def close(self):
    root.destroy()
    
def clear(self):
    #print("in claer")
    self.CheckAdvisor.set(0)
    self.CheckShareholder.set(0)
    self.CheckRetirement.set(0)
    self.CheckFast.set(0)
    self.CheckVIP.set(0)
    self.CheckCGF.set(0)
    self.CheckWT.set(0)
    self.CheckIOBRP.set(0)
    self.CheckFT.set(0)
    self.CheckNJBEST.set(0)
    self.CheckSelectAll.set(0)
    self.CheckType.set(0)
    self.input_file.delete('1.0', tk.END)
    self.advisorstate.config(state=tk.NORMAL)
    self.shareholderstate.config(state=tk.NORMAL)
    self.retirementstate.config(state=tk.NORMAL)
    self.faststate.config(state=tk.NORMAL)
    self.vipstate.config(state=tk.NORMAL)
    self.cgf.config(state=tk.NORMAL)
    self.wt.config(state=tk.NORMAL)
    self.iobrp.config(state=tk.NORMAL)
    self.ft.config(state=tk.NORMAL)
    self.njbest.config(state=tk.NORMAL)
    self.input_file.config(state=tk.NORMAL)

def choose_input_file(self):
    self.filename = askopenfilename()
    if os.path.isfile(self.filename):
        self.input_file.configure(state=tk.NORMAL)
        self.input_file.insert(tk.INSERT,self.filename)
        self.input_file.configure(state=tk.DISABLED)
        fname = self.input_file.get("1.0", "end-1c")
        workbook = xlrd.open_workbook(fname,"w")
        
        #print(self.input_file)
    else: 
        print("No file chosen")
        tkinter.messagebox.showinfo(title="", message="Please select input file")
 
def validation(self):
    if len(self.input_file.get("1.0", "end-1c")) == 0:
        tkinter.messagebox.showinfo(title="", message="Please select input file")
    else:
        print("file selected")
        self.validate_chbox()
        
        
def validate_chbox(self):
    if self.CheckAdvisor.get() == 0 and self.CheckShareholder.get() == 0 and self.CheckRetirement.get() == 0 and self.CheckFast.get() == 0 and self.CheckVIP.get() == 0 and self.CheckCGF.get() == 0 and self.CheckWT.get() == 0 and self.CheckIOBRP.get() == 0 and self.CheckFT.get() == 0 and self.CheckNJBEST.get() == 0 and self.CheckSelectAll.get() == 0:
        tkinter.messagebox.showinfo(title="", message="Please select the skill")
    else:
        self.validate_radiobtn()
        
def validate_radiobtn(self):
    if self.CheckType.get() == 0:
        tkinter.messagebox.showinfo(title="", message="Please select the forecast type")

def build_models(self):
    self.validation()
    self.build()

def build(self):
    if self.CheckSelectAll.get() == 1:
        self.buildAllModels()
    else:
        self.build_advisor_selected()

def buildAllModels(self):
    print("in buildAllModels")

def forecast_models(self):
    self.validation()
    self.forecast()
    
def forecast(self):
    if self.CheckSelectAll.get() == 1:
        self.forecastAllModels()
    else:
        self.forecast_advisor_selected() 
        
def build_advisor_selected(self):
    if self.CheckAdvisor.get() == 1:
        if self.CheckType.get() == 1:
            print("daily")
            self.build_advisor_daily()
        elif self.CheckType.get() == 2:
            print("monthly")
            self.advisor_monthly()
        else:
            print("both")
            self.advisor_both()

def forecast_advisor_selected(self):
    if self.CheckAdvisor.get() == 1:
        if self.CheckType.get() == 1:
            print("daily")
            self.forecast_advisor_daily()
        elif self.CheckType.get() == 2:
            print("monthly")
            self.forecast_advisor_monthly()
        else:
            print("both")
            self.forecast_advisor_both()

def build_advisor_daily(self):
    required_data = self.read_advisor_daily()
    print(required_data)
    #global advisor_build 
    #if global advisor_build ==0:
    self.build_advisor_daily_model(required_data)
    #else:
        #print("advisor model already built.Please forecast")
        
def read_advisor_daily(self):
    fname = self.input_file.get("1.0", "end-1c")
    workbook = xlrd.open_workbook(fname,"w")
    #sheets = workbook.sheet_names()
    date_col = []
    required_data = []
    sh = workbook.sheet_by_name("Daily_Data")
    for rownum in range(1,sh.nrows):
        row_valaues = sh.row_values(rownum)
        date_col.append(datetime.datetime(*xlrd.xldate_as_tuple(row_valaues[0],workbook.datemode)))
        required_data.append(row_valaues[1])

    required_data = pd.DataFrame(required_data)
    required_data.replace('', np.nan, inplace=True)
    required_data.dropna(inplace=True)
    return required_data


def build_advisor_daily_model(self,required_data):
    print("in build_advisor_daily_model")
    self.destroy()
    print(required_data)
    np.random.seed(12345) 
    tf.set_random_seed(12345)
    tkinter.messagebox.showinfo(title="", message="Advisor model building started")
    print(type(required_data))
    data_set = required_data
    tkinter.messagebox.showinfo(title="", message="data set read")
    model_data_set = data_set.iloc[:,:]
    model_data_set = model_data_set[model_data_set[0]>0]
    print(len(model_data_set))
    a1=len(model_data_set)
    print(type(model_data_set))
    tkinter.messagebox.showinfo(title="", message=a1)
    modified_data = model_data_set
    modified_data = modified_data.values.reshape(-1,1)
    print(modified_data.shape)
    print(modified_data)
     
    global sc 
    sc = MinMaxScaler(feature_range=(0,1))
    train = sc.fit_transform(modified_data)
    print(train[0:5,:])
    print(train.shape)
    print(train.shape[0])
    print(train.shape[1])
    
    global y_train
    X_train = []
    y_train = []
    l = len(modified_data)
    print(l)
    for i in range(60,l):
        X_train.append(train[i-60:i,:])
        y_train.append(train[i,:])
    print(len(X_train))
    print(len(y_train))
    X_train = np.array(X_train)
    y_train = np.array(y_train)
    print(X_train.shape)
    #print(X_train)
    print(y_train.shape)
    #X_train = X_train.reshape(X_train.shape[1],1)
    print(X_train.shape[0])
    tkinter.messagebox.showinfo(title="", message="train data built")
    #total 60 columns, lag=20
    global regressor
    regressor = Sequential()
    regressor.add(LSTM(units=60,return_sequences=True,input_shape=(X_train.shape[1],1)))
    regressor.add(Dropout(0.2))
    regressor.add(LSTM(units=60,return_sequences=True))
    regressor.add(Dropout(0.2))
    regressor.add(LSTM(units=60,return_sequences=True))
    regressor.add(Dropout(0.2))
    #regressor.add(LSTM(units=60,return_sequences=True))
    #regressor.add(Dropout(0.2))
    #regressor.add(LSTM(units=50,return_sequences=True))
    #regressor.add(Dropout(0.2))
    regressor.add(LSTM(units=60))
    regressor.add(Dropout(0.2))
    regressor.add(Dense(units=1))
    #rmsprop = keras.optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=0.001, decay=0.001)
    tkinter.messagebox.showinfo(title="", message="compiling model")
    regressor.compile(optimizer='adam',loss='mean_squared_error',metrics=['accuracy'])
    tkinter.messagebox.showinfo(title="", message="model compilation complete")
    regressor.fit(X_train,y_train,epochs=300,batch_size=32,shuffle=False)
    global advisor_build
    advisor_build = 1
    print(y_train)
    tkinter.messagebox.showinfo(title="", message="Advisor model building completed")
    #return (self.regressor,advisor_build,y_train)

def forecast_advisor_daily(self):
    print("in forecast")
    global advisor_build
    print(advisor_build)
    global y_train
    global sc
    global regressor
    #advisor_build = 1
    if advisor_build == 1:
        y_test = y_train
        print(y_test)
        print(len(y_test))
        X_test_1 = []
        prediciton_list = []
        y_test = y_test.reshape(-1,1)
        print(y_test.shape)

        y_test = sc.transform(y_test)

        X_test_1.append(y_test[-60:])
        print(X_test_1)
        X_test_1 = np.array(X_test_1)
        print(X_test_1[0:5])
        print(X_test_1.shape)
        for x in range(20):

            y_pred_1 = regressor.predict(X_test_1)

            a = sc.inverse_transform(y_pred_1)
            b = a[0][0]
            X_test_1 = np.delete(X_test_1,0,axis=1)

            a = y_pred_1[0][0]

            X_test_1 = np.concatenate((X_test_1,np.zeros((1,1,1))),axis=1)
            X_test_1 = np.insert(X_test_1,59,a,axis=1)
            X_test_1 = np.delete(X_test_1,60,axis=1) 

            prediciton_list.append(b)

        print(prediciton_list)
        fname = self.input_file.get("1.0", "end-1c")
        workbook = xlrd.open_workbook(fname,"w")
        date_col = []
        required_data = []
        sh = workbook.sheet_by_name("Daily_Data")
        for rownum in range(1,sh.nrows):
            row_valaues = sh.row_values(rownum)
            date_col.append(datetime.datetime(*xlrd.xldate_as_tuple(row_valaues[0],workbook.datemode)))
            required_data.append(row_valaues[1])
        required_data = pd.DataFrame(required_data)
        print(required_data)
        len1 = len(required_data)
        required_data.replace('', np.nan, inplace=True)
        z = required_data.last_valid_index()
        print(z)
        print(type(z))
        ind = z
        ind = ind + 1
        y = required_data.loc[required_data.last_valid_index()]
        print(y)
        required_data.dropna(inplace=True)
        print(required_data)
        date_col = pd.DataFrame(date_col)
        print(date_col)
        end_date = date_col.iloc[z][0]
        
        z =  z + 2
        y = z
        print(z)
        start_date = date_col.iloc[z][0]

        print(start_date.date())


        df2 = pd.DataFrame(prediciton_list)
        print(df2)
        df3 = []
        for i in range(ind,ind+20):
            df3.append(date_col.iloc[i][0])

        df3 = pd.DataFrame(df3,columns = ["Date"])
        print(df3)
  

        k = df3.loc[df3['Date'].isin(['2018-01-01','2018-01-15','2018-02-19','2018-03-30','2018-05-28','2018-07-04','2018-09-03','2018-11-23','2018-12-25'])]
        print(k)
        print(type(k))
        print(len(k))
        index_list = []
     
        if len(k) >= 1:
            for z in range(len(k)):
                index_list.append(k.index[z])
                print(index_list)
     
            for l in range(len(index_list)):
                m = index_list[l]
                df2.xs(m)[0] = 0
        else:
            print("no holidays")
        print(df2)
        book = load_workbook(fname)
        writer = pd.ExcelWriter(fname, engine='openpyxl') 
        writer.book = book
        writer.sheets = dict((ws.title, ws) for ws in book.worksheets)
        print(y)
        df2.to_excel(writer, "Daily_Output", startcol=1,startrow=y,header=None,index=False)
        
        writer.save()
        tkinter.messagebox.showinfo(title="", message="Advisor forecasting completed")
        
    else:
        tkinter.messagebox.showinfo(title="", message="please build  first and then forecast")
def destroy(self):
    global advisor_build
    global regressor
    regressor = None
    global y_train
    y_train = None
    global sc
    sc = None
    advisor_build = 0

=============================================================================
def mean_absolute_percentage_error(y_true, y_pred):
perc = [0 if x ==0 else np.abs((x-y)/x) for x,y in zip(y_true,y_pred)]
return np.mean(perc[1]) * 100
=============================================================================
root = tk.Tk()
#creation of an instance
#holiday_list = ['2018-01-01','2018-01-15','2018-02-19','2018-03-30','2018-05-28','2018-07-04','2018-09-03','2018-11-23','2018-12-25']
global advisor_build
global regressor
global y_train
global sc
app = Window(root)
#mainloop
root.mainloop()
Below is the error -
C:\Users\bpachkor\AppData\Local\Programs\Python\Python36>python setup.py build
Using TensorFlow backend.
running build
running build_exe
Traceback (most recent call last):
File "setup.py", line 38, in 
executables = executables)
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\site-packag
es\cx_Freeze\dist.py", line 349, in setup
distutils.core.setup(**attrs)
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\distutils\c
ore.py", line 148, in setup
dist.run_commands()
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\distutils\d
ist.py", line 955, in run_commands
self.run_command(cmd)
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\distutils\d
ist.py", line 974, in run_command
cmd_obj.run()
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\distutils\c
ommand\build.py", line 135, in run
self.run_command(cmd_name)
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\distutils\c
md.py", line 313, in run_command
self.distribution.run_command(command)
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\distutils\d
ist.py", line 974, in run_command
cmd_obj.run()
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\site-packag
es\cx_Freeze\dist.py", line 219, in run
freezer.Freeze()
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\site-packag
es\cx_Freeze\freezer.py", line 616, in Freeze
self.finder = self._GetModuleFinder()
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\site-packag
es\cx_Freeze\freezer.py", line 342, in _GetModuleFinder
finder.IncludePackage(name)
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\site-packag
es\cx_Freeze\finder.py", line 661, in IncludePackage
self._ImportAllSubModules(module, deferredImports)
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\site-packag
es\cx_Freeze\finder.py", line 288, in _ImportAllSubModules
recursive)
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\site-packag
es\cx_Freeze\finder.py", line 288, in _ImportAllSubModules
recursive)
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\site-packag
es\cx_Freeze\finder.py", line 288, in _ImportAllSubModules
recursive)
File "C:\Users\bpachkor\AppData\Local\Programs\Python\Python36\lib\site-packag
es\cx_Freeze\finder.py", line 283, in _ImportAllSubModules
raise ImportError("No module named %r" % subModuleName)
ImportError: No module named 'tensorflow.contrib.ios_examples.benchmark.benchmar
k.xcodeproj'
I have tried doing same steps for python 3.5, but with no luck.