How can a tensor remain in gpu when the kernel is launched but does not finish yet?

It confuse me a lot. I'm reading the stream executor part of tensorflow's source code. I find that once a graph is executed on a gpu device, each kernel of the graph's nodes just allocates the output memory and launches the cuda kernel on gpu on a stream by passing the input and output device memory. So the op kernel is done but the real execution of the kernel (e.g. cuda) may not be done on the gpu yet. Here is the question: how can tensorflow assure the input memory allocated on the gpu devices still live when the execution really happens on the gpu? I checked the executor.cc file and found that once a kernel is launched, the input tensor is destroyed. Can anyone show me what I miss? Thanks!