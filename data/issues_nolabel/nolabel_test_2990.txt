inconsistent variable initialization behavior for callables / ops

When a variable is initialized with a callable, running the initializer of the variable has no effect after it is run once:
import tensorflow as tf
import scipy

session = tf.InteractiveSession()
retrand = lambda: scipy.random.random(size=[2,2])
var = tf.Variable(retrand, dtype=tf.float32)
session.run(var.initializer)
var.eval()
# prints array([[ 0.73060566,  0.26469722],
#               [ 0.63376802,  0.64898247]], dtype=float32)
session.run(var.initializer)
var.eval()
# prints array([[ 0.73060566,  0.26469722],
#              [ 0.63376802,  0.64898247]], dtype=float32)
# (same as first call)
If a variable is initialized with a tensorflow init op, then rerunning the initializer changes the variable state:
var = tf.Variable(tf.random_normal([2,2]))
session.run(var.initializer)
var.eval()
#prints 
#array([[ 0.61732173,  0.14423341],
#       [ 0.3965871 , -0.98214936]], dtype=float32)
session.run(var.initializer)
var.eval()
# prints 
# array([[ 0.48240849,  0.26547143],
#      [ 1.18776596, -0.12901327]], dtype=float32)
Why do variables initialized with a callable only call the callable once, even if they are initialized repeatedly, when variables initialized with an init op rerun the op on each run of the initializer? Is there any way to have a variable initialized with a callable call it each time the variable's initializer is run?
Environment info
Operating System:  Mac OSX
(please attach the output of ls -l /path/to/cuda/lib/libcud*): None
If installed from binary pip package, provide:

Which pip package you installed.
https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0rc0-py2-none-any.whl
The output from python -c "import tensorflow; print(tensorflow.__version__)".
0.9.0rc0