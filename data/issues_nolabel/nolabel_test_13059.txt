Clarifying relations of high level APIs

There are right now several high level APIs in TensorFlow (tf.keras, tf.estimators, tf.layers, tf.contrib.learn) that seem to be sometimes complementary and sometimes redundant. It is somewhat hard for me (and other parts of the internet I have searched) to understand which API to use for which purpose and how they relate to each other.
For me it would greatly help if it could be specified:

What is the intended high level API for the future? Even so if none of them will be discontinued, it would be nice one could just get pointed to one preferred. All I could find the documentation right now is:
"The higher level APIs are built on top of TensorFlow Core. These higher level APIs are typically easier to learn and use than TensorFlow Core. In addition, the higher level APIs make repetitive tasks easier and more consistent between different users. A high-level API like tf.estimator helps you manage data sets, estimators, training and inference."
How different modules from contrib relate to those in core tensorflow. E. g. it seems that tf.estimators is a portion of tf.contrib.learn that made it into core.
Why there are duplicate implementations like tf.layers.contrib.conv2d and tf.layers.conv2d?
If modules have complementary or duplicate functionality. E.g. tf.layers can be used with tf.estimators to define the model, but probably one does not want to mix tf.layers and tf.keras .

It would be great if that could be specified in the Overview section of the respective documentations, instead of just saying it is a high level API