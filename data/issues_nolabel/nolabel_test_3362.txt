Using a batchsize greater than 1 when using C++ API

I have a Tensorflow model trained in Python and frozen with the freeze_graph script. I've succesfully loaded the model in C++ and made inference for a single image. However, whenever I attempt to feed the model a batch of images in C++ I get the error:
tensorflow/core/framework/tensor.cc:433] Check failed: 1 == NumElements() (1 vs. 16)Must have a one element tensor
If I print the frozen graph def, the input placeholder seems to have the correct shape for batch inference:
node {
  name: "inputs"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 50
        }
        dim {
          size: 50
        }
        dim {
          size: 3
        }
      }
    }
  }
}

I'm using the LoadGraph function from the Tensorflow label_image C++ example, and I can't see anything in that function that should limit me to one image at a time.
Is this a limitation of the C++ API or am I doing something wrong?
Environment info
Operating System: Ubuntu 14.04
Installed version of CUDA and cuDNN: 7.5, 5.0.5
(please attach the output of ls -l /path/to/cuda/lib/libcud*):
-rw-r--r-- 1 root root   322936 Aug 15  2015 /usr/local/cuda/lib64/libcudadevrt.a
lrwxrwxrwx 1 root root       16 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.7.5
lrwxrwxrwx 1 root root       19 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5 -> libcudart.so.7.5.18
-rwxr-xr-x 1 root root   383336 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5.18
-rw-r--r-- 1 root root   720192 Aug 15  2015 /usr/local/cuda/lib64/libcudart_static.a
-rwxr-xr-x 1 root root 59909104 Jul 14 11:54 /usr/local/cuda/lib64/libcudnn.so
-rwxr-xr-x 1 root root 59909104 Jul 14 11:54 /usr/local/cuda/lib64/libcudnn.so.5
-rwxr-xr-x 1 root root 59909104 Jul 14 11:54 /usr/local/cuda/lib64/libcudnn.so.5.0.5
-rw-r--r-- 1 root root 58775484 Jul 14 11:54 /usr/local/cuda/lib64/libcudnn_static.a

If installed from sources, provide the commit hash: 115f518 (r0.9)
Steps to reproduce

Create and train model in python.
Save model and checkpoint, and use freeze_graph to prepare for C++.
Load model in C++ and feed it an input tensor with a batch size larger than 1.

What have you tried?

Not using a variable batch size.
Sanity checking the input placeholder shape of the frozen graph.